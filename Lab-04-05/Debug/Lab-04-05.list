
Lab-04-05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a2c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08006c30  08006c30  00016c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd0  08006fd0  00020314  2**0
                  CONTENTS
  4 .ARM          00000008  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fd8  08006fd8  00020314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  08006fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000314  080072f4  00020314  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  080072f4  00020450  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011647  00000000  00000000  00020342  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002486  00000000  00000000  00031989  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  00033e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d70  00000000  00000000  00034ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029041  00000000  00000000  00035a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d244  00000000  00000000  0005ea59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc325  00000000  00000000  0006bc9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167fc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004878  00000000  00000000  00168040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	08006c14 	.word	0x08006c14

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	08006c14 	.word	0x08006c14

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <calculateVin>:
float rt_temp_values[RT_TABLE_SIZE] = { 150, 145, 140, 135, 130, 125, 120, 115, 110, 105,
										100,  95,  90,  85,  80,  75,  70,  65,  60,  55,
										 50,  45,  40,  35,  30,  25,  20,  15,  10,   5,
										  0,  -5, -10, -15, -20, -25, -30, -35, -40 };

float calculateVin(int n) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    return ( n / (float)(2<<11) ) * 3.3;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	ee07 3a90 	vmov	s15, r3
 80005fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000602:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000630 <calculateVin+0x40>
 8000606:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800060a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800060e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000628 <calculateVin+0x38>
 8000612:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000616:	eef7 7bc7 	vcvt.f32.f64	s15, d7
};
 800061a:	eeb0 0a67 	vmov.f32	s0, s15
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	66666666 	.word	0x66666666
 800062c:	400a6666 	.word	0x400a6666
 8000630:	45800000 	.word	0x45800000
 8000634:	00000000 	.word	0x00000000

08000638 <calculateRt>:

float calculateRt(float Vin) {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	ed87 0a01 	vstr	s0, [r7, #4]
    return ( 10000 * 3.3 ) / Vin - 10000;
 8000642:	edd7 7a01 	vldr	s15, [r7, #4]
 8000646:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800064a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000670 <calculateRt+0x38>
 800064e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000652:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000678 <calculateRt+0x40>
 8000656:	ee37 7b46 	vsub.f64	d7, d7, d6
 800065a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
};
 800065e:	eeb0 0a67 	vmov.f32	s0, s15
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	f3af 8000 	nop.w
 8000670:	00000000 	.word	0x00000000
 8000674:	40e01d00 	.word	0x40e01d00
 8000678:	00000000 	.word	0x00000000
 800067c:	40c38800 	.word	0x40c38800

08000680 <calculateTemp>:

float calculateTemp(float Rt) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
 8000686:	ed87 0a01 	vstr	s0, [r7, #4]

    int index = search_item(rt_values, Rt);
 800068a:	ed97 0a01 	vldr	s0, [r7, #4]
 800068e:	4826      	ldr	r0, [pc, #152]	; (8000728 <calculateTemp+0xa8>)
 8000690:	f000 f84e 	bl	8000730 <search_item>
 8000694:	61f8      	str	r0, [r7, #28]

    if (index != -1)
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800069c:	d006      	beq.n	80006ac <calculateTemp+0x2c>
        return rt_temp_values[index];
 800069e:	4a23      	ldr	r2, [pc, #140]	; (800072c <calculateTemp+0xac>)
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4413      	add	r3, r2
 80006a6:	edd3 7a00 	vldr	s15, [r3]
 80006aa:	e038      	b.n	800071e <calculateTemp+0x9e>
    else
    {
        int idx = findNeighbours(Rt);
 80006ac:	ed97 0a01 	vldr	s0, [r7, #4]
 80006b0:	f000 f864 	bl	800077c <findNeighbours>
 80006b4:	61b8      	str	r0, [r7, #24]
        float x_1, x_2, y_1, y_2;
        x_1 = rt_values[idx-1];
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <calculateTemp+0xa8>)
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	617b      	str	r3, [r7, #20]
        y_1 = rt_temp_values[idx-1];
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	4a18      	ldr	r2, [pc, #96]	; (800072c <calculateTemp+0xac>)
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	613b      	str	r3, [r7, #16]
        x_2 = rt_values[idx];
 80006d2:	4a15      	ldr	r2, [pc, #84]	; (8000728 <calculateTemp+0xa8>)
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4413      	add	r3, r2
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	60fb      	str	r3, [r7, #12]
        y_2 = rt_temp_values[idx];
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <calculateTemp+0xac>)
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	60bb      	str	r3, [r7, #8]

        return ( (Rt-x_1) / (x_2-x_1) ) * (y_2-y_1) + y_1;
 80006ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80006ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80006f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80006fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80006fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000706:	edd7 6a02 	vldr	s13, [r7, #8]
 800070a:	edd7 7a04 	vldr	s15, [r7, #16]
 800070e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000716:	edd7 7a04 	vldr	s15, [r7, #16]
 800071a:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
};
 800071e:	eeb0 0a67 	vmov.f32	s0, s15
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000000 	.word	0x20000000
 800072c:	2000009c 	.word	0x2000009c

08000730 <search_item>:
int search_item(float arr[], float Rt){
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	ed87 0a00 	vstr	s0, [r7]
	for (int i = 0;  i < RT_TABLE_SIZE; i++) {
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e011      	b.n	8000766 <search_item+0x36>
		if (arr[i] == Rt)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	edd3 7a00 	vldr	s15, [r3]
 800074e:	ed97 7a00 	vldr	s14, [r7]
 8000752:	eeb4 7a67 	vcmp.f32	s14, s15
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d101      	bne.n	8000760 <search_item+0x30>
			return i;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	e007      	b.n	8000770 <search_item+0x40>
	for (int i = 0;  i < RT_TABLE_SIZE; i++) {
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3301      	adds	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2b26      	cmp	r3, #38	; 0x26
 800076a:	ddea      	ble.n	8000742 <search_item+0x12>
	}
	return -1;
 800076c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000770:	4618      	mov	r0, r3
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <findNeighbours>:
int findNeighbours(float Rt) {
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	ed87 0a01 	vstr	s0, [r7, #4]
    int idx = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < RT_TABLE_SIZE; i++) {
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	e012      	b.n	80007b6 <findNeighbours+0x3a>
        if (Rt < rt_values[i]) {
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <findNeighbours+0x50>)
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	ed97 7a01 	vldr	s14, [r7, #4]
 80007a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a8:	d502      	bpl.n	80007b0 <findNeighbours+0x34>
        	idx = i;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	60fb      	str	r3, [r7, #12]
            break;
 80007ae:	e005      	b.n	80007bc <findNeighbours+0x40>
    for (int i = 0; i < RT_TABLE_SIZE; i++) {
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	3301      	adds	r3, #1
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2b26      	cmp	r3, #38	; 0x26
 80007ba:	dde9      	ble.n	8000790 <findNeighbours+0x14>
        }
    }
    return idx;
 80007bc:	68fb      	ldr	r3, [r7, #12]
};
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000000 	.word	0x20000000

080007d0 <convert_C_F>:

float convert_C_F(float C){
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	ed87 0a01 	vstr	s0, [r7, #4]
    return C * 9/5 + 32;
 80007da:	edd7 7a01 	vldr	s15, [r7, #4]
 80007de:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80007e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007e6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80007ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000804 <convert_C_F+0x34>
 80007f2:	ee77 7a87 	vadd.f32	s15, s15, s14
};
 80007f6:	eeb0 0a67 	vmov.f32	s0, s15
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	42000000 	.word	0x42000000

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fcb3 	bl	8001176 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f814 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f000 f95c 	bl	8000ad0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000818:	f000 f8a0 	bl	800095c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800081c:	f000 f928 	bl	8000a70 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000820:	f000 f8ee 	bl	8000a00 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <main+0x2c>)
 8000826:	f000 f9b1 	bl	8000b8c <RetargetInit>
  HAL_TIM_Base_Start_IT(&htim6);
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <main+0x30>)
 800082c:	f002 fcf8 	bl	8003220 <HAL_TIM_Base_Start_IT>
  //printf("Bienvenido\n\r");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000830:	e7fe      	b.n	8000830 <main+0x28>
 8000832:	bf00      	nop
 8000834:	2000033c 	.word	0x2000033c
 8000838:	20000404 	.word	0x20000404

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b0b8      	sub	sp, #224	; 0xe0
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000846:	2234      	movs	r2, #52	; 0x34
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fe90 	bl	8004570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	2290      	movs	r2, #144	; 0x90
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f003 fe81 	bl	8004570 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <SystemClock_Config+0x118>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a38      	ldr	r2, [pc, #224]	; (8000954 <SystemClock_Config+0x118>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b36      	ldr	r3, [pc, #216]	; (8000954 <SystemClock_Config+0x118>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000886:	4b34      	ldr	r3, [pc, #208]	; (8000958 <SystemClock_Config+0x11c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a33      	ldr	r2, [pc, #204]	; (8000958 <SystemClock_Config+0x11c>)
 800088c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000890:	6013      	str	r3, [r2, #0]
 8000892:	4b31      	ldr	r3, [pc, #196]	; (8000958 <SystemClock_Config+0x11c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800089e:	2301      	movs	r3, #1
 80008a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ac:	2302      	movs	r3, #2
 80008ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ba:	2304      	movs	r3, #4
 80008bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008c0:	23d8      	movs	r3, #216	; 0xd8
 80008c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fbea 	bl	80020b0 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008e2:	f000 f94b 	bl	8000b7c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008e6:	f001 fb93 	bl	8002010 <HAL_PWREx_EnableOverDrive>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80008f0:	f000 f944 	bl	8000b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
 80008f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000906:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800090a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000916:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800091a:	2107      	movs	r1, #7
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fe39 	bl	8002594 <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000928:	f000 f928 	bl	8000b7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800092c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000930:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000932:	2300      	movs	r3, #0
 8000934:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	4618      	mov	r0, r3
 800093c:	f002 f81e 	bl	800297c <HAL_RCCEx_PeriphCLKConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000946:	f000 f919 	bl	8000b7c <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	37e0      	adds	r7, #224	; 0xe0
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_ADC1_Init+0x98>)
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <MX_ADC1_Init+0x9c>)
 8000972:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_ADC1_Init+0x98>)
 8000976:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800097a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_ADC1_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_ADC1_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_ADC1_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_ADC1_Init+0x98>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_ADC1_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_ADC1_Init+0x98>)
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <MX_ADC1_Init+0xa0>)
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_ADC1_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_ADC1_Init+0x98>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_ADC1_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_ADC1_Init+0x98>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_ADC1_Init+0x98>)
 80009be:	f000 fc37 	bl	8001230 <HAL_ADC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009c8:	f000 f8d8 	bl	8000b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009cc:	2303      	movs	r3, #3
 80009ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_ADC1_Init+0x98>)
 80009de:	f000 fdf1 	bl	80015c4 <HAL_ADC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009e8:	f000 f8c8 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200003bc 	.word	0x200003bc
 80009f8:	40012000 	.word	0x40012000
 80009fc:	0f000001 	.word	0x0f000001

08000a00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a12:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <MX_TIM6_Init+0x6c>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 54000;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a18:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 8000a1c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a2a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a34:	f002 fbc8 	bl	80031c8 <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000a3e:	f000 f89d 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a50:	f002 fe02 	bl	8003658 <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000a5a:	f000 f88f 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000404 	.word	0x20000404
 8000a6c:	40001000 	.word	0x40001000

08000a70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_USART3_UART_Init+0x58>)
 8000a76:	4a15      	ldr	r2, [pc, #84]	; (8000acc <MX_USART3_UART_Init+0x5c>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_USART3_UART_Init+0x58>)
 8000a7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART3_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_USART3_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USART3_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART3_UART_Init+0x58>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USART3_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART3_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USART3_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USART3_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USART3_UART_Init+0x58>)
 8000ab4:	f002 fe4a 	bl	800374c <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000abe:	f000 f85d 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  //HAL_UART_MspInit(&huart3);
  /* USER CODE END USART3_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000033c 	.word	0x2000033c
 8000acc:	40004800 	.word	0x40004800

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <MX_GPIO_Init+0xa4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <MX_GPIO_Init+0xa4>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <MX_GPIO_Init+0xa4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_GPIO_Init+0xa4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <MX_GPIO_Init+0xa4>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_GPIO_Init+0xa4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_GPIO_Init+0xa4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <MX_GPIO_Init+0xa4>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_GPIO_Init+0xa4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_GPIO_Init+0xa4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <MX_GPIO_Init+0xa4>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_GPIO_Init+0xa4>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2180      	movs	r1, #128	; 0x80
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <MX_GPIO_Init+0xa8>)
 8000b4c:	f001 fa46 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_GPIO_Init+0xa8>)
 8000b68:	f001 f88e 	bl	8001c88 <HAL_GPIO_Init>

}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	; 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020400 	.word	0x40020400

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <RetargetInit+0x28>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <RetargetInit+0x2c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6898      	ldr	r0, [r3, #8]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	f004 f93f 	bl	8004e28 <setvbuf>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000444 	.word	0x20000444
 8000bb8:	20000144 	.word	0x20000144

08000bbc <_isatty>:

int _isatty(int fd) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db04      	blt.n	8000bd4 <_isatty+0x18>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	dc01      	bgt.n	8000bd4 <_isatty+0x18>
    return 1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e005      	b.n	8000be0 <_isatty+0x24>

  errno = EBADF;
 8000bd4:	f003 fca2 	bl	800451c <__errno>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	2309      	movs	r3, #9
 8000bdc:	6013      	str	r3, [r2, #0]
  return 0;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_write>:

int _write(int fd, char* ptr, int len) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d002      	beq.n	8000c00 <_write+0x18>
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d111      	bne.n	8000c24 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <_write+0x54>)
 8000c02:	6818      	ldr	r0, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	f002 fdeb 	bl	80037e8 <HAL_UART_Transmit>
 8000c12:	4603      	mov	r3, r0
 8000c14:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <_write+0x38>
      return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	e008      	b.n	8000c32 <_write+0x4a>
    else
      return EIO;
 8000c20:	2305      	movs	r3, #5
 8000c22:	e006      	b.n	8000c32 <_write+0x4a>
  }
  errno = EBADF;
 8000c24:	f003 fc7a 	bl	800451c <__errno>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	2309      	movs	r3, #9
 8000c2c:	6013      	str	r3, [r2, #0]
  return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000444 	.word	0x20000444

08000c40 <_close>:

int _close(int fd) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db04      	blt.n	8000c58 <_close+0x18>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	dc01      	bgt.n	8000c58 <_close+0x18>
    return 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	e006      	b.n	8000c66 <_close+0x26>

  errno = EBADF;
 8000c58:	f003 fc60 	bl	800451c <__errno>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	2309      	movs	r3, #9
 8000c60:	6013      	str	r3, [r2, #0]
  return -1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000c7a:	f003 fc4f 	bl	800451c <__errno>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	2309      	movs	r3, #9
 8000c82:	6013      	str	r3, [r2, #0]
  return -1;
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <_read>:

int _read(int fd, char* ptr, int len) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d110      	bne.n	8000cc4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <_read+0x4c>)
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	2201      	movs	r2, #1
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	f002 fe2c 	bl	800390a <HAL_UART_Receive>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000cb6:	7dfb      	ldrb	r3, [r7, #23]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <_read+0x30>
      return 1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e008      	b.n	8000cd2 <_read+0x42>
    else
      return EIO;
 8000cc0:	2305      	movs	r3, #5
 8000cc2:	e006      	b.n	8000cd2 <_read+0x42>
  }
  errno = EBADF;
 8000cc4:	f003 fc2a 	bl	800451c <__errno>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	2309      	movs	r3, #9
 8000ccc:	6013      	str	r3, [r2, #0]
  return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000444 	.word	0x20000444

08000ce0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db08      	blt.n	8000d02 <_fstat+0x22>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	dc05      	bgt.n	8000d02 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cfc:	605a      	str	r2, [r3, #4]
    return 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e005      	b.n	8000d0e <_fstat+0x2e>
  }

  errno = EBADF;
 8000d02:	f003 fc0b 	bl	800451c <__errno>
 8000d06:	4602      	mov	r2, r0
 8000d08:	2309      	movs	r3, #9
 8000d0a:	6013      	str	r3, [r2, #0]
  return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x44>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800

08000d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a15      	ldr	r2, [pc, #84]	; (8000dd4 <HAL_ADC_MspInit+0x74>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d123      	bne.n	8000dca <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_ADC_MspInit+0x78>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <HAL_ADC_MspInit+0x78>)
 8000d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_ADC_MspInit+0x78>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_ADC_MspInit+0x78>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <HAL_ADC_MspInit+0x78>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <HAL_ADC_MspInit+0x78>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000db2:	2308      	movs	r3, #8
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db6:	2303      	movs	r3, #3
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_ADC_MspInit+0x7c>)
 8000dc6:	f000 ff5f 	bl	8001c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40012000 	.word	0x40012000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <HAL_TIM_Base_MspInit+0x44>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d113      	bne.n	8000e1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_TIM_Base_MspInit+0x48>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <HAL_TIM_Base_MspInit+0x48>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_TIM_Base_MspInit+0x48>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2036      	movs	r0, #54	; 0x36
 8000e10:	f000 fee1 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e14:	2036      	movs	r0, #54	; 0x36
 8000e16:	f000 fefa 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40001000 	.word	0x40001000
 8000e28:	40023800 	.word	0x40023800

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <HAL_UART_MspInit+0x8c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d130      	bne.n	8000eb0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <HAL_UART_MspInit+0x90>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <HAL_UART_MspInit+0x90>)
 8000e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_UART_MspInit+0x90>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_UART_MspInit+0x90>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <HAL_UART_MspInit+0x90>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_UART_MspInit+0x90>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e90:	2307      	movs	r3, #7
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <HAL_UART_MspInit+0x94>)
 8000e9c:	f000 fef4 	bl	8001c88 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2027      	movs	r0, #39	; 0x27
 8000ea6:	f000 fe96 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eaa:	2027      	movs	r0, #39	; 0x27
 8000eac:	f000 feaf 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	; 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40004800 	.word	0x40004800
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 f96a 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <USART3_IRQHandler+0x10>)
 8000f26:	f002 fdbd 	bl	8003aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000033c 	.word	0x2000033c

08000f34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f3a:	483a      	ldr	r0, [pc, #232]	; (8001024 <TIM6_DAC_IRQHandler+0xf0>)
 8000f3c:	f002 f99a 	bl	8003274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  printf("Starting conversion\n\r");
 8000f40:	4839      	ldr	r0, [pc, #228]	; (8001028 <TIM6_DAC_IRQHandler+0xf4>)
 8000f42:	f003 ff59 	bl	8004df8 <iprintf>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	4838      	ldr	r0, [pc, #224]	; (800102c <TIM6_DAC_IRQHandler+0xf8>)
 8000f4c:	f001 f846 	bl	8001fdc <HAL_GPIO_WritePin>

  HAL_ADC_Start(&hadc1);
 8000f50:	4837      	ldr	r0, [pc, #220]	; (8001030 <TIM6_DAC_IRQHandler+0xfc>)
 8000f52:	f000 f9b1 	bl	80012b8 <HAL_ADC_Start>
  while (HAL_ADC_PollForConversion(&hadc1, 1000000) != HAL_OK);
 8000f56:	bf00      	nop
 8000f58:	4936      	ldr	r1, [pc, #216]	; (8001034 <TIM6_DAC_IRQHandler+0x100>)
 8000f5a:	4835      	ldr	r0, [pc, #212]	; (8001030 <TIM6_DAC_IRQHandler+0xfc>)
 8000f5c:	f000 faa0 	bl	80014a0 <HAL_ADC_PollForConversion>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f8      	bne.n	8000f58 <TIM6_DAC_IRQHandler+0x24>
  HAL_ADC_Stop(&hadc1);
 8000f66:	4832      	ldr	r0, [pc, #200]	; (8001030 <TIM6_DAC_IRQHandler+0xfc>)
 8000f68:	f000 fa66 	bl	8001438 <HAL_ADC_Stop>

  printf("Conversion complete\n\r");
 8000f6c:	4832      	ldr	r0, [pc, #200]	; (8001038 <TIM6_DAC_IRQHandler+0x104>)
 8000f6e:	f003 ff43 	bl	8004df8 <iprintf>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	482d      	ldr	r0, [pc, #180]	; (800102c <TIM6_DAC_IRQHandler+0xf8>)
 8000f78:	f001 f830 	bl	8001fdc <HAL_GPIO_WritePin>

  int adc_value = HAL_ADC_GetValue(&hadc1);
 8000f7c:	482c      	ldr	r0, [pc, #176]	; (8001030 <TIM6_DAC_IRQHandler+0xfc>)
 8000f7e:	f000 fb13 	bl	80015a8 <HAL_ADC_GetValue>
 8000f82:	4603      	mov	r3, r0
 8000f84:	617b      	str	r3, [r7, #20]
  float Vin = calculateVin(adc_value);
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	f7ff fb32 	bl	80005f0 <calculateVin>
 8000f8c:	ed87 0a04 	vstr	s0, [r7, #16]
  printf("Vin calculated...\r");
 8000f90:	482a      	ldr	r0, [pc, #168]	; (800103c <TIM6_DAC_IRQHandler+0x108>)
 8000f92:	f003 ff31 	bl	8004df8 <iprintf>
  float Rt = calculateRt(Vin);
 8000f96:	ed97 0a04 	vldr	s0, [r7, #16]
 8000f9a:	f7ff fb4d 	bl	8000638 <calculateRt>
 8000f9e:	ed87 0a03 	vstr	s0, [r7, #12]
  printf("Rt calculated...\r");
 8000fa2:	4827      	ldr	r0, [pc, #156]	; (8001040 <TIM6_DAC_IRQHandler+0x10c>)
 8000fa4:	f003 ff28 	bl	8004df8 <iprintf>
  float TempC = calculateTemp(Rt);
 8000fa8:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fac:	f7ff fb68 	bl	8000680 <calculateTemp>
 8000fb0:	ed87 0a02 	vstr	s0, [r7, #8]
  printf("TempC calculated...\r");
 8000fb4:	4823      	ldr	r0, [pc, #140]	; (8001044 <TIM6_DAC_IRQHandler+0x110>)
 8000fb6:	f003 ff1f 	bl	8004df8 <iprintf>
  float TempF = convert_C_F(TempC);
 8000fba:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fbe:	f7ff fc07 	bl	80007d0 <convert_C_F>
 8000fc2:	ed87 0a01 	vstr	s0, [r7, #4]
  printf("TempF calculated...\r");
 8000fc6:	4820      	ldr	r0, [pc, #128]	; (8001048 <TIM6_DAC_IRQHandler+0x114>)
 8000fc8:	f003 ff16 	bl	8004df8 <iprintf>

  printf("%d    ", adc_value);
 8000fcc:	6979      	ldr	r1, [r7, #20]
 8000fce:	481f      	ldr	r0, [pc, #124]	; (800104c <TIM6_DAC_IRQHandler+0x118>)
 8000fd0:	f003 ff12 	bl	8004df8 <iprintf>
  printf("%.2f V    ", Vin);
 8000fd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fdc:	ec53 2b17 	vmov	r2, r3, d7
 8000fe0:	481b      	ldr	r0, [pc, #108]	; (8001050 <TIM6_DAC_IRQHandler+0x11c>)
 8000fe2:	f003 ff09 	bl	8004df8 <iprintf>
  printf("%.2f Kohm    ", Rt);
 8000fe6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fee:	ec53 2b17 	vmov	r2, r3, d7
 8000ff2:	4818      	ldr	r0, [pc, #96]	; (8001054 <TIM6_DAC_IRQHandler+0x120>)
 8000ff4:	f003 ff00 	bl	8004df8 <iprintf>
  printf("%.2f C    ", TempC);
 8000ff8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ffc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001000:	ec53 2b17 	vmov	r2, r3, d7
 8001004:	4814      	ldr	r0, [pc, #80]	; (8001058 <TIM6_DAC_IRQHandler+0x124>)
 8001006:	f003 fef7 	bl	8004df8 <iprintf>
  printf("%.2f F\n\r", TempF);
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001012:	ec53 2b17 	vmov	r2, r3, d7
 8001016:	4811      	ldr	r0, [pc, #68]	; (800105c <TIM6_DAC_IRQHandler+0x128>)
 8001018:	f003 feee 	bl	8004df8 <iprintf>



  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000404 	.word	0x20000404
 8001028:	08006c30 	.word	0x08006c30
 800102c:	40020400 	.word	0x40020400
 8001030:	200003bc 	.word	0x200003bc
 8001034:	000f4240 	.word	0x000f4240
 8001038:	08006c48 	.word	0x08006c48
 800103c:	08006c60 	.word	0x08006c60
 8001040:	08006c74 	.word	0x08006c74
 8001044:	08006c88 	.word	0x08006c88
 8001048:	08006ca0 	.word	0x08006ca0
 800104c:	08006cb8 	.word	0x08006cb8
 8001050:	08006cc0 	.word	0x08006cc0
 8001054:	08006ccc 	.word	0x08006ccc
 8001058:	08006cdc 	.word	0x08006cdc
 800105c:	08006ce8 	.word	0x08006ce8

08001060 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x50>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x16>
		heap_end = &end;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <_sbrk+0x50>)
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <_sbrk+0x54>)
 8001074:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <_sbrk+0x50>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <_sbrk+0x50>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	466a      	mov	r2, sp
 8001086:	4293      	cmp	r3, r2
 8001088:	d907      	bls.n	800109a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800108a:	f003 fa47 	bl	800451c <__errno>
 800108e:	4602      	mov	r2, r0
 8001090:	230c      	movs	r3, #12
 8001092:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	e006      	b.n	80010a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <_sbrk+0x50>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a03      	ldr	r2, [pc, #12]	; (80010b0 <_sbrk+0x50>)
 80010a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000330 	.word	0x20000330
 80010b4:	20000450 	.word	0x20000450

080010b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <SystemInit+0x5c>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <SystemInit+0x5c>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <SystemInit+0x60>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a11      	ldr	r2, [pc, #68]	; (8001118 <SystemInit+0x60>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <SystemInit+0x60>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <SystemInit+0x60>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <SystemInit+0x60>)
 80010e4:	4b0d      	ldr	r3, [pc, #52]	; (800111c <SystemInit+0x64>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <SystemInit+0x60>)
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <SystemInit+0x68>)
 80010ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <SystemInit+0x60>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a08      	ldr	r2, [pc, #32]	; (8001118 <SystemInit+0x60>)
 80010f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <SystemInit+0x60>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SystemInit+0x5c>)
 8001104:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001108:	609a      	str	r2, [r3, #8]
#endif
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00
 8001118:	40023800 	.word	0x40023800
 800111c:	fef6ffff 	.word	0xfef6ffff
 8001120:	24003010 	.word	0x24003010

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001128:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800112a:	e003      	b.n	8001134 <LoopCopyDataInit>

0800112c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800112e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001130:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001132:	3104      	adds	r1, #4

08001134 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001138:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800113a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800113c:	d3f6      	bcc.n	800112c <CopyDataInit>
  ldr  r2, =_sbss
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001140:	e002      	b.n	8001148 <LoopFillZerobss>

08001142 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001142:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001144:	f842 3b04 	str.w	r3, [r2], #4

08001148 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800114a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800114c:	d3f9      	bcc.n	8001142 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800114e:	f7ff ffb3 	bl	80010b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001152:	f003 f9e9 	bl	8004528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fb57 	bl	8000808 <main>
  bx  lr    
 800115a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001160:	08006fe0 	.word	0x08006fe0
  ldr  r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001168:	20000314 	.word	0x20000314
  ldr  r2, =_sbss
 800116c:	20000314 	.word	0x20000314
  ldr  r3, = _ebss
 8001170:	20000450 	.word	0x20000450

08001174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC_IRQHandler>

08001176 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117a:	2003      	movs	r0, #3
 800117c:	f000 fd20 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001180:	2000      	movs	r0, #0
 8001182:	f000 f805 	bl	8001190 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fdc7 	bl	8000d18 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x54>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x58>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fd3b 	bl	8001c2a <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00e      	b.n	80011dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d80a      	bhi.n	80011da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c4:	2200      	movs	r2, #0
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f000 fd03 	bl	8001bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <HAL_InitTick+0x5c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000138 	.word	0x20000138
 80011e8:	20000140 	.word	0x20000140
 80011ec:	2000013c 	.word	0x2000013c

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000140 	.word	0x20000140
 8001214:	20000448 	.word	0x20000448

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000448 	.word	0x20000448

08001230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e031      	b.n	80012aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fd86 	bl	8000d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d116      	bne.n	800129c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_ADC_Init+0x84>)
 8001274:	4013      	ands	r3, r2
 8001276:	f043 0202 	orr.w	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 fad4 	bl	800182c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f023 0303 	bic.w	r3, r3, #3
 8001292:	f043 0201 	orr.w	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
 800129a:	e001      	b.n	80012a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	ffffeefd 	.word	0xffffeefd

080012b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d101      	bne.n	80012d2 <HAL_ADC_Start+0x1a>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e0a0      	b.n	8001414 <HAL_ADC_Start+0x15c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d018      	beq.n	800131a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80012f8:	4b49      	ldr	r3, [pc, #292]	; (8001420 <HAL_ADC_Start+0x168>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a49      	ldr	r2, [pc, #292]	; (8001424 <HAL_ADC_Start+0x16c>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	0c9a      	lsrs	r2, r3, #18
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800130c:	e002      	b.n	8001314 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3b01      	subs	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b01      	cmp	r3, #1
 8001326:	d174      	bne.n	8001412 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800132c:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <HAL_ADC_Start+0x170>)
 800132e:	4013      	ands	r3, r2
 8001330:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800134e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800135e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001362:	d106      	bne.n	8001372 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001368:	f023 0206 	bic.w	r2, r3, #6
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	645a      	str	r2, [r3, #68]	; 0x44
 8001370:	e002      	b.n	8001378 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001388:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <HAL_ADC_Start+0x174>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 031f 	and.w	r3, r3, #31
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10f      	bne.n	80013b6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d136      	bne.n	8001412 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	e02d      	b.n	8001412 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_ADC_Start+0x178>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d10e      	bne.n	80013de <HAL_ADC_Start+0x126>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d107      	bne.n	80013de <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013dc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_ADC_Start+0x174>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d113      	bne.n	8001412 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_ADC_Start+0x17c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d10e      	bne.n	8001412 <HAL_ADC_Start+0x15a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d107      	bne.n	8001412 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001410:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	20000138 	.word	0x20000138
 8001424:	431bde83 	.word	0x431bde83
 8001428:	fffff8fe 	.word	0xfffff8fe
 800142c:	40012300 	.word	0x40012300
 8001430:	40012000 	.word	0x40012000
 8001434:	40012200 	.word	0x40012200

08001438 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_ADC_Stop+0x16>
 800144a:	2302      	movs	r3, #2
 800144c:	e01f      	b.n	800148e <HAL_ADC_Stop+0x56>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0201 	bic.w	r2, r2, #1
 8001464:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d107      	bne.n	8001484 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_ADC_Stop+0x64>)
 800147a:	4013      	ands	r3, r2
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	ffffeefe 	.word	0xffffeefe

080014a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014bc:	d113      	bne.n	80014e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014cc:	d10b      	bne.n	80014e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f043 0220 	orr.w	r2, r3, #32
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e05c      	b.n	80015a0 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014e6:	f7ff fe97 	bl	8001218 <HAL_GetTick>
 80014ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014ec:	e01a      	b.n	8001524 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d016      	beq.n	8001524 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d007      	beq.n	800150c <HAL_ADC_PollForConversion+0x6c>
 80014fc:	f7ff fe8c 	bl	8001218 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d20b      	bcs.n	8001524 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f043 0204 	orr.w	r2, r3, #4
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e03d      	b.n	80015a0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b02      	cmp	r3, #2
 8001530:	d1dd      	bne.n	80014ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f06f 0212 	mvn.w	r2, #18
 800153a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d123      	bne.n	800159e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800155a:	2b00      	cmp	r3, #0
 800155c:	d11f      	bne.n	800159e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001576:	2b00      	cmp	r3, #0
 8001578:	d111      	bne.n	800159e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d105      	bne.n	800159e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f043 0201 	orr.w	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1c>
 80015dc:	2302      	movs	r3, #2
 80015de:	e115      	b.n	800180c <HAL_ADC_ConfigChannel+0x248>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b09      	cmp	r3, #9
 80015ee:	d935      	bls.n	800165c <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68d9      	ldr	r1, [r3, #12]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	3b1e      	subs	r3, #30
 8001606:	2207      	movs	r2, #7
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43da      	mvns	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	400a      	ands	r2, r1
 8001614:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a7f      	ldr	r2, [pc, #508]	; (8001818 <HAL_ADC_ConfigChannel+0x254>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d10a      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68d9      	ldr	r1, [r3, #12]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	061a      	lsls	r2, r3, #24
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	e035      	b.n	80016a2 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68d9      	ldr	r1, [r3, #12]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b29b      	uxth	r3, r3
 8001646:	4618      	mov	r0, r3
 8001648:	4603      	mov	r3, r0
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4403      	add	r3, r0
 800164e:	3b1e      	subs	r3, #30
 8001650:	409a      	lsls	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	e022      	b.n	80016a2 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6919      	ldr	r1, [r3, #16]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	2207      	movs	r2, #7
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	400a      	ands	r2, r1
 800167e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6919      	ldr	r1, [r3, #16]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	b29b      	uxth	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	4603      	mov	r3, r0
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4403      	add	r3, r0
 8001698:	409a      	lsls	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d824      	bhi.n	80016f4 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	3b05      	subs	r3, #5
 80016bc:	221f      	movs	r2, #31
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	400a      	ands	r2, r1
 80016ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3b05      	subs	r3, #5
 80016e6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34
 80016f2:	e04c      	b.n	800178e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	d824      	bhi.n	8001746 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	3b23      	subs	r3, #35	; 0x23
 800170e:	221f      	movs	r2, #31
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43da      	mvns	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	400a      	ands	r2, r1
 800171c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3b23      	subs	r3, #35	; 0x23
 8001738:	fa00 f203 	lsl.w	r2, r0, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	631a      	str	r2, [r3, #48]	; 0x30
 8001744:	e023      	b.n	800178e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	3b41      	subs	r3, #65	; 0x41
 8001758:	221f      	movs	r2, #31
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	400a      	ands	r2, r1
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	3b41      	subs	r3, #65	; 0x41
 8001782:	fa00 f203 	lsl.w	r2, r0, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a22      	ldr	r2, [pc, #136]	; (800181c <HAL_ADC_ConfigChannel+0x258>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d109      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x1e8>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b12      	cmp	r3, #18
 800179e:	d105      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_ADC_ConfigChannel+0x25c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <HAL_ADC_ConfigChannel+0x25c>)
 80017a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017aa:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1a      	ldr	r2, [pc, #104]	; (800181c <HAL_ADC_ConfigChannel+0x258>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d125      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x23e>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_ADC_ConfigChannel+0x254>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d003      	beq.n	80017c8 <HAL_ADC_ConfigChannel+0x204>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b11      	cmp	r3, #17
 80017c6:	d11c      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_ADC_ConfigChannel+0x25c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <HAL_ADC_ConfigChannel+0x25c>)
 80017ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017d2:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_ADC_ConfigChannel+0x254>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d111      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_ADC_ConfigChannel+0x260>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a11      	ldr	r2, [pc, #68]	; (8001828 <HAL_ADC_ConfigChannel+0x264>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	0c9a      	lsrs	r2, r3, #18
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80017f4:	e002      	b.n	80017fc <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f9      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	10000012 	.word	0x10000012
 800181c:	40012000 	.word	0x40012000
 8001820:	40012300 	.word	0x40012300
 8001824:	20000138 	.word	0x20000138
 8001828:	431bde83 	.word	0x431bde83

0800182c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001834:	4b78      	ldr	r3, [pc, #480]	; (8001a18 <ADC_Init+0x1ec>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4a77      	ldr	r2, [pc, #476]	; (8001a18 <ADC_Init+0x1ec>)
 800183a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800183e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001840:	4b75      	ldr	r3, [pc, #468]	; (8001a18 <ADC_Init+0x1ec>)
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4973      	ldr	r1, [pc, #460]	; (8001a18 <ADC_Init+0x1ec>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800185c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	021a      	lsls	r2, r3, #8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001880:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6899      	ldr	r1, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	4a58      	ldr	r2, [pc, #352]	; (8001a1c <ADC_Init+0x1f0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d022      	beq.n	8001906 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6899      	ldr	r1, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6899      	ldr	r1, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	e00f      	b.n	8001926 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001914:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001924:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0202 	bic.w	r2, r2, #2
 8001934:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6899      	ldr	r1, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	005a      	lsls	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01b      	beq.n	800198c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001962:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001972:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6859      	ldr	r1, [r3, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	3b01      	subs	r3, #1
 8001980:	035a      	lsls	r2, r3, #13
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	e007      	b.n	800199c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	051a      	lsls	r2, r3, #20
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019de:	025a      	lsls	r2, r3, #9
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6899      	ldr	r1, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	029a      	lsls	r2, r3, #10
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	609a      	str	r2, [r3, #8]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40012300 	.word	0x40012300
 8001a1c:	0f000001 	.word	0x0f000001

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <__NVIC_SetPriorityGrouping+0x40>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <__NVIC_SetPriorityGrouping+0x40>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60d3      	str	r3, [r2, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00
 8001a64:	05fa0000 	.word	0x05fa0000

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4907      	ldr	r1, [pc, #28]	; (8001abc <__NVIC_EnableIRQ+0x38>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	; (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	; (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b8c:	d301      	bcc.n	8001b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00f      	b.n	8001bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <SysTick_Config+0x40>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f7ff ff8e 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SysTick_Config+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <SysTick_Config+0x40>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff29 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be8:	f7ff ff3e 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f7ff ff8e 	bl	8001b14 <NVIC_EncodePriority>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff5d 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff31 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffa2 	bl	8001b7c <SysTick_Config>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d004      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e00c      	b.n	8001c7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2205      	movs	r2, #5
 8001c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	e175      	b.n	8001f94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 8164 	bne.w	8001f8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x4e>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b12      	cmp	r3, #18
 8001cd4:	d123      	bne.n	8001d1e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	69b9      	ldr	r1, [r7, #24]
 8001d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0203 	and.w	r2, r3, #3
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d00b      	beq.n	8001d72 <HAL_GPIO_Init+0xea>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d66:	2b11      	cmp	r3, #17
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d130      	bne.n	8001dd4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da8:	2201      	movs	r2, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 0201 	and.w	r2, r3, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80be 	beq.w	8001f8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a64      	ldr	r2, [pc, #400]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e2a:	4a60      	ldr	r2, [pc, #384]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a57      	ldr	r2, [pc, #348]	; (8001fb0 <HAL_GPIO_Init+0x328>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d037      	beq.n	8001ec6 <HAL_GPIO_Init+0x23e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a56      	ldr	r2, [pc, #344]	; (8001fb4 <HAL_GPIO_Init+0x32c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d031      	beq.n	8001ec2 <HAL_GPIO_Init+0x23a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a55      	ldr	r2, [pc, #340]	; (8001fb8 <HAL_GPIO_Init+0x330>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d02b      	beq.n	8001ebe <HAL_GPIO_Init+0x236>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a54      	ldr	r2, [pc, #336]	; (8001fbc <HAL_GPIO_Init+0x334>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d025      	beq.n	8001eba <HAL_GPIO_Init+0x232>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a53      	ldr	r2, [pc, #332]	; (8001fc0 <HAL_GPIO_Init+0x338>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01f      	beq.n	8001eb6 <HAL_GPIO_Init+0x22e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <HAL_GPIO_Init+0x33c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d019      	beq.n	8001eb2 <HAL_GPIO_Init+0x22a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <HAL_GPIO_Init+0x340>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0x226>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a50      	ldr	r2, [pc, #320]	; (8001fcc <HAL_GPIO_Init+0x344>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00d      	beq.n	8001eaa <HAL_GPIO_Init+0x222>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4f      	ldr	r2, [pc, #316]	; (8001fd0 <HAL_GPIO_Init+0x348>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <HAL_GPIO_Init+0x21e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4e      	ldr	r2, [pc, #312]	; (8001fd4 <HAL_GPIO_Init+0x34c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_GPIO_Init+0x21a>
 8001e9e:	2309      	movs	r3, #9
 8001ea0:	e012      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ea2:	230a      	movs	r3, #10
 8001ea4:	e010      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	e00e      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eaa:	2307      	movs	r3, #7
 8001eac:	e00c      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eae:	2306      	movs	r3, #6
 8001eb0:	e00a      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	e008      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e004      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	f002 0203 	and.w	r2, r2, #3
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ed8:	4934      	ldr	r1, [pc, #208]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f0a:	4a33      	ldr	r2, [pc, #204]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f10:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f34:	4a28      	ldr	r2, [pc, #160]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3a:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5e:	4a1e      	ldr	r2, [pc, #120]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f64:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f88:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3301      	adds	r3, #1
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2b0f      	cmp	r3, #15
 8001f98:	f67f ae86 	bls.w	8001ca8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3724      	adds	r7, #36	; 0x24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40013800 	.word	0x40013800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020c00 	.word	0x40020c00
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40021400 	.word	0x40021400
 8001fc8:	40021800 	.word	0x40021800
 8001fcc:	40021c00 	.word	0x40021c00
 8001fd0:	40022000 	.word	0x40022000
 8001fd4:	40022400 	.word	0x40022400
 8001fd8:	40013c00 	.word	0x40013c00

08001fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fec:	787b      	ldrb	r3, [r7, #1]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ff8:	e003      	b.n	8002002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	619a      	str	r2, [r3, #24]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800203e:	f7ff f8eb 	bl	8001218 <HAL_GetTick>
 8002042:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002044:	e009      	b.n	800205a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002046:	f7ff f8e7 	bl	8001218 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002054:	d901      	bls.n	800205a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e022      	b.n	80020a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002066:	d1ee      	bne.n	8002046 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0f      	ldr	r2, [pc, #60]	; (80020ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800206e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002072:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002074:	f7ff f8d0 	bl	8001218 <HAL_GetTick>
 8002078:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800207a:	e009      	b.n	8002090 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800207c:	f7ff f8cc 	bl	8001218 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800208a:	d901      	bls.n	8002090 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e007      	b.n	80020a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800209c:	d1ee      	bne.n	800207c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40007000 	.word	0x40007000

080020b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e25e      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8087 	beq.w	80021e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d4:	4b96      	ldr	r3, [pc, #600]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d00c      	beq.n	80020fa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e0:	4b93      	ldr	r3, [pc, #588]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d112      	bne.n	8002112 <HAL_RCC_OscConfig+0x62>
 80020ec:	4b90      	ldr	r3, [pc, #576]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020f8:	d10b      	bne.n	8002112 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fa:	4b8d      	ldr	r3, [pc, #564]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d06c      	beq.n	80021e0 <HAL_RCC_OscConfig+0x130>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d168      	bne.n	80021e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e238      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x7a>
 800211c:	4b84      	ldr	r3, [pc, #528]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a83      	ldr	r2, [pc, #524]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	e02e      	b.n	8002188 <HAL_RCC_OscConfig+0xd8>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x9c>
 8002132:	4b7f      	ldr	r3, [pc, #508]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7e      	ldr	r2, [pc, #504]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7b      	ldr	r2, [pc, #492]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e01d      	b.n	8002188 <HAL_RCC_OscConfig+0xd8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0xc0>
 8002156:	4b76      	ldr	r3, [pc, #472]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a75      	ldr	r2, [pc, #468]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 800215c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b73      	ldr	r3, [pc, #460]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a72      	ldr	r2, [pc, #456]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0xd8>
 8002170:	4b6f      	ldr	r3, [pc, #444]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a6e      	ldr	r2, [pc, #440]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b6c      	ldr	r3, [pc, #432]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a6b      	ldr	r2, [pc, #428]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7ff f842 	bl	8001218 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff f83e 	bl	8001218 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1ec      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b61      	ldr	r3, [pc, #388]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0xe8>
 80021b6:	e014      	b.n	80021e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff f82e 	bl	8001218 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff f82a 	bl	8001218 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1d8      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	4b57      	ldr	r3, [pc, #348]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x110>
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d069      	beq.n	80022c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ee:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fa:	4b4d      	ldr	r3, [pc, #308]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b08      	cmp	r3, #8
 8002204:	d11c      	bne.n	8002240 <HAL_RCC_OscConfig+0x190>
 8002206:	4b4a      	ldr	r3, [pc, #296]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d116      	bne.n	8002240 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_RCC_OscConfig+0x17a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e1ac      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	493d      	ldr	r1, [pc, #244]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	e040      	b.n	80022c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d023      	beq.n	8002290 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002248:	4b39      	ldr	r3, [pc, #228]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a38      	ldr	r2, [pc, #224]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe ffe0 	bl	8001218 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225c:	f7fe ffdc 	bl	8001218 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e18a      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226e:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4929      	ldr	r1, [pc, #164]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
 800228e:	e018      	b.n	80022c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002290:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a26      	ldr	r2, [pc, #152]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe ffbc 	bl	8001218 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a4:	f7fe ffb8 	bl	8001218 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e166      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d038      	beq.n	8002340 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d019      	beq.n	800230a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 80022d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022da:	4a15      	ldr	r2, [pc, #84]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e2:	f7fe ff99 	bl	8001218 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ea:	f7fe ff95 	bl	8001218 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e143      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 80022fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x23a>
 8002308:	e01a      	b.n	8002340 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 800230c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_RCC_OscConfig+0x280>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe ff7f 	bl	8001218 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231e:	f7fe ff7b 	bl	8001218 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d903      	bls.n	8002334 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e129      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
 8002330:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	4b95      	ldr	r3, [pc, #596]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ee      	bne.n	800231e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80a4 	beq.w	8002496 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234e:	4b8f      	ldr	r3, [pc, #572]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10d      	bne.n	8002376 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	4b8c      	ldr	r3, [pc, #560]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a8b      	ldr	r2, [pc, #556]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b89      	ldr	r3, [pc, #548]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002376:	4b86      	ldr	r3, [pc, #536]	; (8002590 <HAL_RCC_OscConfig+0x4e0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002382:	4b83      	ldr	r3, [pc, #524]	; (8002590 <HAL_RCC_OscConfig+0x4e0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a82      	ldr	r2, [pc, #520]	; (8002590 <HAL_RCC_OscConfig+0x4e0>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7fe ff43 	bl	8001218 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7fe ff3f 	bl	8001218 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b64      	cmp	r3, #100	; 0x64
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0ed      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a8:	4b79      	ldr	r3, [pc, #484]	; (8002590 <HAL_RCC_OscConfig+0x4e0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x31a>
 80023bc:	4b73      	ldr	r3, [pc, #460]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	4a72      	ldr	r2, [pc, #456]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
 80023c8:	e02d      	b.n	8002426 <HAL_RCC_OscConfig+0x376>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x33c>
 80023d2:	4b6e      	ldr	r3, [pc, #440]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	4a6d      	ldr	r2, [pc, #436]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6713      	str	r3, [r2, #112]	; 0x70
 80023de:	4b6b      	ldr	r3, [pc, #428]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a6a      	ldr	r2, [pc, #424]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ea:	e01c      	b.n	8002426 <HAL_RCC_OscConfig+0x376>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x35e>
 80023f4:	4b65      	ldr	r3, [pc, #404]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a64      	ldr	r2, [pc, #400]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002400:	4b62      	ldr	r3, [pc, #392]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	4a61      	ldr	r2, [pc, #388]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6713      	str	r3, [r2, #112]	; 0x70
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0x376>
 800240e:	4b5f      	ldr	r3, [pc, #380]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a5e      	ldr	r2, [pc, #376]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
 800241a:	4b5c      	ldr	r3, [pc, #368]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a5b      	ldr	r2, [pc, #364]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d015      	beq.n	800245a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fef3 	bl	8001218 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe feef 	bl	8001218 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e09b      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	4b4f      	ldr	r3, [pc, #316]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ee      	beq.n	8002436 <HAL_RCC_OscConfig+0x386>
 8002458:	e014      	b.n	8002484 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7fe fedd 	bl	8001218 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fed9 	bl	8001218 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e085      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	4b44      	ldr	r3, [pc, #272]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ee      	bne.n	8002462 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b40      	ldr	r3, [pc, #256]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a3f      	ldr	r2, [pc, #252]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d071      	beq.n	8002582 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800249e:	4b3b      	ldr	r3, [pc, #236]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d069      	beq.n	800257e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d14b      	bne.n	800254a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a35      	ldr	r2, [pc, #212]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 80024b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe feab 	bl	8001218 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe fea7 	bl	8001218 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e055      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d8:	4b2c      	ldr	r3, [pc, #176]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	019b      	lsls	r3, r3, #6
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	3b01      	subs	r3, #1
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	061b      	lsls	r3, r3, #24
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	071b      	lsls	r3, r3, #28
 8002510:	491e      	ldr	r1, [pc, #120]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1c      	ldr	r2, [pc, #112]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 800251c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7fe fe79 	bl	8001218 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe fe75 	bl	8001218 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e023      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x47a>
 8002548:	e01b      	b.n	8002582 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a0f      	ldr	r2, [pc, #60]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe fe5f 	bl	8001218 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255e:	f7fe fe5b 	bl	8001218 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e009      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_RCC_OscConfig+0x4dc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x4ae>
 800257c:	e001      	b.n	8002582 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40023800 	.word	0x40023800
 8002590:	40007000 	.word	0x40007000

08002594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0ce      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4b69      	ldr	r3, [pc, #420]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d910      	bls.n	80025dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b66      	ldr	r3, [pc, #408]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 020f 	bic.w	r2, r3, #15
 80025c2:	4964      	ldr	r1, [pc, #400]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b62      	ldr	r3, [pc, #392]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0b6      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f4:	4b58      	ldr	r3, [pc, #352]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a57      	ldr	r2, [pc, #348]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800260c:	4b52      	ldr	r3, [pc, #328]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a51      	ldr	r2, [pc, #324]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002616:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002618:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	494c      	ldr	r1, [pc, #304]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d040      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d115      	bne.n	8002676 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e07d      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002656:	4b40      	ldr	r3, [pc, #256]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e071      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	4b3c      	ldr	r3, [pc, #240]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e069      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f023 0203 	bic.w	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4935      	ldr	r1, [pc, #212]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002688:	f7fe fdc6 	bl	8001218 <HAL_GetTick>
 800268c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002690:	f7fe fdc2 	bl	8001218 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e051      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 020c 	and.w	r2, r3, #12
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d1eb      	bne.n	8002690 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026b8:	4b26      	ldr	r3, [pc, #152]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d210      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 020f 	bic.w	r2, r3, #15
 80026ce:	4921      	ldr	r1, [pc, #132]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e030      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4915      	ldr	r1, [pc, #84]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	490d      	ldr	r1, [pc, #52]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002726:	f000 f81d 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 800272a:	4601      	mov	r1, r0
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	4a09      	ldr	r2, [pc, #36]	; (800275c <HAL_RCC_ClockConfig+0x1c8>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
 800273a:	fa21 f303 	lsr.w	r3, r1, r3
 800273e:	4a08      	ldr	r2, [pc, #32]	; (8002760 <HAL_RCC_ClockConfig+0x1cc>)
 8002740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002742:	2000      	movs	r0, #0
 8002744:	f7fe fd24 	bl	8001190 <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00
 8002758:	40023800 	.word	0x40023800
 800275c:	08006cf4 	.word	0x08006cf4
 8002760:	20000138 	.word	0x20000138

08002764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	2300      	movs	r3, #0
 8002774:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800277a:	4b63      	ldr	r3, [pc, #396]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b04      	cmp	r3, #4
 8002784:	d007      	beq.n	8002796 <HAL_RCC_GetSysClockFreq+0x32>
 8002786:	2b08      	cmp	r3, #8
 8002788:	d008      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x38>
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 80b4 	bne.w	80028f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002790:	4b5e      	ldr	r3, [pc, #376]	; (800290c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002792:	60bb      	str	r3, [r7, #8]
       break;
 8002794:	e0b3      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002796:	4b5e      	ldr	r3, [pc, #376]	; (8002910 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002798:	60bb      	str	r3, [r7, #8]
      break;
 800279a:	e0b0      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800279c:	4b5a      	ldr	r3, [pc, #360]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027a4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027a6:	4b58      	ldr	r3, [pc, #352]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d04a      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b2:	4b55      	ldr	r3, [pc, #340]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	099b      	lsrs	r3, r3, #6
 80027b8:	f04f 0400 	mov.w	r4, #0
 80027bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	ea03 0501 	and.w	r5, r3, r1
 80027c8:	ea04 0602 	and.w	r6, r4, r2
 80027cc:	4629      	mov	r1, r5
 80027ce:	4632      	mov	r2, r6
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	f04f 0400 	mov.w	r4, #0
 80027d8:	0154      	lsls	r4, r2, #5
 80027da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027de:	014b      	lsls	r3, r1, #5
 80027e0:	4619      	mov	r1, r3
 80027e2:	4622      	mov	r2, r4
 80027e4:	1b49      	subs	r1, r1, r5
 80027e6:	eb62 0206 	sbc.w	r2, r2, r6
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	f04f 0400 	mov.w	r4, #0
 80027f2:	0194      	lsls	r4, r2, #6
 80027f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027f8:	018b      	lsls	r3, r1, #6
 80027fa:	1a5b      	subs	r3, r3, r1
 80027fc:	eb64 0402 	sbc.w	r4, r4, r2
 8002800:	f04f 0100 	mov.w	r1, #0
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	00e2      	lsls	r2, r4, #3
 800280a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800280e:	00d9      	lsls	r1, r3, #3
 8002810:	460b      	mov	r3, r1
 8002812:	4614      	mov	r4, r2
 8002814:	195b      	adds	r3, r3, r5
 8002816:	eb44 0406 	adc.w	r4, r4, r6
 800281a:	f04f 0100 	mov.w	r1, #0
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	0262      	lsls	r2, r4, #9
 8002824:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002828:	0259      	lsls	r1, r3, #9
 800282a:	460b      	mov	r3, r1
 800282c:	4614      	mov	r4, r2
 800282e:	4618      	mov	r0, r3
 8002830:	4621      	mov	r1, r4
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f04f 0400 	mov.w	r4, #0
 8002838:	461a      	mov	r2, r3
 800283a:	4623      	mov	r3, r4
 800283c:	f7fd fd58 	bl	80002f0 <__aeabi_uldivmod>
 8002840:	4603      	mov	r3, r0
 8002842:	460c      	mov	r4, r1
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	e049      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002848:	4b2f      	ldr	r3, [pc, #188]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	f04f 0400 	mov.w	r4, #0
 8002852:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	ea03 0501 	and.w	r5, r3, r1
 800285e:	ea04 0602 	and.w	r6, r4, r2
 8002862:	4629      	mov	r1, r5
 8002864:	4632      	mov	r2, r6
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	f04f 0400 	mov.w	r4, #0
 800286e:	0154      	lsls	r4, r2, #5
 8002870:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002874:	014b      	lsls	r3, r1, #5
 8002876:	4619      	mov	r1, r3
 8002878:	4622      	mov	r2, r4
 800287a:	1b49      	subs	r1, r1, r5
 800287c:	eb62 0206 	sbc.w	r2, r2, r6
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	f04f 0400 	mov.w	r4, #0
 8002888:	0194      	lsls	r4, r2, #6
 800288a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800288e:	018b      	lsls	r3, r1, #6
 8002890:	1a5b      	subs	r3, r3, r1
 8002892:	eb64 0402 	sbc.w	r4, r4, r2
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	00e2      	lsls	r2, r4, #3
 80028a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028a4:	00d9      	lsls	r1, r3, #3
 80028a6:	460b      	mov	r3, r1
 80028a8:	4614      	mov	r4, r2
 80028aa:	195b      	adds	r3, r3, r5
 80028ac:	eb44 0406 	adc.w	r4, r4, r6
 80028b0:	f04f 0100 	mov.w	r1, #0
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	02a2      	lsls	r2, r4, #10
 80028ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80028be:	0299      	lsls	r1, r3, #10
 80028c0:	460b      	mov	r3, r1
 80028c2:	4614      	mov	r4, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	4621      	mov	r1, r4
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f04f 0400 	mov.w	r4, #0
 80028ce:	461a      	mov	r2, r3
 80028d0:	4623      	mov	r3, r4
 80028d2:	f7fd fd0d 	bl	80002f0 <__aeabi_uldivmod>
 80028d6:	4603      	mov	r3, r0
 80028d8:	460c      	mov	r4, r1
 80028da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	0c1b      	lsrs	r3, r3, #16
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	3301      	adds	r3, #1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	60bb      	str	r3, [r7, #8]
      break;
 80028f6:	e002      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028fa:	60bb      	str	r3, [r7, #8]
      break;
 80028fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fe:	68bb      	ldr	r3, [r7, #8]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	00f42400 	.word	0x00f42400
 8002910:	007a1200 	.word	0x007a1200

08002914 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_RCC_GetHCLKFreq+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000138 	.word	0x20000138

0800292c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002930:	f7ff fff0 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002934:	4601      	mov	r1, r0
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0a9b      	lsrs	r3, r3, #10
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4a03      	ldr	r2, [pc, #12]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40023800 	.word	0x40023800
 8002950:	08006d04 	.word	0x08006d04

08002954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002958:	f7ff ffdc 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 800295c:	4601      	mov	r1, r0
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	0b5b      	lsrs	r3, r3, #13
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4a03      	ldr	r2, [pc, #12]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800296a:	5cd3      	ldrb	r3, [r2, r3]
 800296c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40023800 	.word	0x40023800
 8002978:	08006d04 	.word	0x08006d04

0800297c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029a4:	4b69      	ldr	r3, [pc, #420]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a68      	ldr	r2, [pc, #416]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029ae:	6093      	str	r3, [r2, #8]
 80029b0:	4b66      	ldr	r3, [pc, #408]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b8:	4964      	ldr	r1, [pc, #400]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029c6:	2301      	movs	r3, #1
 80029c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d017      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d6:	4b5d      	ldr	r3, [pc, #372]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e4:	4959      	ldr	r1, [pc, #356]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029f4:	d101      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80029f6:	2301      	movs	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d017      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a12:	4b4e      	ldr	r3, [pc, #312]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	494a      	ldr	r1, [pc, #296]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a30:	d101      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 808b 	beq.w	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a60:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	4a39      	ldr	r2, [pc, #228]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6c:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a78:	4b35      	ldr	r3, [pc, #212]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a34      	ldr	r2, [pc, #208]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a84:	f7fe fbc8 	bl	8001218 <HAL_GetTick>
 8002a88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8c:	f7fe fbc4 	bl	8001218 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e38d      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a9e:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aaa:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d035      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d02e      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ac8:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	4a1a      	ldr	r2, [pc, #104]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002aea:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d114      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fb8c 	bl	8001218 <HAL_GetTick>
 8002b00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fb88 	bl	8001218 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e34f      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0ee      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b32:	d111      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b42:	400b      	ands	r3, r1
 8002b44:	4901      	ldr	r1, [pc, #4]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40007000 	.word	0x40007000
 8002b54:	0ffffcff 	.word	0x0ffffcff
 8002b58:	4bb3      	ldr	r3, [pc, #716]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4ab2      	ldr	r2, [pc, #712]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b62:	6093      	str	r3, [r2, #8]
 8002b64:	4bb0      	ldr	r3, [pc, #704]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b70:	49ad      	ldr	r1, [pc, #692]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d010      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b82:	4ba9      	ldr	r3, [pc, #676]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b88:	4aa7      	ldr	r2, [pc, #668]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b92:	4ba5      	ldr	r3, [pc, #660]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	49a2      	ldr	r1, [pc, #648]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bb0:	4b9d      	ldr	r3, [pc, #628]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bbe:	499a      	ldr	r1, [pc, #616]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bd2:	4b95      	ldr	r3, [pc, #596]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002be0:	4991      	ldr	r1, [pc, #580]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bf4:	4b8c      	ldr	r3, [pc, #560]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c02:	4989      	ldr	r1, [pc, #548]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c16:	4b84      	ldr	r3, [pc, #528]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4980      	ldr	r1, [pc, #512]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c38:	4b7b      	ldr	r3, [pc, #492]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f023 0203 	bic.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4978      	ldr	r1, [pc, #480]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c5a:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f023 020c 	bic.w	r2, r3, #12
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c68:	496f      	ldr	r1, [pc, #444]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c7c:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	4967      	ldr	r1, [pc, #412]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c9e:	4b62      	ldr	r3, [pc, #392]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cac:	495e      	ldr	r1, [pc, #376]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cc0:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	4956      	ldr	r1, [pc, #344]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ce2:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	494d      	ldr	r1, [pc, #308]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d04:	4b48      	ldr	r3, [pc, #288]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	4945      	ldr	r1, [pc, #276]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d26:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d34:	493c      	ldr	r1, [pc, #240]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d48:	4b37      	ldr	r3, [pc, #220]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d56:	4934      	ldr	r1, [pc, #208]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d011      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d78:	492b      	ldr	r1, [pc, #172]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d88:	d101      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002daa:	4b1f      	ldr	r3, [pc, #124]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db8:	491b      	ldr	r1, [pc, #108]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00b      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dcc:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ddc:	4912      	ldr	r1, [pc, #72]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00b      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e00:	4909      	ldr	r1, [pc, #36]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00f      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	e002      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	4985      	ldr	r1, [pc, #532]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e40:	4b80      	ldr	r3, [pc, #512]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e50:	497c      	ldr	r1, [pc, #496]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d005      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e66:	f040 80d6 	bne.w	8003016 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e6a:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a75      	ldr	r2, [pc, #468]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e76:	f7fe f9cf 	bl	8001218 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e7e:	f7fe f9cb 	bl	8001218 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	; 0x64
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e194      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e90:	4b6c      	ldr	r3, [pc, #432]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d021      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d11d      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002eb0:	4b64      	ldr	r3, [pc, #400]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ebe:	4b61      	ldr	r3, [pc, #388]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec4:	0e1b      	lsrs	r3, r3, #24
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	019a      	lsls	r2, r3, #6
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	071b      	lsls	r3, r3, #28
 8002ee4:	4957      	ldr	r1, [pc, #348]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d02e      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f16:	d129      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f18:	4b4a      	ldr	r3, [pc, #296]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f1e:	0c1b      	lsrs	r3, r3, #16
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2c:	0f1b      	lsrs	r3, r3, #28
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	019a      	lsls	r2, r3, #6
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	061b      	lsls	r3, r3, #24
 8002f46:	431a      	orrs	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	071b      	lsls	r3, r3, #28
 8002f4c:	493d      	ldr	r1, [pc, #244]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f54:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5a:	f023 021f 	bic.w	r2, r3, #31
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	3b01      	subs	r3, #1
 8002f64:	4937      	ldr	r1, [pc, #220]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01d      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7e:	0e1b      	lsrs	r3, r3, #24
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f86:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f8c:	0f1b      	lsrs	r3, r3, #28
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	019a      	lsls	r2, r3, #6
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	041b      	lsls	r3, r3, #16
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	071b      	lsls	r3, r3, #28
 8002fac:	4925      	ldr	r1, [pc, #148]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d011      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	019a      	lsls	r2, r3, #6
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	041b      	lsls	r3, r3, #16
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	061b      	lsls	r3, r3, #24
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	071b      	lsls	r3, r3, #28
 8002fdc:	4919      	ldr	r1, [pc, #100]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fe4:	4b17      	ldr	r3, [pc, #92]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a16      	ldr	r2, [pc, #88]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff0:	f7fe f912 	bl	8001218 <HAL_GetTick>
 8002ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ff8:	f7fe f90e 	bl	8001218 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0d7      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b01      	cmp	r3, #1
 800301a:	f040 80cd 	bne.w	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a08      	ldr	r2, [pc, #32]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302a:	f7fe f8f5 	bl	8001218 <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003030:	e00a      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003032:	f7fe f8f1 	bl	8001218 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b64      	cmp	r3, #100	; 0x64
 800303e:	d903      	bls.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0ba      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003044:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003048:	4b5e      	ldr	r3, [pc, #376]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003054:	d0ed      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003072:	2b00      	cmp	r3, #0
 8003074:	d02e      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d12a      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800307e:	4b51      	ldr	r3, [pc, #324]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800308c:	4b4d      	ldr	r3, [pc, #308]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	0f1b      	lsrs	r3, r3, #28
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	019a      	lsls	r2, r3, #6
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	071b      	lsls	r3, r3, #28
 80030b2:	4944      	ldr	r1, [pc, #272]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030ba:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	3b01      	subs	r3, #1
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	493d      	ldr	r1, [pc, #244]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d022      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030e8:	d11d      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030ea:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	0e1b      	lsrs	r3, r3, #24
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	0f1b      	lsrs	r3, r3, #28
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	019a      	lsls	r2, r3, #6
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	061b      	lsls	r3, r3, #24
 8003118:	431a      	orrs	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	071b      	lsls	r3, r3, #28
 800311e:	4929      	ldr	r1, [pc, #164]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d028      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003132:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	0e1b      	lsrs	r3, r3, #24
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003140:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	0c1b      	lsrs	r3, r3, #16
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	019a      	lsls	r2, r3, #6
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	431a      	orrs	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	4917      	ldr	r1, [pc, #92]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003174:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	4911      	ldr	r1, [pc, #68]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800318a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003190:	f7fe f842 	bl	8001218 <HAL_GetTick>
 8003194:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003198:	f7fe f83e 	bl	8001218 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e007      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031b6:	d1ef      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e01d      	b.n	8003216 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fd fdf6 	bl	8000de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f000 f986 	bl	8003518 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <HAL_TIM_Base_Start_IT+0x50>)
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b06      	cmp	r3, #6
 8003248:	d00b      	beq.n	8003262 <HAL_TIM_Base_Start_IT+0x42>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003250:	d007      	beq.n	8003262 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	00010007 	.word	0x00010007

08003274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b02      	cmp	r3, #2
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b02      	cmp	r3, #2
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0202 	mvn.w	r2, #2
 80032a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f90f 	bl	80034da <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f901 	bl	80034c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f912 	bl	80034ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d122      	bne.n	8003324 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d11b      	bne.n	8003324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0204 	mvn.w	r2, #4
 80032f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f8e5 	bl	80034da <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f8d7 	bl	80034c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f8e8 	bl	80034ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b08      	cmp	r3, #8
 8003330:	d122      	bne.n	8003378 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b08      	cmp	r3, #8
 800333e:	d11b      	bne.n	8003378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0208 	mvn.w	r2, #8
 8003348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2204      	movs	r2, #4
 800334e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f8bb 	bl	80034da <HAL_TIM_IC_CaptureCallback>
 8003364:	e005      	b.n	8003372 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f8ad 	bl	80034c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f8be 	bl	80034ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b10      	cmp	r3, #16
 8003384:	d122      	bne.n	80033cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b10      	cmp	r3, #16
 8003392:	d11b      	bne.n	80033cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0210 	mvn.w	r2, #16
 800339c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2208      	movs	r2, #8
 80033a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f891 	bl	80034da <HAL_TIM_IC_CaptureCallback>
 80033b8:	e005      	b.n	80033c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f883 	bl	80034c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f894 	bl	80034ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10e      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d107      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0201 	mvn.w	r2, #1
 80033f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f85d 	bl	80034b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	2b80      	cmp	r3, #128	; 0x80
 8003404:	d10e      	bne.n	8003424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003410:	2b80      	cmp	r3, #128	; 0x80
 8003412:	d107      	bne.n	8003424 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f980 	bl	8003724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003432:	d10e      	bne.n	8003452 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b80      	cmp	r3, #128	; 0x80
 8003440:	d107      	bne.n	8003452 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800344a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f973 	bl	8003738 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	d10e      	bne.n	800347e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d107      	bne.n	800347e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f842 	bl	8003502 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b20      	cmp	r3, #32
 800348a:	d10e      	bne.n	80034aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b20      	cmp	r3, #32
 8003498:	d107      	bne.n	80034aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f06f 0220 	mvn.w	r2, #32
 80034a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f933 	bl	8003710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a40      	ldr	r2, [pc, #256]	; (800362c <TIM_Base_SetConfig+0x114>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d013      	beq.n	8003558 <TIM_Base_SetConfig+0x40>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003536:	d00f      	beq.n	8003558 <TIM_Base_SetConfig+0x40>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a3d      	ldr	r2, [pc, #244]	; (8003630 <TIM_Base_SetConfig+0x118>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00b      	beq.n	8003558 <TIM_Base_SetConfig+0x40>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a3c      	ldr	r2, [pc, #240]	; (8003634 <TIM_Base_SetConfig+0x11c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d007      	beq.n	8003558 <TIM_Base_SetConfig+0x40>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a3b      	ldr	r2, [pc, #236]	; (8003638 <TIM_Base_SetConfig+0x120>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d003      	beq.n	8003558 <TIM_Base_SetConfig+0x40>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a3a      	ldr	r2, [pc, #232]	; (800363c <TIM_Base_SetConfig+0x124>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d108      	bne.n	800356a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2f      	ldr	r2, [pc, #188]	; (800362c <TIM_Base_SetConfig+0x114>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d02b      	beq.n	80035ca <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003578:	d027      	beq.n	80035ca <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a2c      	ldr	r2, [pc, #176]	; (8003630 <TIM_Base_SetConfig+0x118>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d023      	beq.n	80035ca <TIM_Base_SetConfig+0xb2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <TIM_Base_SetConfig+0x11c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01f      	beq.n	80035ca <TIM_Base_SetConfig+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a2a      	ldr	r2, [pc, #168]	; (8003638 <TIM_Base_SetConfig+0x120>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01b      	beq.n	80035ca <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a29      	ldr	r2, [pc, #164]	; (800363c <TIM_Base_SetConfig+0x124>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d017      	beq.n	80035ca <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a28      	ldr	r2, [pc, #160]	; (8003640 <TIM_Base_SetConfig+0x128>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a27      	ldr	r2, [pc, #156]	; (8003644 <TIM_Base_SetConfig+0x12c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00f      	beq.n	80035ca <TIM_Base_SetConfig+0xb2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a26      	ldr	r2, [pc, #152]	; (8003648 <TIM_Base_SetConfig+0x130>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00b      	beq.n	80035ca <TIM_Base_SetConfig+0xb2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a25      	ldr	r2, [pc, #148]	; (800364c <TIM_Base_SetConfig+0x134>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a24      	ldr	r2, [pc, #144]	; (8003650 <TIM_Base_SetConfig+0x138>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a23      	ldr	r2, [pc, #140]	; (8003654 <TIM_Base_SetConfig+0x13c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d108      	bne.n	80035dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <TIM_Base_SetConfig+0x114>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <TIM_Base_SetConfig+0xf8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a0c      	ldr	r2, [pc, #48]	; (800363c <TIM_Base_SetConfig+0x124>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d103      	bne.n	8003618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	615a      	str	r2, [r3, #20]
}
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40010000 	.word	0x40010000
 8003630:	40000400 	.word	0x40000400
 8003634:	40000800 	.word	0x40000800
 8003638:	40000c00 	.word	0x40000c00
 800363c:	40010400 	.word	0x40010400
 8003640:	40014000 	.word	0x40014000
 8003644:	40014400 	.word	0x40014400
 8003648:	40014800 	.word	0x40014800
 800364c:	40001800 	.word	0x40001800
 8003650:	40001c00 	.word	0x40001c00
 8003654:	40002000 	.word	0x40002000

08003658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800366c:	2302      	movs	r3, #2
 800366e:	e045      	b.n	80036fc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d108      	bne.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ce:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	40010000 	.word	0x40010000
 800370c:	40010400 	.word	0x40010400

08003710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e040      	b.n	80037e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd fb5c 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2224      	movs	r2, #36	; 0x24
 8003778:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 faba 	bl	8003d04 <UART_SetConfig>
 8003790:	4603      	mov	r3, r0
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e022      	b.n	80037e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fd52 	bl	800424c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fdd9 	bl	8004390 <UART_CheckIdleState>
 80037de:	4603      	mov	r3, r0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d17f      	bne.n	8003900 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_UART_Transmit+0x24>
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e078      	b.n	8003902 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_UART_Transmit+0x36>
 800381a:	2302      	movs	r3, #2
 800381c:	e071      	b.n	8003902 <HAL_UART_Transmit+0x11a>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2221      	movs	r2, #33	; 0x21
 8003830:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003832:	f7fd fcf1 	bl	8001218 <HAL_GetTick>
 8003836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003850:	d108      	bne.n	8003864 <HAL_UART_Transmit+0x7c>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d104      	bne.n	8003864 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	e003      	b.n	800386c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003868:	2300      	movs	r3, #0
 800386a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800386c:	e02c      	b.n	80038c8 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fdb8 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e03c      	b.n	8003902 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3302      	adds	r3, #2
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e007      	b.n	80038b6 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3301      	adds	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1cc      	bne.n	800386e <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2200      	movs	r2, #0
 80038dc:	2140      	movs	r1, #64	; 0x40
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fd85 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e009      	b.n	8003902 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e000      	b.n	8003902 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
  }
}
 8003902:	4618      	mov	r0, r3
 8003904:	3720      	adds	r7, #32
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b08a      	sub	sp, #40	; 0x28
 800390e:	af02      	add	r7, sp, #8
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800391e:	2b20      	cmp	r3, #32
 8003920:	f040 80ba 	bne.w	8003a98 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_UART_Receive+0x26>
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0b2      	b.n	8003a9a <HAL_UART_Receive+0x190>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_UART_Receive+0x38>
 800393e:	2302      	movs	r3, #2
 8003940:	e0ab      	b.n	8003a9a <HAL_UART_Receive+0x190>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2222      	movs	r2, #34	; 0x22
 8003954:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003956:	f7fd fc5f 	bl	8001218 <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003974:	d10e      	bne.n	8003994 <HAL_UART_Receive+0x8a>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d105      	bne.n	800398a <HAL_UART_Receive+0x80>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003984:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003988:	e02d      	b.n	80039e6 <HAL_UART_Receive+0xdc>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	22ff      	movs	r2, #255	; 0xff
 800398e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003992:	e028      	b.n	80039e6 <HAL_UART_Receive+0xdc>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10d      	bne.n	80039b8 <HAL_UART_Receive+0xae>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d104      	bne.n	80039ae <HAL_UART_Receive+0xa4>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	22ff      	movs	r2, #255	; 0xff
 80039a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039ac:	e01b      	b.n	80039e6 <HAL_UART_Receive+0xdc>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	227f      	movs	r2, #127	; 0x7f
 80039b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039b6:	e016      	b.n	80039e6 <HAL_UART_Receive+0xdc>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c0:	d10d      	bne.n	80039de <HAL_UART_Receive+0xd4>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d104      	bne.n	80039d4 <HAL_UART_Receive+0xca>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	227f      	movs	r2, #127	; 0x7f
 80039ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039d2:	e008      	b.n	80039e6 <HAL_UART_Receive+0xdc>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	223f      	movs	r2, #63	; 0x3f
 80039d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039dc:	e003      	b.n	80039e6 <HAL_UART_Receive+0xdc>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039ec:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f6:	d108      	bne.n	8003a0a <HAL_UART_Receive+0x100>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d104      	bne.n	8003a0a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	e003      	b.n	8003a12 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a12:	e032      	b.n	8003a7a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2120      	movs	r1, #32
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fce5 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e035      	b.n	8003a9a <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10c      	bne.n	8003a4e <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	8a7b      	ldrh	r3, [r7, #18]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	3302      	adds	r3, #2
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	e00c      	b.n	8003a68 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	8a7b      	ldrh	r3, [r7, #18]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3301      	adds	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1c6      	bne.n	8003a14 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d113      	bne.n	8003afa <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00e      	beq.n	8003afa <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80eb 	beq.w	8003cc6 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
      }
      return;
 8003af8:	e0e5      	b.n	8003cc6 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80c0 	beq.w	8003c82 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80b5 	beq.w	8003c82 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00e      	beq.n	8003b40 <HAL_UART_IRQHandler+0x9c>
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d009      	beq.n	8003b40 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00e      	beq.n	8003b68 <HAL_UART_IRQHandler+0xc4>
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00e      	beq.n	8003b90 <HAL_UART_IRQHandler+0xec>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2204      	movs	r2, #4
 8003b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b88:	f043 0202 	orr.w	r2, r3, #2
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d013      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d104      	bne.n	8003bae <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bba:	f043 0208 	orr.w	r2, r3, #8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d07f      	beq.n	8003cca <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00c      	beq.n	8003bee <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d004      	beq.n	8003c0c <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d031      	beq.n	8003c70 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fc36 	bl	800447e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d123      	bne.n	8003c68 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d013      	beq.n	8003c60 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <HAL_UART_IRQHandler+0x234>)
 8003c3e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fd fffc 	bl	8001c42 <HAL_DMA_Abort_IT>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d016      	beq.n	8003c7e <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5e:	e00e      	b.n	8003c7e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f845 	bl	8003cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c66:	e00a      	b.n	8003c7e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f841 	bl	8003cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6e:	e006      	b.n	8003c7e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f83d 	bl	8003cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003c7c:	e025      	b.n	8003cca <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7e:	bf00      	nop
    return;
 8003c80:	e023      	b.n	8003cca <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d017      	beq.n	8003cce <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	4798      	blx	r3
    }
    return;
 8003ca6:	e012      	b.n	8003cce <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x22c>
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d009      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fc14 	bl	80044ea <UART_EndTransmit_IT>
    return;
 8003cc2:	bf00      	nop
 8003cc4:	e004      	b.n	8003cd0 <HAL_UART_IRQHandler+0x22c>
      return;
 8003cc6:	bf00      	nop
 8003cc8:	e002      	b.n	8003cd0 <HAL_UART_IRQHandler+0x22c>
    return;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <HAL_UART_IRQHandler+0x22c>
    return;
 8003cce:	bf00      	nop
  }

}
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	080044bf 	.word	0x080044bf

08003cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4bb1      	ldr	r3, [pc, #708]	; (8003ff8 <UART_SetConfig+0x2f4>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	6939      	ldr	r1, [r7, #16]
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a9f      	ldr	r2, [pc, #636]	; (8003ffc <UART_SetConfig+0x2f8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d121      	bne.n	8003dc8 <UART_SetConfig+0xc4>
 8003d84:	4b9e      	ldr	r3, [pc, #632]	; (8004000 <UART_SetConfig+0x2fc>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d816      	bhi.n	8003dc0 <UART_SetConfig+0xbc>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <UART_SetConfig+0x94>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003db5 	.word	0x08003db5
 8003da0:	08003daf 	.word	0x08003daf
 8003da4:	08003dbb 	.word	0x08003dbb
 8003da8:	2301      	movs	r3, #1
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e151      	b.n	8004052 <UART_SetConfig+0x34e>
 8003dae:	2302      	movs	r3, #2
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e14e      	b.n	8004052 <UART_SetConfig+0x34e>
 8003db4:	2304      	movs	r3, #4
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e14b      	b.n	8004052 <UART_SetConfig+0x34e>
 8003dba:	2308      	movs	r3, #8
 8003dbc:	77fb      	strb	r3, [r7, #31]
 8003dbe:	e148      	b.n	8004052 <UART_SetConfig+0x34e>
 8003dc0:	2310      	movs	r3, #16
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	bf00      	nop
 8003dc6:	e144      	b.n	8004052 <UART_SetConfig+0x34e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a8d      	ldr	r2, [pc, #564]	; (8004004 <UART_SetConfig+0x300>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d134      	bne.n	8003e3c <UART_SetConfig+0x138>
 8003dd2:	4b8b      	ldr	r3, [pc, #556]	; (8004000 <UART_SetConfig+0x2fc>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd8:	f003 030c 	and.w	r3, r3, #12
 8003ddc:	2b0c      	cmp	r3, #12
 8003dde:	d829      	bhi.n	8003e34 <UART_SetConfig+0x130>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <UART_SetConfig+0xe4>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003e1d 	.word	0x08003e1d
 8003dec:	08003e35 	.word	0x08003e35
 8003df0:	08003e35 	.word	0x08003e35
 8003df4:	08003e35 	.word	0x08003e35
 8003df8:	08003e29 	.word	0x08003e29
 8003dfc:	08003e35 	.word	0x08003e35
 8003e00:	08003e35 	.word	0x08003e35
 8003e04:	08003e35 	.word	0x08003e35
 8003e08:	08003e23 	.word	0x08003e23
 8003e0c:	08003e35 	.word	0x08003e35
 8003e10:	08003e35 	.word	0x08003e35
 8003e14:	08003e35 	.word	0x08003e35
 8003e18:	08003e2f 	.word	0x08003e2f
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e117      	b.n	8004052 <UART_SetConfig+0x34e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e114      	b.n	8004052 <UART_SetConfig+0x34e>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e111      	b.n	8004052 <UART_SetConfig+0x34e>
 8003e2e:	2308      	movs	r3, #8
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e10e      	b.n	8004052 <UART_SetConfig+0x34e>
 8003e34:	2310      	movs	r3, #16
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	bf00      	nop
 8003e3a:	e10a      	b.n	8004052 <UART_SetConfig+0x34e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a71      	ldr	r2, [pc, #452]	; (8004008 <UART_SetConfig+0x304>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d120      	bne.n	8003e88 <UART_SetConfig+0x184>
 8003e46:	4b6e      	ldr	r3, [pc, #440]	; (8004000 <UART_SetConfig+0x2fc>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d00f      	beq.n	8003e74 <UART_SetConfig+0x170>
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d802      	bhi.n	8003e5e <UART_SetConfig+0x15a>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <UART_SetConfig+0x164>
 8003e5c:	e010      	b.n	8003e80 <UART_SetConfig+0x17c>
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d005      	beq.n	8003e6e <UART_SetConfig+0x16a>
 8003e62:	2b30      	cmp	r3, #48	; 0x30
 8003e64:	d009      	beq.n	8003e7a <UART_SetConfig+0x176>
 8003e66:	e00b      	b.n	8003e80 <UART_SetConfig+0x17c>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e0f1      	b.n	8004052 <UART_SetConfig+0x34e>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e0ee      	b.n	8004052 <UART_SetConfig+0x34e>
 8003e74:	2304      	movs	r3, #4
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e0eb      	b.n	8004052 <UART_SetConfig+0x34e>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e0e8      	b.n	8004052 <UART_SetConfig+0x34e>
 8003e80:	2310      	movs	r3, #16
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	bf00      	nop
 8003e86:	e0e4      	b.n	8004052 <UART_SetConfig+0x34e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5f      	ldr	r2, [pc, #380]	; (800400c <UART_SetConfig+0x308>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d120      	bne.n	8003ed4 <UART_SetConfig+0x1d0>
 8003e92:	4b5b      	ldr	r3, [pc, #364]	; (8004000 <UART_SetConfig+0x2fc>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	d00f      	beq.n	8003ec0 <UART_SetConfig+0x1bc>
 8003ea0:	2b40      	cmp	r3, #64	; 0x40
 8003ea2:	d802      	bhi.n	8003eaa <UART_SetConfig+0x1a6>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <UART_SetConfig+0x1b0>
 8003ea8:	e010      	b.n	8003ecc <UART_SetConfig+0x1c8>
 8003eaa:	2b80      	cmp	r3, #128	; 0x80
 8003eac:	d005      	beq.n	8003eba <UART_SetConfig+0x1b6>
 8003eae:	2bc0      	cmp	r3, #192	; 0xc0
 8003eb0:	d009      	beq.n	8003ec6 <UART_SetConfig+0x1c2>
 8003eb2:	e00b      	b.n	8003ecc <UART_SetConfig+0x1c8>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e0cb      	b.n	8004052 <UART_SetConfig+0x34e>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e0c8      	b.n	8004052 <UART_SetConfig+0x34e>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e0c5      	b.n	8004052 <UART_SetConfig+0x34e>
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e0c2      	b.n	8004052 <UART_SetConfig+0x34e>
 8003ecc:	2310      	movs	r3, #16
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	bf00      	nop
 8003ed2:	e0be      	b.n	8004052 <UART_SetConfig+0x34e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a4d      	ldr	r2, [pc, #308]	; (8004010 <UART_SetConfig+0x30c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d124      	bne.n	8003f28 <UART_SetConfig+0x224>
 8003ede:	4b48      	ldr	r3, [pc, #288]	; (8004000 <UART_SetConfig+0x2fc>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eec:	d012      	beq.n	8003f14 <UART_SetConfig+0x210>
 8003eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef2:	d802      	bhi.n	8003efa <UART_SetConfig+0x1f6>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <UART_SetConfig+0x204>
 8003ef8:	e012      	b.n	8003f20 <UART_SetConfig+0x21c>
 8003efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efe:	d006      	beq.n	8003f0e <UART_SetConfig+0x20a>
 8003f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f04:	d009      	beq.n	8003f1a <UART_SetConfig+0x216>
 8003f06:	e00b      	b.n	8003f20 <UART_SetConfig+0x21c>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	e0a1      	b.n	8004052 <UART_SetConfig+0x34e>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	77fb      	strb	r3, [r7, #31]
 8003f12:	e09e      	b.n	8004052 <UART_SetConfig+0x34e>
 8003f14:	2304      	movs	r3, #4
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e09b      	b.n	8004052 <UART_SetConfig+0x34e>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	77fb      	strb	r3, [r7, #31]
 8003f1e:	e098      	b.n	8004052 <UART_SetConfig+0x34e>
 8003f20:	2310      	movs	r3, #16
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	bf00      	nop
 8003f26:	e094      	b.n	8004052 <UART_SetConfig+0x34e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a39      	ldr	r2, [pc, #228]	; (8004014 <UART_SetConfig+0x310>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d124      	bne.n	8003f7c <UART_SetConfig+0x278>
 8003f32:	4b33      	ldr	r3, [pc, #204]	; (8004000 <UART_SetConfig+0x2fc>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f40:	d012      	beq.n	8003f68 <UART_SetConfig+0x264>
 8003f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f46:	d802      	bhi.n	8003f4e <UART_SetConfig+0x24a>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <UART_SetConfig+0x258>
 8003f4c:	e012      	b.n	8003f74 <UART_SetConfig+0x270>
 8003f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f52:	d006      	beq.n	8003f62 <UART_SetConfig+0x25e>
 8003f54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f58:	d009      	beq.n	8003f6e <UART_SetConfig+0x26a>
 8003f5a:	e00b      	b.n	8003f74 <UART_SetConfig+0x270>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e077      	b.n	8004052 <UART_SetConfig+0x34e>
 8003f62:	2302      	movs	r3, #2
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e074      	b.n	8004052 <UART_SetConfig+0x34e>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e071      	b.n	8004052 <UART_SetConfig+0x34e>
 8003f6e:	2308      	movs	r3, #8
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e06e      	b.n	8004052 <UART_SetConfig+0x34e>
 8003f74:	2310      	movs	r3, #16
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	bf00      	nop
 8003f7a:	e06a      	b.n	8004052 <UART_SetConfig+0x34e>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a25      	ldr	r2, [pc, #148]	; (8004018 <UART_SetConfig+0x314>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d124      	bne.n	8003fd0 <UART_SetConfig+0x2cc>
 8003f86:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <UART_SetConfig+0x2fc>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d012      	beq.n	8003fbc <UART_SetConfig+0x2b8>
 8003f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9a:	d802      	bhi.n	8003fa2 <UART_SetConfig+0x29e>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <UART_SetConfig+0x2ac>
 8003fa0:	e012      	b.n	8003fc8 <UART_SetConfig+0x2c4>
 8003fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa6:	d006      	beq.n	8003fb6 <UART_SetConfig+0x2b2>
 8003fa8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fac:	d009      	beq.n	8003fc2 <UART_SetConfig+0x2be>
 8003fae:	e00b      	b.n	8003fc8 <UART_SetConfig+0x2c4>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	77fb      	strb	r3, [r7, #31]
 8003fb4:	e04d      	b.n	8004052 <UART_SetConfig+0x34e>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	77fb      	strb	r3, [r7, #31]
 8003fba:	e04a      	b.n	8004052 <UART_SetConfig+0x34e>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e047      	b.n	8004052 <UART_SetConfig+0x34e>
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e044      	b.n	8004052 <UART_SetConfig+0x34e>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	bf00      	nop
 8003fce:	e040      	b.n	8004052 <UART_SetConfig+0x34e>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a11      	ldr	r2, [pc, #68]	; (800401c <UART_SetConfig+0x318>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d139      	bne.n	800404e <UART_SetConfig+0x34a>
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <UART_SetConfig+0x2fc>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe8:	d027      	beq.n	800403a <UART_SetConfig+0x336>
 8003fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fee:	d817      	bhi.n	8004020 <UART_SetConfig+0x31c>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01c      	beq.n	800402e <UART_SetConfig+0x32a>
 8003ff4:	e027      	b.n	8004046 <UART_SetConfig+0x342>
 8003ff6:	bf00      	nop
 8003ff8:	efff69f3 	.word	0xefff69f3
 8003ffc:	40011000 	.word	0x40011000
 8004000:	40023800 	.word	0x40023800
 8004004:	40004400 	.word	0x40004400
 8004008:	40004800 	.word	0x40004800
 800400c:	40004c00 	.word	0x40004c00
 8004010:	40005000 	.word	0x40005000
 8004014:	40011400 	.word	0x40011400
 8004018:	40007800 	.word	0x40007800
 800401c:	40007c00 	.word	0x40007c00
 8004020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004024:	d006      	beq.n	8004034 <UART_SetConfig+0x330>
 8004026:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800402a:	d009      	beq.n	8004040 <UART_SetConfig+0x33c>
 800402c:	e00b      	b.n	8004046 <UART_SetConfig+0x342>
 800402e:	2300      	movs	r3, #0
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e00e      	b.n	8004052 <UART_SetConfig+0x34e>
 8004034:	2302      	movs	r3, #2
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e00b      	b.n	8004052 <UART_SetConfig+0x34e>
 800403a:	2304      	movs	r3, #4
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e008      	b.n	8004052 <UART_SetConfig+0x34e>
 8004040:	2308      	movs	r3, #8
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	e005      	b.n	8004052 <UART_SetConfig+0x34e>
 8004046:	2310      	movs	r3, #16
 8004048:	77fb      	strb	r3, [r7, #31]
 800404a:	bf00      	nop
 800404c:	e001      	b.n	8004052 <UART_SetConfig+0x34e>
 800404e:	2310      	movs	r3, #16
 8004050:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d17c      	bne.n	8004156 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800405c:	7ffb      	ldrb	r3, [r7, #31]
 800405e:	2b08      	cmp	r3, #8
 8004060:	d859      	bhi.n	8004116 <UART_SetConfig+0x412>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <UART_SetConfig+0x364>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	0800408d 	.word	0x0800408d
 800406c:	080040ab 	.word	0x080040ab
 8004070:	080040c9 	.word	0x080040c9
 8004074:	08004117 	.word	0x08004117
 8004078:	080040e1 	.word	0x080040e1
 800407c:	08004117 	.word	0x08004117
 8004080:	08004117 	.word	0x08004117
 8004084:	08004117 	.word	0x08004117
 8004088:	080040ff 	.word	0x080040ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800408c:	f7fe fc4e 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8004090:	4603      	mov	r3, r0
 8004092:	005a      	lsls	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	441a      	add	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	61bb      	str	r3, [r7, #24]
        break;
 80040a8:	e038      	b.n	800411c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80040aa:	f7fe fc53 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 80040ae:	4603      	mov	r3, r0
 80040b0:	005a      	lsls	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	441a      	add	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	61bb      	str	r3, [r7, #24]
        break;
 80040c6:	e029      	b.n	800411c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	085a      	lsrs	r2, r3, #1
 80040ce:	4b5d      	ldr	r3, [pc, #372]	; (8004244 <UART_SetConfig+0x540>)
 80040d0:	4413      	add	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6852      	ldr	r2, [r2, #4]
 80040d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80040da:	b29b      	uxth	r3, r3
 80040dc:	61bb      	str	r3, [r7, #24]
        break;
 80040de:	e01d      	b.n	800411c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80040e0:	f7fe fb40 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 80040e4:	4603      	mov	r3, r0
 80040e6:	005a      	lsls	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	085b      	lsrs	r3, r3, #1
 80040ee:	441a      	add	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	61bb      	str	r3, [r7, #24]
        break;
 80040fc:	e00e      	b.n	800411c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	b29b      	uxth	r3, r3
 8004112:	61bb      	str	r3, [r7, #24]
        break;
 8004114:	e002      	b.n	800411c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	75fb      	strb	r3, [r7, #23]
        break;
 800411a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b0f      	cmp	r3, #15
 8004120:	d916      	bls.n	8004150 <UART_SetConfig+0x44c>
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004128:	d212      	bcs.n	8004150 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	b29b      	uxth	r3, r3
 800412e:	f023 030f 	bic.w	r3, r3, #15
 8004132:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	b29b      	uxth	r3, r3
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	b29a      	uxth	r2, r3
 8004140:	89fb      	ldrh	r3, [r7, #14]
 8004142:	4313      	orrs	r3, r2
 8004144:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	89fa      	ldrh	r2, [r7, #14]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	e06e      	b.n	800422e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	75fb      	strb	r3, [r7, #23]
 8004154:	e06b      	b.n	800422e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004156:	7ffb      	ldrb	r3, [r7, #31]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d857      	bhi.n	800420c <UART_SetConfig+0x508>
 800415c:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <UART_SetConfig+0x460>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	08004189 	.word	0x08004189
 8004168:	080041a5 	.word	0x080041a5
 800416c:	080041c1 	.word	0x080041c1
 8004170:	0800420d 	.word	0x0800420d
 8004174:	080041d9 	.word	0x080041d9
 8004178:	0800420d 	.word	0x0800420d
 800417c:	0800420d 	.word	0x0800420d
 8004180:	0800420d 	.word	0x0800420d
 8004184:	080041f5 	.word	0x080041f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004188:	f7fe fbd0 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 800418c:	4602      	mov	r2, r0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	fbb2 f3f3 	udiv	r3, r2, r3
 800419e:	b29b      	uxth	r3, r3
 80041a0:	61bb      	str	r3, [r7, #24]
        break;
 80041a2:	e036      	b.n	8004212 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80041a4:	f7fe fbd6 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	085b      	lsrs	r3, r3, #1
 80041b0:	441a      	add	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	61bb      	str	r3, [r7, #24]
        break;
 80041be:	e028      	b.n	8004212 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	085a      	lsrs	r2, r3, #1
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <UART_SetConfig+0x544>)
 80041c8:	4413      	add	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6852      	ldr	r2, [r2, #4]
 80041ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	61bb      	str	r3, [r7, #24]
        break;
 80041d6:	e01c      	b.n	8004212 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80041d8:	f7fe fac4 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	441a      	add	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	61bb      	str	r3, [r7, #24]
        break;
 80041f2:	e00e      	b.n	8004212 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	fbb2 f3f3 	udiv	r3, r2, r3
 8004206:	b29b      	uxth	r3, r3
 8004208:	61bb      	str	r3, [r7, #24]
        break;
 800420a:	e002      	b.n	8004212 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	75fb      	strb	r3, [r7, #23]
        break;
 8004210:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b0f      	cmp	r3, #15
 8004216:	d908      	bls.n	800422a <UART_SetConfig+0x526>
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421e:	d204      	bcs.n	800422a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	60da      	str	r2, [r3, #12]
 8004228:	e001      	b.n	800422e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800423a:	7dfb      	ldrb	r3, [r7, #23]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3720      	adds	r7, #32
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	01e84800 	.word	0x01e84800
 8004248:	00f42400 	.word	0x00f42400

0800424c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01a      	beq.n	8004362 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800434a:	d10a      	bne.n	8004362 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]
  }
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af02      	add	r7, sp, #8
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800439e:	f7fc ff3b 	bl	8001218 <HAL_GetTick>
 80043a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d10e      	bne.n	80043d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f814 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e00a      	b.n	80043e6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	4613      	mov	r3, r2
 80043fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fe:	e02a      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004406:	d026      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004408:	f7fc ff06 	bl	8001218 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	429a      	cmp	r2, r3
 8004416:	d302      	bcc.n	800441e <UART_WaitOnFlagUntilTimeout+0x30>
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d11b      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800442c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e00f      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	429a      	cmp	r2, r3
 8004472:	d0c5      	beq.n	8004400 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004494:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff fc07 	bl	8003cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004500:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff fbe4 	bl	8003cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <__errno>:
 800451c:	4b01      	ldr	r3, [pc, #4]	; (8004524 <__errno+0x8>)
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000144 	.word	0x20000144

08004528 <__libc_init_array>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4e0d      	ldr	r6, [pc, #52]	; (8004560 <__libc_init_array+0x38>)
 800452c:	4c0d      	ldr	r4, [pc, #52]	; (8004564 <__libc_init_array+0x3c>)
 800452e:	1ba4      	subs	r4, r4, r6
 8004530:	10a4      	asrs	r4, r4, #2
 8004532:	2500      	movs	r5, #0
 8004534:	42a5      	cmp	r5, r4
 8004536:	d109      	bne.n	800454c <__libc_init_array+0x24>
 8004538:	4e0b      	ldr	r6, [pc, #44]	; (8004568 <__libc_init_array+0x40>)
 800453a:	4c0c      	ldr	r4, [pc, #48]	; (800456c <__libc_init_array+0x44>)
 800453c:	f002 fb6a 	bl	8006c14 <_init>
 8004540:	1ba4      	subs	r4, r4, r6
 8004542:	10a4      	asrs	r4, r4, #2
 8004544:	2500      	movs	r5, #0
 8004546:	42a5      	cmp	r5, r4
 8004548:	d105      	bne.n	8004556 <__libc_init_array+0x2e>
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004550:	4798      	blx	r3
 8004552:	3501      	adds	r5, #1
 8004554:	e7ee      	b.n	8004534 <__libc_init_array+0xc>
 8004556:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800455a:	4798      	blx	r3
 800455c:	3501      	adds	r5, #1
 800455e:	e7f2      	b.n	8004546 <__libc_init_array+0x1e>
 8004560:	08006fd8 	.word	0x08006fd8
 8004564:	08006fd8 	.word	0x08006fd8
 8004568:	08006fd8 	.word	0x08006fd8
 800456c:	08006fdc 	.word	0x08006fdc

08004570 <memset>:
 8004570:	4402      	add	r2, r0
 8004572:	4603      	mov	r3, r0
 8004574:	4293      	cmp	r3, r2
 8004576:	d100      	bne.n	800457a <memset+0xa>
 8004578:	4770      	bx	lr
 800457a:	f803 1b01 	strb.w	r1, [r3], #1
 800457e:	e7f9      	b.n	8004574 <memset+0x4>

08004580 <__cvt>:
 8004580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004582:	ed2d 8b02 	vpush	{d8}
 8004586:	eeb0 8b40 	vmov.f64	d8, d0
 800458a:	b085      	sub	sp, #20
 800458c:	4617      	mov	r7, r2
 800458e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004590:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004592:	ee18 2a90 	vmov	r2, s17
 8004596:	f025 0520 	bic.w	r5, r5, #32
 800459a:	2a00      	cmp	r2, #0
 800459c:	bfb6      	itet	lt
 800459e:	222d      	movlt	r2, #45	; 0x2d
 80045a0:	2200      	movge	r2, #0
 80045a2:	eeb1 8b40 	vneglt.f64	d8, d0
 80045a6:	2d46      	cmp	r5, #70	; 0x46
 80045a8:	460c      	mov	r4, r1
 80045aa:	701a      	strb	r2, [r3, #0]
 80045ac:	d004      	beq.n	80045b8 <__cvt+0x38>
 80045ae:	2d45      	cmp	r5, #69	; 0x45
 80045b0:	d100      	bne.n	80045b4 <__cvt+0x34>
 80045b2:	3401      	adds	r4, #1
 80045b4:	2102      	movs	r1, #2
 80045b6:	e000      	b.n	80045ba <__cvt+0x3a>
 80045b8:	2103      	movs	r1, #3
 80045ba:	ab03      	add	r3, sp, #12
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	ab02      	add	r3, sp, #8
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	4622      	mov	r2, r4
 80045c4:	4633      	mov	r3, r6
 80045c6:	eeb0 0b48 	vmov.f64	d0, d8
 80045ca:	f000 fd69 	bl	80050a0 <_dtoa_r>
 80045ce:	2d47      	cmp	r5, #71	; 0x47
 80045d0:	d101      	bne.n	80045d6 <__cvt+0x56>
 80045d2:	07fb      	lsls	r3, r7, #31
 80045d4:	d51e      	bpl.n	8004614 <__cvt+0x94>
 80045d6:	2d46      	cmp	r5, #70	; 0x46
 80045d8:	eb00 0304 	add.w	r3, r0, r4
 80045dc:	d10c      	bne.n	80045f8 <__cvt+0x78>
 80045de:	7802      	ldrb	r2, [r0, #0]
 80045e0:	2a30      	cmp	r2, #48	; 0x30
 80045e2:	d107      	bne.n	80045f4 <__cvt+0x74>
 80045e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80045e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ec:	bf1c      	itt	ne
 80045ee:	f1c4 0401 	rsbne	r4, r4, #1
 80045f2:	6034      	strne	r4, [r6, #0]
 80045f4:	6832      	ldr	r2, [r6, #0]
 80045f6:	4413      	add	r3, r2
 80045f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80045fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004600:	d007      	beq.n	8004612 <__cvt+0x92>
 8004602:	2130      	movs	r1, #48	; 0x30
 8004604:	9a03      	ldr	r2, [sp, #12]
 8004606:	429a      	cmp	r2, r3
 8004608:	d204      	bcs.n	8004614 <__cvt+0x94>
 800460a:	1c54      	adds	r4, r2, #1
 800460c:	9403      	str	r4, [sp, #12]
 800460e:	7011      	strb	r1, [r2, #0]
 8004610:	e7f8      	b.n	8004604 <__cvt+0x84>
 8004612:	9303      	str	r3, [sp, #12]
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004618:	1a1b      	subs	r3, r3, r0
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	b005      	add	sp, #20
 800461e:	ecbd 8b02 	vpop	{d8}
 8004622:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004624 <__exponent>:
 8004624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004626:	2900      	cmp	r1, #0
 8004628:	4604      	mov	r4, r0
 800462a:	bfba      	itte	lt
 800462c:	4249      	neglt	r1, r1
 800462e:	232d      	movlt	r3, #45	; 0x2d
 8004630:	232b      	movge	r3, #43	; 0x2b
 8004632:	2909      	cmp	r1, #9
 8004634:	f804 2b02 	strb.w	r2, [r4], #2
 8004638:	7043      	strb	r3, [r0, #1]
 800463a:	dd20      	ble.n	800467e <__exponent+0x5a>
 800463c:	f10d 0307 	add.w	r3, sp, #7
 8004640:	461f      	mov	r7, r3
 8004642:	260a      	movs	r6, #10
 8004644:	fb91 f5f6 	sdiv	r5, r1, r6
 8004648:	fb06 1115 	mls	r1, r6, r5, r1
 800464c:	3130      	adds	r1, #48	; 0x30
 800464e:	2d09      	cmp	r5, #9
 8004650:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004654:	f103 32ff 	add.w	r2, r3, #4294967295
 8004658:	4629      	mov	r1, r5
 800465a:	dc09      	bgt.n	8004670 <__exponent+0x4c>
 800465c:	3130      	adds	r1, #48	; 0x30
 800465e:	3b02      	subs	r3, #2
 8004660:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004664:	42bb      	cmp	r3, r7
 8004666:	4622      	mov	r2, r4
 8004668:	d304      	bcc.n	8004674 <__exponent+0x50>
 800466a:	1a10      	subs	r0, r2, r0
 800466c:	b003      	add	sp, #12
 800466e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004670:	4613      	mov	r3, r2
 8004672:	e7e7      	b.n	8004644 <__exponent+0x20>
 8004674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004678:	f804 2b01 	strb.w	r2, [r4], #1
 800467c:	e7f2      	b.n	8004664 <__exponent+0x40>
 800467e:	2330      	movs	r3, #48	; 0x30
 8004680:	4419      	add	r1, r3
 8004682:	7083      	strb	r3, [r0, #2]
 8004684:	1d02      	adds	r2, r0, #4
 8004686:	70c1      	strb	r1, [r0, #3]
 8004688:	e7ef      	b.n	800466a <__exponent+0x46>
 800468a:	0000      	movs	r0, r0
 800468c:	0000      	movs	r0, r0
	...

08004690 <_printf_float>:
 8004690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004694:	b08d      	sub	sp, #52	; 0x34
 8004696:	460c      	mov	r4, r1
 8004698:	4616      	mov	r6, r2
 800469a:	461f      	mov	r7, r3
 800469c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80046a0:	4605      	mov	r5, r0
 80046a2:	f001 fbc3 	bl	8005e2c <_localeconv_r>
 80046a6:	f8d0 b000 	ldr.w	fp, [r0]
 80046aa:	4658      	mov	r0, fp
 80046ac:	f7fb fdc8 	bl	8000240 <strlen>
 80046b0:	2300      	movs	r3, #0
 80046b2:	930a      	str	r3, [sp, #40]	; 0x28
 80046b4:	f8d8 3000 	ldr.w	r3, [r8]
 80046b8:	9005      	str	r0, [sp, #20]
 80046ba:	3307      	adds	r3, #7
 80046bc:	f023 0307 	bic.w	r3, r3, #7
 80046c0:	f103 0108 	add.w	r1, r3, #8
 80046c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80046c8:	6822      	ldr	r2, [r4, #0]
 80046ca:	f8c8 1000 	str.w	r1, [r8]
 80046ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80046d6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8004960 <_printf_float+0x2d0>
 80046da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80046de:	eeb0 6bc0 	vabs.f64	d6, d0
 80046e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	dd24      	ble.n	8004736 <_printf_float+0xa6>
 80046ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	d502      	bpl.n	80046fc <_printf_float+0x6c>
 80046f6:	232d      	movs	r3, #45	; 0x2d
 80046f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046fc:	499a      	ldr	r1, [pc, #616]	; (8004968 <_printf_float+0x2d8>)
 80046fe:	4b9b      	ldr	r3, [pc, #620]	; (800496c <_printf_float+0x2dc>)
 8004700:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004704:	bf8c      	ite	hi
 8004706:	4688      	movhi	r8, r1
 8004708:	4698      	movls	r8, r3
 800470a:	f022 0204 	bic.w	r2, r2, #4
 800470e:	2303      	movs	r3, #3
 8004710:	6123      	str	r3, [r4, #16]
 8004712:	6022      	str	r2, [r4, #0]
 8004714:	f04f 0a00 	mov.w	sl, #0
 8004718:	9700      	str	r7, [sp, #0]
 800471a:	4633      	mov	r3, r6
 800471c:	aa0b      	add	r2, sp, #44	; 0x2c
 800471e:	4621      	mov	r1, r4
 8004720:	4628      	mov	r0, r5
 8004722:	f000 f9e1 	bl	8004ae8 <_printf_common>
 8004726:	3001      	adds	r0, #1
 8004728:	f040 8089 	bne.w	800483e <_printf_float+0x1ae>
 800472c:	f04f 30ff 	mov.w	r0, #4294967295
 8004730:	b00d      	add	sp, #52	; 0x34
 8004732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004736:	eeb4 0b40 	vcmp.f64	d0, d0
 800473a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473e:	d702      	bvc.n	8004746 <_printf_float+0xb6>
 8004740:	498b      	ldr	r1, [pc, #556]	; (8004970 <_printf_float+0x2e0>)
 8004742:	4b8c      	ldr	r3, [pc, #560]	; (8004974 <_printf_float+0x2e4>)
 8004744:	e7dc      	b.n	8004700 <_printf_float+0x70>
 8004746:	6861      	ldr	r1, [r4, #4]
 8004748:	1c4b      	adds	r3, r1, #1
 800474a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800474e:	ab0a      	add	r3, sp, #40	; 0x28
 8004750:	a809      	add	r0, sp, #36	; 0x24
 8004752:	d13b      	bne.n	80047cc <_printf_float+0x13c>
 8004754:	2106      	movs	r1, #6
 8004756:	6061      	str	r1, [r4, #4]
 8004758:	f04f 0c00 	mov.w	ip, #0
 800475c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8004760:	e9cd 0900 	strd	r0, r9, [sp]
 8004764:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004768:	6022      	str	r2, [r4, #0]
 800476a:	6861      	ldr	r1, [r4, #4]
 800476c:	4628      	mov	r0, r5
 800476e:	f7ff ff07 	bl	8004580 <__cvt>
 8004772:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8004776:	2b47      	cmp	r3, #71	; 0x47
 8004778:	4680      	mov	r8, r0
 800477a:	d109      	bne.n	8004790 <_printf_float+0x100>
 800477c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800477e:	1cd8      	adds	r0, r3, #3
 8004780:	db02      	blt.n	8004788 <_printf_float+0xf8>
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	4293      	cmp	r3, r2
 8004786:	dd47      	ble.n	8004818 <_printf_float+0x188>
 8004788:	f1a9 0902 	sub.w	r9, r9, #2
 800478c:	fa5f f989 	uxtb.w	r9, r9
 8004790:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004796:	d824      	bhi.n	80047e2 <_printf_float+0x152>
 8004798:	3901      	subs	r1, #1
 800479a:	464a      	mov	r2, r9
 800479c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047a0:	9109      	str	r1, [sp, #36]	; 0x24
 80047a2:	f7ff ff3f 	bl	8004624 <__exponent>
 80047a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047a8:	1813      	adds	r3, r2, r0
 80047aa:	2a01      	cmp	r2, #1
 80047ac:	4682      	mov	sl, r0
 80047ae:	6123      	str	r3, [r4, #16]
 80047b0:	dc02      	bgt.n	80047b8 <_printf_float+0x128>
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	07d1      	lsls	r1, r2, #31
 80047b6:	d501      	bpl.n	80047bc <_printf_float+0x12c>
 80047b8:	3301      	adds	r3, #1
 80047ba:	6123      	str	r3, [r4, #16]
 80047bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0a9      	beq.n	8004718 <_printf_float+0x88>
 80047c4:	232d      	movs	r3, #45	; 0x2d
 80047c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ca:	e7a5      	b.n	8004718 <_printf_float+0x88>
 80047cc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80047d0:	f000 8178 	beq.w	8004ac4 <_printf_float+0x434>
 80047d4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80047d8:	d1be      	bne.n	8004758 <_printf_float+0xc8>
 80047da:	2900      	cmp	r1, #0
 80047dc:	d1bc      	bne.n	8004758 <_printf_float+0xc8>
 80047de:	2101      	movs	r1, #1
 80047e0:	e7b9      	b.n	8004756 <_printf_float+0xc6>
 80047e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80047e6:	d119      	bne.n	800481c <_printf_float+0x18c>
 80047e8:	2900      	cmp	r1, #0
 80047ea:	6863      	ldr	r3, [r4, #4]
 80047ec:	dd0c      	ble.n	8004808 <_printf_float+0x178>
 80047ee:	6121      	str	r1, [r4, #16]
 80047f0:	b913      	cbnz	r3, 80047f8 <_printf_float+0x168>
 80047f2:	6822      	ldr	r2, [r4, #0]
 80047f4:	07d2      	lsls	r2, r2, #31
 80047f6:	d502      	bpl.n	80047fe <_printf_float+0x16e>
 80047f8:	3301      	adds	r3, #1
 80047fa:	440b      	add	r3, r1
 80047fc:	6123      	str	r3, [r4, #16]
 80047fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004800:	65a3      	str	r3, [r4, #88]	; 0x58
 8004802:	f04f 0a00 	mov.w	sl, #0
 8004806:	e7d9      	b.n	80047bc <_printf_float+0x12c>
 8004808:	b913      	cbnz	r3, 8004810 <_printf_float+0x180>
 800480a:	6822      	ldr	r2, [r4, #0]
 800480c:	07d0      	lsls	r0, r2, #31
 800480e:	d501      	bpl.n	8004814 <_printf_float+0x184>
 8004810:	3302      	adds	r3, #2
 8004812:	e7f3      	b.n	80047fc <_printf_float+0x16c>
 8004814:	2301      	movs	r3, #1
 8004816:	e7f1      	b.n	80047fc <_printf_float+0x16c>
 8004818:	f04f 0967 	mov.w	r9, #103	; 0x67
 800481c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004820:	4293      	cmp	r3, r2
 8004822:	db05      	blt.n	8004830 <_printf_float+0x1a0>
 8004824:	6822      	ldr	r2, [r4, #0]
 8004826:	6123      	str	r3, [r4, #16]
 8004828:	07d1      	lsls	r1, r2, #31
 800482a:	d5e8      	bpl.n	80047fe <_printf_float+0x16e>
 800482c:	3301      	adds	r3, #1
 800482e:	e7e5      	b.n	80047fc <_printf_float+0x16c>
 8004830:	2b00      	cmp	r3, #0
 8004832:	bfd4      	ite	le
 8004834:	f1c3 0302 	rsble	r3, r3, #2
 8004838:	2301      	movgt	r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	e7de      	b.n	80047fc <_printf_float+0x16c>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	055a      	lsls	r2, r3, #21
 8004842:	d407      	bmi.n	8004854 <_printf_float+0x1c4>
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	4642      	mov	r2, r8
 8004848:	4631      	mov	r1, r6
 800484a:	4628      	mov	r0, r5
 800484c:	47b8      	blx	r7
 800484e:	3001      	adds	r0, #1
 8004850:	d12a      	bne.n	80048a8 <_printf_float+0x218>
 8004852:	e76b      	b.n	800472c <_printf_float+0x9c>
 8004854:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004858:	f240 80de 	bls.w	8004a18 <_printf_float+0x388>
 800485c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004860:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004868:	d133      	bne.n	80048d2 <_printf_float+0x242>
 800486a:	2301      	movs	r3, #1
 800486c:	4a42      	ldr	r2, [pc, #264]	; (8004978 <_printf_float+0x2e8>)
 800486e:	4631      	mov	r1, r6
 8004870:	4628      	mov	r0, r5
 8004872:	47b8      	blx	r7
 8004874:	3001      	adds	r0, #1
 8004876:	f43f af59 	beq.w	800472c <_printf_float+0x9c>
 800487a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800487e:	429a      	cmp	r2, r3
 8004880:	db02      	blt.n	8004888 <_printf_float+0x1f8>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	07d8      	lsls	r0, r3, #31
 8004886:	d50f      	bpl.n	80048a8 <_printf_float+0x218>
 8004888:	9b05      	ldr	r3, [sp, #20]
 800488a:	465a      	mov	r2, fp
 800488c:	4631      	mov	r1, r6
 800488e:	4628      	mov	r0, r5
 8004890:	47b8      	blx	r7
 8004892:	3001      	adds	r0, #1
 8004894:	f43f af4a 	beq.w	800472c <_printf_float+0x9c>
 8004898:	f04f 0800 	mov.w	r8, #0
 800489c:	f104 091a 	add.w	r9, r4, #26
 80048a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a2:	3b01      	subs	r3, #1
 80048a4:	4543      	cmp	r3, r8
 80048a6:	dc09      	bgt.n	80048bc <_printf_float+0x22c>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	079b      	lsls	r3, r3, #30
 80048ac:	f100 8105 	bmi.w	8004aba <_printf_float+0x42a>
 80048b0:	68e0      	ldr	r0, [r4, #12]
 80048b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048b4:	4298      	cmp	r0, r3
 80048b6:	bfb8      	it	lt
 80048b8:	4618      	movlt	r0, r3
 80048ba:	e739      	b.n	8004730 <_printf_float+0xa0>
 80048bc:	2301      	movs	r3, #1
 80048be:	464a      	mov	r2, r9
 80048c0:	4631      	mov	r1, r6
 80048c2:	4628      	mov	r0, r5
 80048c4:	47b8      	blx	r7
 80048c6:	3001      	adds	r0, #1
 80048c8:	f43f af30 	beq.w	800472c <_printf_float+0x9c>
 80048cc:	f108 0801 	add.w	r8, r8, #1
 80048d0:	e7e6      	b.n	80048a0 <_printf_float+0x210>
 80048d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	dc2b      	bgt.n	8004930 <_printf_float+0x2a0>
 80048d8:	2301      	movs	r3, #1
 80048da:	4a27      	ldr	r2, [pc, #156]	; (8004978 <_printf_float+0x2e8>)
 80048dc:	4631      	mov	r1, r6
 80048de:	4628      	mov	r0, r5
 80048e0:	47b8      	blx	r7
 80048e2:	3001      	adds	r0, #1
 80048e4:	f43f af22 	beq.w	800472c <_printf_float+0x9c>
 80048e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ea:	b923      	cbnz	r3, 80048f6 <_printf_float+0x266>
 80048ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ee:	b913      	cbnz	r3, 80048f6 <_printf_float+0x266>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	07d9      	lsls	r1, r3, #31
 80048f4:	d5d8      	bpl.n	80048a8 <_printf_float+0x218>
 80048f6:	9b05      	ldr	r3, [sp, #20]
 80048f8:	465a      	mov	r2, fp
 80048fa:	4631      	mov	r1, r6
 80048fc:	4628      	mov	r0, r5
 80048fe:	47b8      	blx	r7
 8004900:	3001      	adds	r0, #1
 8004902:	f43f af13 	beq.w	800472c <_printf_float+0x9c>
 8004906:	f04f 0900 	mov.w	r9, #0
 800490a:	f104 0a1a 	add.w	sl, r4, #26
 800490e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004910:	425b      	negs	r3, r3
 8004912:	454b      	cmp	r3, r9
 8004914:	dc01      	bgt.n	800491a <_printf_float+0x28a>
 8004916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004918:	e795      	b.n	8004846 <_printf_float+0x1b6>
 800491a:	2301      	movs	r3, #1
 800491c:	4652      	mov	r2, sl
 800491e:	4631      	mov	r1, r6
 8004920:	4628      	mov	r0, r5
 8004922:	47b8      	blx	r7
 8004924:	3001      	adds	r0, #1
 8004926:	f43f af01 	beq.w	800472c <_printf_float+0x9c>
 800492a:	f109 0901 	add.w	r9, r9, #1
 800492e:	e7ee      	b.n	800490e <_printf_float+0x27e>
 8004930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004932:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004934:	429a      	cmp	r2, r3
 8004936:	bfa8      	it	ge
 8004938:	461a      	movge	r2, r3
 800493a:	2a00      	cmp	r2, #0
 800493c:	4691      	mov	r9, r2
 800493e:	dd07      	ble.n	8004950 <_printf_float+0x2c0>
 8004940:	4613      	mov	r3, r2
 8004942:	4631      	mov	r1, r6
 8004944:	4642      	mov	r2, r8
 8004946:	4628      	mov	r0, r5
 8004948:	47b8      	blx	r7
 800494a:	3001      	adds	r0, #1
 800494c:	f43f aeee 	beq.w	800472c <_printf_float+0x9c>
 8004950:	f104 031a 	add.w	r3, r4, #26
 8004954:	f04f 0a00 	mov.w	sl, #0
 8004958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800495c:	9307      	str	r3, [sp, #28]
 800495e:	e017      	b.n	8004990 <_printf_float+0x300>
 8004960:	ffffffff 	.word	0xffffffff
 8004964:	7fefffff 	.word	0x7fefffff
 8004968:	08006d14 	.word	0x08006d14
 800496c:	08006d10 	.word	0x08006d10
 8004970:	08006d1c 	.word	0x08006d1c
 8004974:	08006d18 	.word	0x08006d18
 8004978:	08006d20 	.word	0x08006d20
 800497c:	2301      	movs	r3, #1
 800497e:	9a07      	ldr	r2, [sp, #28]
 8004980:	4631      	mov	r1, r6
 8004982:	4628      	mov	r0, r5
 8004984:	47b8      	blx	r7
 8004986:	3001      	adds	r0, #1
 8004988:	f43f aed0 	beq.w	800472c <_printf_float+0x9c>
 800498c:	f10a 0a01 	add.w	sl, sl, #1
 8004990:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004992:	9306      	str	r3, [sp, #24]
 8004994:	eba3 0309 	sub.w	r3, r3, r9
 8004998:	4553      	cmp	r3, sl
 800499a:	dcef      	bgt.n	800497c <_printf_float+0x2ec>
 800499c:	9b06      	ldr	r3, [sp, #24]
 800499e:	4498      	add	r8, r3
 80049a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049a4:	429a      	cmp	r2, r3
 80049a6:	db15      	blt.n	80049d4 <_printf_float+0x344>
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	07da      	lsls	r2, r3, #31
 80049ac:	d412      	bmi.n	80049d4 <_printf_float+0x344>
 80049ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049b0:	9a06      	ldr	r2, [sp, #24]
 80049b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049b4:	1a9a      	subs	r2, r3, r2
 80049b6:	eba3 0a01 	sub.w	sl, r3, r1
 80049ba:	4592      	cmp	sl, r2
 80049bc:	bfa8      	it	ge
 80049be:	4692      	movge	sl, r2
 80049c0:	f1ba 0f00 	cmp.w	sl, #0
 80049c4:	dc0e      	bgt.n	80049e4 <_printf_float+0x354>
 80049c6:	f04f 0800 	mov.w	r8, #0
 80049ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80049ce:	f104 091a 	add.w	r9, r4, #26
 80049d2:	e019      	b.n	8004a08 <_printf_float+0x378>
 80049d4:	9b05      	ldr	r3, [sp, #20]
 80049d6:	465a      	mov	r2, fp
 80049d8:	4631      	mov	r1, r6
 80049da:	4628      	mov	r0, r5
 80049dc:	47b8      	blx	r7
 80049de:	3001      	adds	r0, #1
 80049e0:	d1e5      	bne.n	80049ae <_printf_float+0x31e>
 80049e2:	e6a3      	b.n	800472c <_printf_float+0x9c>
 80049e4:	4653      	mov	r3, sl
 80049e6:	4642      	mov	r2, r8
 80049e8:	4631      	mov	r1, r6
 80049ea:	4628      	mov	r0, r5
 80049ec:	47b8      	blx	r7
 80049ee:	3001      	adds	r0, #1
 80049f0:	d1e9      	bne.n	80049c6 <_printf_float+0x336>
 80049f2:	e69b      	b.n	800472c <_printf_float+0x9c>
 80049f4:	2301      	movs	r3, #1
 80049f6:	464a      	mov	r2, r9
 80049f8:	4631      	mov	r1, r6
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	f43f ae94 	beq.w	800472c <_printf_float+0x9c>
 8004a04:	f108 0801 	add.w	r8, r8, #1
 8004a08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	eba3 030a 	sub.w	r3, r3, sl
 8004a12:	4543      	cmp	r3, r8
 8004a14:	dcee      	bgt.n	80049f4 <_printf_float+0x364>
 8004a16:	e747      	b.n	80048a8 <_printf_float+0x218>
 8004a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a1a:	2a01      	cmp	r2, #1
 8004a1c:	dc01      	bgt.n	8004a22 <_printf_float+0x392>
 8004a1e:	07db      	lsls	r3, r3, #31
 8004a20:	d539      	bpl.n	8004a96 <_printf_float+0x406>
 8004a22:	2301      	movs	r3, #1
 8004a24:	4642      	mov	r2, r8
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b8      	blx	r7
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	f43f ae7d 	beq.w	800472c <_printf_float+0x9c>
 8004a32:	9b05      	ldr	r3, [sp, #20]
 8004a34:	465a      	mov	r2, fp
 8004a36:	4631      	mov	r1, r6
 8004a38:	4628      	mov	r0, r5
 8004a3a:	47b8      	blx	r7
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	f108 0801 	add.w	r8, r8, #1
 8004a42:	f43f ae73 	beq.w	800472c <_printf_float+0x9c>
 8004a46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a54:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a58:	d018      	beq.n	8004a8c <_printf_float+0x3fc>
 8004a5a:	4642      	mov	r2, r8
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	4628      	mov	r0, r5
 8004a60:	47b8      	blx	r7
 8004a62:	3001      	adds	r0, #1
 8004a64:	d10e      	bne.n	8004a84 <_printf_float+0x3f4>
 8004a66:	e661      	b.n	800472c <_printf_float+0x9c>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	464a      	mov	r2, r9
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4628      	mov	r0, r5
 8004a70:	47b8      	blx	r7
 8004a72:	3001      	adds	r0, #1
 8004a74:	f43f ae5a 	beq.w	800472c <_printf_float+0x9c>
 8004a78:	f108 0801 	add.w	r8, r8, #1
 8004a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	4543      	cmp	r3, r8
 8004a82:	dcf1      	bgt.n	8004a68 <_printf_float+0x3d8>
 8004a84:	4653      	mov	r3, sl
 8004a86:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a8a:	e6dd      	b.n	8004848 <_printf_float+0x1b8>
 8004a8c:	f04f 0800 	mov.w	r8, #0
 8004a90:	f104 091a 	add.w	r9, r4, #26
 8004a94:	e7f2      	b.n	8004a7c <_printf_float+0x3ec>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e7df      	b.n	8004a5a <_printf_float+0x3ca>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	464a      	mov	r2, r9
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	47b8      	blx	r7
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	f43f ae41 	beq.w	800472c <_printf_float+0x9c>
 8004aaa:	f108 0801 	add.w	r8, r8, #1
 8004aae:	68e3      	ldr	r3, [r4, #12]
 8004ab0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	4543      	cmp	r3, r8
 8004ab6:	dcf0      	bgt.n	8004a9a <_printf_float+0x40a>
 8004ab8:	e6fa      	b.n	80048b0 <_printf_float+0x220>
 8004aba:	f04f 0800 	mov.w	r8, #0
 8004abe:	f104 0919 	add.w	r9, r4, #25
 8004ac2:	e7f4      	b.n	8004aae <_printf_float+0x41e>
 8004ac4:	2900      	cmp	r1, #0
 8004ac6:	f43f ae8a 	beq.w	80047de <_printf_float+0x14e>
 8004aca:	f04f 0c00 	mov.w	ip, #0
 8004ace:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8004ad2:	e9cd 0900 	strd	r0, r9, [sp]
 8004ad6:	6022      	str	r2, [r4, #0]
 8004ad8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004adc:	4628      	mov	r0, r5
 8004ade:	f7ff fd4f 	bl	8004580 <__cvt>
 8004ae2:	4680      	mov	r8, r0
 8004ae4:	e64a      	b.n	800477c <_printf_float+0xec>
 8004ae6:	bf00      	nop

08004ae8 <_printf_common>:
 8004ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aec:	4691      	mov	r9, r2
 8004aee:	461f      	mov	r7, r3
 8004af0:	688a      	ldr	r2, [r1, #8]
 8004af2:	690b      	ldr	r3, [r1, #16]
 8004af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004af8:	4293      	cmp	r3, r2
 8004afa:	bfb8      	it	lt
 8004afc:	4613      	movlt	r3, r2
 8004afe:	f8c9 3000 	str.w	r3, [r9]
 8004b02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b06:	4606      	mov	r6, r0
 8004b08:	460c      	mov	r4, r1
 8004b0a:	b112      	cbz	r2, 8004b12 <_printf_common+0x2a>
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f8c9 3000 	str.w	r3, [r9]
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	0699      	lsls	r1, r3, #26
 8004b16:	bf42      	ittt	mi
 8004b18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b1c:	3302      	addmi	r3, #2
 8004b1e:	f8c9 3000 	strmi.w	r3, [r9]
 8004b22:	6825      	ldr	r5, [r4, #0]
 8004b24:	f015 0506 	ands.w	r5, r5, #6
 8004b28:	d107      	bne.n	8004b3a <_printf_common+0x52>
 8004b2a:	f104 0a19 	add.w	sl, r4, #25
 8004b2e:	68e3      	ldr	r3, [r4, #12]
 8004b30:	f8d9 2000 	ldr.w	r2, [r9]
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	42ab      	cmp	r3, r5
 8004b38:	dc28      	bgt.n	8004b8c <_printf_common+0xa4>
 8004b3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b3e:	6822      	ldr	r2, [r4, #0]
 8004b40:	3300      	adds	r3, #0
 8004b42:	bf18      	it	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	0692      	lsls	r2, r2, #26
 8004b48:	d42d      	bmi.n	8004ba6 <_printf_common+0xbe>
 8004b4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b4e:	4639      	mov	r1, r7
 8004b50:	4630      	mov	r0, r6
 8004b52:	47c0      	blx	r8
 8004b54:	3001      	adds	r0, #1
 8004b56:	d020      	beq.n	8004b9a <_printf_common+0xb2>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	68e5      	ldr	r5, [r4, #12]
 8004b5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004b60:	f003 0306 	and.w	r3, r3, #6
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	bf08      	it	eq
 8004b68:	1aad      	subeq	r5, r5, r2
 8004b6a:	68a3      	ldr	r3, [r4, #8]
 8004b6c:	6922      	ldr	r2, [r4, #16]
 8004b6e:	bf0c      	ite	eq
 8004b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b74:	2500      	movne	r5, #0
 8004b76:	4293      	cmp	r3, r2
 8004b78:	bfc4      	itt	gt
 8004b7a:	1a9b      	subgt	r3, r3, r2
 8004b7c:	18ed      	addgt	r5, r5, r3
 8004b7e:	f04f 0900 	mov.w	r9, #0
 8004b82:	341a      	adds	r4, #26
 8004b84:	454d      	cmp	r5, r9
 8004b86:	d11a      	bne.n	8004bbe <_printf_common+0xd6>
 8004b88:	2000      	movs	r0, #0
 8004b8a:	e008      	b.n	8004b9e <_printf_common+0xb6>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4652      	mov	r2, sl
 8004b90:	4639      	mov	r1, r7
 8004b92:	4630      	mov	r0, r6
 8004b94:	47c0      	blx	r8
 8004b96:	3001      	adds	r0, #1
 8004b98:	d103      	bne.n	8004ba2 <_printf_common+0xba>
 8004b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba2:	3501      	adds	r5, #1
 8004ba4:	e7c3      	b.n	8004b2e <_printf_common+0x46>
 8004ba6:	18e1      	adds	r1, r4, r3
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	2030      	movs	r0, #48	; 0x30
 8004bac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bb0:	4422      	add	r2, r4
 8004bb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bba:	3302      	adds	r3, #2
 8004bbc:	e7c5      	b.n	8004b4a <_printf_common+0x62>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4622      	mov	r2, r4
 8004bc2:	4639      	mov	r1, r7
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	47c0      	blx	r8
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d0e6      	beq.n	8004b9a <_printf_common+0xb2>
 8004bcc:	f109 0901 	add.w	r9, r9, #1
 8004bd0:	e7d8      	b.n	8004b84 <_printf_common+0x9c>
	...

08004bd4 <_printf_i>:
 8004bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004bdc:	460c      	mov	r4, r1
 8004bde:	7e09      	ldrb	r1, [r1, #24]
 8004be0:	b085      	sub	sp, #20
 8004be2:	296e      	cmp	r1, #110	; 0x6e
 8004be4:	4617      	mov	r7, r2
 8004be6:	4606      	mov	r6, r0
 8004be8:	4698      	mov	r8, r3
 8004bea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bec:	f000 80b3 	beq.w	8004d56 <_printf_i+0x182>
 8004bf0:	d822      	bhi.n	8004c38 <_printf_i+0x64>
 8004bf2:	2963      	cmp	r1, #99	; 0x63
 8004bf4:	d036      	beq.n	8004c64 <_printf_i+0x90>
 8004bf6:	d80a      	bhi.n	8004c0e <_printf_i+0x3a>
 8004bf8:	2900      	cmp	r1, #0
 8004bfa:	f000 80b9 	beq.w	8004d70 <_printf_i+0x19c>
 8004bfe:	2958      	cmp	r1, #88	; 0x58
 8004c00:	f000 8083 	beq.w	8004d0a <_printf_i+0x136>
 8004c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c0c:	e032      	b.n	8004c74 <_printf_i+0xa0>
 8004c0e:	2964      	cmp	r1, #100	; 0x64
 8004c10:	d001      	beq.n	8004c16 <_printf_i+0x42>
 8004c12:	2969      	cmp	r1, #105	; 0x69
 8004c14:	d1f6      	bne.n	8004c04 <_printf_i+0x30>
 8004c16:	6820      	ldr	r0, [r4, #0]
 8004c18:	6813      	ldr	r3, [r2, #0]
 8004c1a:	0605      	lsls	r5, r0, #24
 8004c1c:	f103 0104 	add.w	r1, r3, #4
 8004c20:	d52a      	bpl.n	8004c78 <_printf_i+0xa4>
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6011      	str	r1, [r2, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da03      	bge.n	8004c32 <_printf_i+0x5e>
 8004c2a:	222d      	movs	r2, #45	; 0x2d
 8004c2c:	425b      	negs	r3, r3
 8004c2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c32:	486f      	ldr	r0, [pc, #444]	; (8004df0 <_printf_i+0x21c>)
 8004c34:	220a      	movs	r2, #10
 8004c36:	e039      	b.n	8004cac <_printf_i+0xd8>
 8004c38:	2973      	cmp	r1, #115	; 0x73
 8004c3a:	f000 809d 	beq.w	8004d78 <_printf_i+0x1a4>
 8004c3e:	d808      	bhi.n	8004c52 <_printf_i+0x7e>
 8004c40:	296f      	cmp	r1, #111	; 0x6f
 8004c42:	d020      	beq.n	8004c86 <_printf_i+0xb2>
 8004c44:	2970      	cmp	r1, #112	; 0x70
 8004c46:	d1dd      	bne.n	8004c04 <_printf_i+0x30>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	f043 0320 	orr.w	r3, r3, #32
 8004c4e:	6023      	str	r3, [r4, #0]
 8004c50:	e003      	b.n	8004c5a <_printf_i+0x86>
 8004c52:	2975      	cmp	r1, #117	; 0x75
 8004c54:	d017      	beq.n	8004c86 <_printf_i+0xb2>
 8004c56:	2978      	cmp	r1, #120	; 0x78
 8004c58:	d1d4      	bne.n	8004c04 <_printf_i+0x30>
 8004c5a:	2378      	movs	r3, #120	; 0x78
 8004c5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c60:	4864      	ldr	r0, [pc, #400]	; (8004df4 <_printf_i+0x220>)
 8004c62:	e055      	b.n	8004d10 <_printf_i+0x13c>
 8004c64:	6813      	ldr	r3, [r2, #0]
 8004c66:	1d19      	adds	r1, r3, #4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6011      	str	r1, [r2, #0]
 8004c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c74:	2301      	movs	r3, #1
 8004c76:	e08c      	b.n	8004d92 <_printf_i+0x1be>
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6011      	str	r1, [r2, #0]
 8004c7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c80:	bf18      	it	ne
 8004c82:	b21b      	sxthne	r3, r3
 8004c84:	e7cf      	b.n	8004c26 <_printf_i+0x52>
 8004c86:	6813      	ldr	r3, [r2, #0]
 8004c88:	6825      	ldr	r5, [r4, #0]
 8004c8a:	1d18      	adds	r0, r3, #4
 8004c8c:	6010      	str	r0, [r2, #0]
 8004c8e:	0628      	lsls	r0, r5, #24
 8004c90:	d501      	bpl.n	8004c96 <_printf_i+0xc2>
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	e002      	b.n	8004c9c <_printf_i+0xc8>
 8004c96:	0668      	lsls	r0, r5, #25
 8004c98:	d5fb      	bpl.n	8004c92 <_printf_i+0xbe>
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	4854      	ldr	r0, [pc, #336]	; (8004df0 <_printf_i+0x21c>)
 8004c9e:	296f      	cmp	r1, #111	; 0x6f
 8004ca0:	bf14      	ite	ne
 8004ca2:	220a      	movne	r2, #10
 8004ca4:	2208      	moveq	r2, #8
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cac:	6865      	ldr	r5, [r4, #4]
 8004cae:	60a5      	str	r5, [r4, #8]
 8004cb0:	2d00      	cmp	r5, #0
 8004cb2:	f2c0 8095 	blt.w	8004de0 <_printf_i+0x20c>
 8004cb6:	6821      	ldr	r1, [r4, #0]
 8004cb8:	f021 0104 	bic.w	r1, r1, #4
 8004cbc:	6021      	str	r1, [r4, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d13d      	bne.n	8004d3e <_printf_i+0x16a>
 8004cc2:	2d00      	cmp	r5, #0
 8004cc4:	f040 808e 	bne.w	8004de4 <_printf_i+0x210>
 8004cc8:	4665      	mov	r5, ip
 8004cca:	2a08      	cmp	r2, #8
 8004ccc:	d10b      	bne.n	8004ce6 <_printf_i+0x112>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	07db      	lsls	r3, r3, #31
 8004cd2:	d508      	bpl.n	8004ce6 <_printf_i+0x112>
 8004cd4:	6923      	ldr	r3, [r4, #16]
 8004cd6:	6862      	ldr	r2, [r4, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	bfde      	ittt	le
 8004cdc:	2330      	movle	r3, #48	; 0x30
 8004cde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ce2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ce6:	ebac 0305 	sub.w	r3, ip, r5
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	f8cd 8000 	str.w	r8, [sp]
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	aa03      	add	r2, sp, #12
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f7ff fef6 	bl	8004ae8 <_printf_common>
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d14d      	bne.n	8004d9c <_printf_i+0x1c8>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	b005      	add	sp, #20
 8004d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d0a:	4839      	ldr	r0, [pc, #228]	; (8004df0 <_printf_i+0x21c>)
 8004d0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d10:	6813      	ldr	r3, [r2, #0]
 8004d12:	6821      	ldr	r1, [r4, #0]
 8004d14:	1d1d      	adds	r5, r3, #4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6015      	str	r5, [r2, #0]
 8004d1a:	060a      	lsls	r2, r1, #24
 8004d1c:	d50b      	bpl.n	8004d36 <_printf_i+0x162>
 8004d1e:	07ca      	lsls	r2, r1, #31
 8004d20:	bf44      	itt	mi
 8004d22:	f041 0120 	orrmi.w	r1, r1, #32
 8004d26:	6021      	strmi	r1, [r4, #0]
 8004d28:	b91b      	cbnz	r3, 8004d32 <_printf_i+0x15e>
 8004d2a:	6822      	ldr	r2, [r4, #0]
 8004d2c:	f022 0220 	bic.w	r2, r2, #32
 8004d30:	6022      	str	r2, [r4, #0]
 8004d32:	2210      	movs	r2, #16
 8004d34:	e7b7      	b.n	8004ca6 <_printf_i+0xd2>
 8004d36:	064d      	lsls	r5, r1, #25
 8004d38:	bf48      	it	mi
 8004d3a:	b29b      	uxthmi	r3, r3
 8004d3c:	e7ef      	b.n	8004d1e <_printf_i+0x14a>
 8004d3e:	4665      	mov	r5, ip
 8004d40:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d44:	fb02 3311 	mls	r3, r2, r1, r3
 8004d48:	5cc3      	ldrb	r3, [r0, r3]
 8004d4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d4e:	460b      	mov	r3, r1
 8004d50:	2900      	cmp	r1, #0
 8004d52:	d1f5      	bne.n	8004d40 <_printf_i+0x16c>
 8004d54:	e7b9      	b.n	8004cca <_printf_i+0xf6>
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	6825      	ldr	r5, [r4, #0]
 8004d5a:	6961      	ldr	r1, [r4, #20]
 8004d5c:	1d18      	adds	r0, r3, #4
 8004d5e:	6010      	str	r0, [r2, #0]
 8004d60:	0628      	lsls	r0, r5, #24
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	d501      	bpl.n	8004d6a <_printf_i+0x196>
 8004d66:	6019      	str	r1, [r3, #0]
 8004d68:	e002      	b.n	8004d70 <_printf_i+0x19c>
 8004d6a:	066a      	lsls	r2, r5, #25
 8004d6c:	d5fb      	bpl.n	8004d66 <_printf_i+0x192>
 8004d6e:	8019      	strh	r1, [r3, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	6123      	str	r3, [r4, #16]
 8004d74:	4665      	mov	r5, ip
 8004d76:	e7b9      	b.n	8004cec <_printf_i+0x118>
 8004d78:	6813      	ldr	r3, [r2, #0]
 8004d7a:	1d19      	adds	r1, r3, #4
 8004d7c:	6011      	str	r1, [r2, #0]
 8004d7e:	681d      	ldr	r5, [r3, #0]
 8004d80:	6862      	ldr	r2, [r4, #4]
 8004d82:	2100      	movs	r1, #0
 8004d84:	4628      	mov	r0, r5
 8004d86:	f7fb fa63 	bl	8000250 <memchr>
 8004d8a:	b108      	cbz	r0, 8004d90 <_printf_i+0x1bc>
 8004d8c:	1b40      	subs	r0, r0, r5
 8004d8e:	6060      	str	r0, [r4, #4]
 8004d90:	6863      	ldr	r3, [r4, #4]
 8004d92:	6123      	str	r3, [r4, #16]
 8004d94:	2300      	movs	r3, #0
 8004d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9a:	e7a7      	b.n	8004cec <_printf_i+0x118>
 8004d9c:	6923      	ldr	r3, [r4, #16]
 8004d9e:	462a      	mov	r2, r5
 8004da0:	4639      	mov	r1, r7
 8004da2:	4630      	mov	r0, r6
 8004da4:	47c0      	blx	r8
 8004da6:	3001      	adds	r0, #1
 8004da8:	d0aa      	beq.n	8004d00 <_printf_i+0x12c>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	079b      	lsls	r3, r3, #30
 8004dae:	d413      	bmi.n	8004dd8 <_printf_i+0x204>
 8004db0:	68e0      	ldr	r0, [r4, #12]
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	4298      	cmp	r0, r3
 8004db6:	bfb8      	it	lt
 8004db8:	4618      	movlt	r0, r3
 8004dba:	e7a3      	b.n	8004d04 <_printf_i+0x130>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	464a      	mov	r2, r9
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	47c0      	blx	r8
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d09a      	beq.n	8004d00 <_printf_i+0x12c>
 8004dca:	3501      	adds	r5, #1
 8004dcc:	68e3      	ldr	r3, [r4, #12]
 8004dce:	9a03      	ldr	r2, [sp, #12]
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	42ab      	cmp	r3, r5
 8004dd4:	dcf2      	bgt.n	8004dbc <_printf_i+0x1e8>
 8004dd6:	e7eb      	b.n	8004db0 <_printf_i+0x1dc>
 8004dd8:	2500      	movs	r5, #0
 8004dda:	f104 0919 	add.w	r9, r4, #25
 8004dde:	e7f5      	b.n	8004dcc <_printf_i+0x1f8>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1ac      	bne.n	8004d3e <_printf_i+0x16a>
 8004de4:	7803      	ldrb	r3, [r0, #0]
 8004de6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dee:	e76c      	b.n	8004cca <_printf_i+0xf6>
 8004df0:	08006d22 	.word	0x08006d22
 8004df4:	08006d33 	.word	0x08006d33

08004df8 <iprintf>:
 8004df8:	b40f      	push	{r0, r1, r2, r3}
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <iprintf+0x2c>)
 8004dfc:	b513      	push	{r0, r1, r4, lr}
 8004dfe:	681c      	ldr	r4, [r3, #0]
 8004e00:	b124      	cbz	r4, 8004e0c <iprintf+0x14>
 8004e02:	69a3      	ldr	r3, [r4, #24]
 8004e04:	b913      	cbnz	r3, 8004e0c <iprintf+0x14>
 8004e06:	4620      	mov	r0, r4
 8004e08:	f000 ff86 	bl	8005d18 <__sinit>
 8004e0c:	ab05      	add	r3, sp, #20
 8004e0e:	9a04      	ldr	r2, [sp, #16]
 8004e10:	68a1      	ldr	r1, [r4, #8]
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	4620      	mov	r0, r4
 8004e16:	f001 fc49 	bl	80066ac <_vfiprintf_r>
 8004e1a:	b002      	add	sp, #8
 8004e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e20:	b004      	add	sp, #16
 8004e22:	4770      	bx	lr
 8004e24:	20000144 	.word	0x20000144

08004e28 <setvbuf>:
 8004e28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e2c:	461d      	mov	r5, r3
 8004e2e:	4b51      	ldr	r3, [pc, #324]	; (8004f74 <setvbuf+0x14c>)
 8004e30:	681e      	ldr	r6, [r3, #0]
 8004e32:	4604      	mov	r4, r0
 8004e34:	460f      	mov	r7, r1
 8004e36:	4690      	mov	r8, r2
 8004e38:	b126      	cbz	r6, 8004e44 <setvbuf+0x1c>
 8004e3a:	69b3      	ldr	r3, [r6, #24]
 8004e3c:	b913      	cbnz	r3, 8004e44 <setvbuf+0x1c>
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f000 ff6a 	bl	8005d18 <__sinit>
 8004e44:	4b4c      	ldr	r3, [pc, #304]	; (8004f78 <setvbuf+0x150>)
 8004e46:	429c      	cmp	r4, r3
 8004e48:	d152      	bne.n	8004ef0 <setvbuf+0xc8>
 8004e4a:	6874      	ldr	r4, [r6, #4]
 8004e4c:	f1b8 0f02 	cmp.w	r8, #2
 8004e50:	d006      	beq.n	8004e60 <setvbuf+0x38>
 8004e52:	f1b8 0f01 	cmp.w	r8, #1
 8004e56:	f200 8089 	bhi.w	8004f6c <setvbuf+0x144>
 8004e5a:	2d00      	cmp	r5, #0
 8004e5c:	f2c0 8086 	blt.w	8004f6c <setvbuf+0x144>
 8004e60:	4621      	mov	r1, r4
 8004e62:	4630      	mov	r0, r6
 8004e64:	f000 feee 	bl	8005c44 <_fflush_r>
 8004e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e6a:	b141      	cbz	r1, 8004e7e <setvbuf+0x56>
 8004e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e70:	4299      	cmp	r1, r3
 8004e72:	d002      	beq.n	8004e7a <setvbuf+0x52>
 8004e74:	4630      	mov	r0, r6
 8004e76:	f001 fb47 	bl	8006508 <_free_r>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61a3      	str	r3, [r4, #24]
 8004e82:	6063      	str	r3, [r4, #4]
 8004e84:	89a3      	ldrh	r3, [r4, #12]
 8004e86:	061b      	lsls	r3, r3, #24
 8004e88:	d503      	bpl.n	8004e92 <setvbuf+0x6a>
 8004e8a:	6921      	ldr	r1, [r4, #16]
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	f001 fb3b 	bl	8006508 <_free_r>
 8004e92:	89a3      	ldrh	r3, [r4, #12]
 8004e94:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004e98:	f023 0303 	bic.w	r3, r3, #3
 8004e9c:	f1b8 0f02 	cmp.w	r8, #2
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	d05d      	beq.n	8004f60 <setvbuf+0x138>
 8004ea4:	ab01      	add	r3, sp, #4
 8004ea6:	466a      	mov	r2, sp
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f000 ffcc 	bl	8005e48 <__swhatbuf_r>
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	4318      	orrs	r0, r3
 8004eb4:	81a0      	strh	r0, [r4, #12]
 8004eb6:	bb2d      	cbnz	r5, 8004f04 <setvbuf+0xdc>
 8004eb8:	9d00      	ldr	r5, [sp, #0]
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f001 f828 	bl	8005f10 <malloc>
 8004ec0:	4607      	mov	r7, r0
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d14e      	bne.n	8004f64 <setvbuf+0x13c>
 8004ec6:	f8dd 9000 	ldr.w	r9, [sp]
 8004eca:	45a9      	cmp	r9, r5
 8004ecc:	d13c      	bne.n	8004f48 <setvbuf+0x120>
 8004ece:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	f043 0302 	orr.w	r3, r3, #2
 8004ed8:	81a3      	strh	r3, [r4, #12]
 8004eda:	2300      	movs	r3, #0
 8004edc:	60a3      	str	r3, [r4, #8]
 8004ede:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ee2:	6023      	str	r3, [r4, #0]
 8004ee4:	6123      	str	r3, [r4, #16]
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	6163      	str	r3, [r4, #20]
 8004eea:	b003      	add	sp, #12
 8004eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ef0:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <setvbuf+0x154>)
 8004ef2:	429c      	cmp	r4, r3
 8004ef4:	d101      	bne.n	8004efa <setvbuf+0xd2>
 8004ef6:	68b4      	ldr	r4, [r6, #8]
 8004ef8:	e7a8      	b.n	8004e4c <setvbuf+0x24>
 8004efa:	4b21      	ldr	r3, [pc, #132]	; (8004f80 <setvbuf+0x158>)
 8004efc:	429c      	cmp	r4, r3
 8004efe:	bf08      	it	eq
 8004f00:	68f4      	ldreq	r4, [r6, #12]
 8004f02:	e7a3      	b.n	8004e4c <setvbuf+0x24>
 8004f04:	2f00      	cmp	r7, #0
 8004f06:	d0d8      	beq.n	8004eba <setvbuf+0x92>
 8004f08:	69b3      	ldr	r3, [r6, #24]
 8004f0a:	b913      	cbnz	r3, 8004f12 <setvbuf+0xea>
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f000 ff03 	bl	8005d18 <__sinit>
 8004f12:	f1b8 0f01 	cmp.w	r8, #1
 8004f16:	bf08      	it	eq
 8004f18:	89a3      	ldrheq	r3, [r4, #12]
 8004f1a:	6027      	str	r7, [r4, #0]
 8004f1c:	bf04      	itt	eq
 8004f1e:	f043 0301 	orreq.w	r3, r3, #1
 8004f22:	81a3      	strheq	r3, [r4, #12]
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	f013 0008 	ands.w	r0, r3, #8
 8004f2a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004f2e:	d01b      	beq.n	8004f68 <setvbuf+0x140>
 8004f30:	f013 0001 	ands.w	r0, r3, #1
 8004f34:	bf18      	it	ne
 8004f36:	426d      	negne	r5, r5
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	bf1d      	ittte	ne
 8004f3e:	60a3      	strne	r3, [r4, #8]
 8004f40:	61a5      	strne	r5, [r4, #24]
 8004f42:	4618      	movne	r0, r3
 8004f44:	60a5      	streq	r5, [r4, #8]
 8004f46:	e7d0      	b.n	8004eea <setvbuf+0xc2>
 8004f48:	4648      	mov	r0, r9
 8004f4a:	f000 ffe1 	bl	8005f10 <malloc>
 8004f4e:	4607      	mov	r7, r0
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d0bc      	beq.n	8004ece <setvbuf+0xa6>
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5a:	81a3      	strh	r3, [r4, #12]
 8004f5c:	464d      	mov	r5, r9
 8004f5e:	e7d3      	b.n	8004f08 <setvbuf+0xe0>
 8004f60:	2000      	movs	r0, #0
 8004f62:	e7b6      	b.n	8004ed2 <setvbuf+0xaa>
 8004f64:	46a9      	mov	r9, r5
 8004f66:	e7f5      	b.n	8004f54 <setvbuf+0x12c>
 8004f68:	60a0      	str	r0, [r4, #8]
 8004f6a:	e7be      	b.n	8004eea <setvbuf+0xc2>
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	e7bb      	b.n	8004eea <setvbuf+0xc2>
 8004f72:	bf00      	nop
 8004f74:	20000144 	.word	0x20000144
 8004f78:	08006d74 	.word	0x08006d74
 8004f7c:	08006d94 	.word	0x08006d94
 8004f80:	08006d54 	.word	0x08006d54

08004f84 <quorem>:
 8004f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	6903      	ldr	r3, [r0, #16]
 8004f8a:	690c      	ldr	r4, [r1, #16]
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	4680      	mov	r8, r0
 8004f90:	f2c0 8082 	blt.w	8005098 <quorem+0x114>
 8004f94:	3c01      	subs	r4, #1
 8004f96:	f101 0714 	add.w	r7, r1, #20
 8004f9a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004f9e:	f100 0614 	add.w	r6, r0, #20
 8004fa2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004fa6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004faa:	eb06 030c 	add.w	r3, r6, ip
 8004fae:	3501      	adds	r5, #1
 8004fb0:	eb07 090c 	add.w	r9, r7, ip
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	fbb0 f5f5 	udiv	r5, r0, r5
 8004fba:	b395      	cbz	r5, 8005022 <quorem+0x9e>
 8004fbc:	f04f 0a00 	mov.w	sl, #0
 8004fc0:	4638      	mov	r0, r7
 8004fc2:	46b6      	mov	lr, r6
 8004fc4:	46d3      	mov	fp, sl
 8004fc6:	f850 2b04 	ldr.w	r2, [r0], #4
 8004fca:	b293      	uxth	r3, r2
 8004fcc:	fb05 a303 	mla	r3, r5, r3, sl
 8004fd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	ebab 0303 	sub.w	r3, fp, r3
 8004fda:	0c12      	lsrs	r2, r2, #16
 8004fdc:	f8de b000 	ldr.w	fp, [lr]
 8004fe0:	fb05 a202 	mla	r2, r5, r2, sl
 8004fe4:	fa13 f38b 	uxtah	r3, r3, fp
 8004fe8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004fec:	fa1f fb82 	uxth.w	fp, r2
 8004ff0:	f8de 2000 	ldr.w	r2, [lr]
 8004ff4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004ff8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005002:	4581      	cmp	r9, r0
 8005004:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005008:	f84e 3b04 	str.w	r3, [lr], #4
 800500c:	d2db      	bcs.n	8004fc6 <quorem+0x42>
 800500e:	f856 300c 	ldr.w	r3, [r6, ip]
 8005012:	b933      	cbnz	r3, 8005022 <quorem+0x9e>
 8005014:	9b01      	ldr	r3, [sp, #4]
 8005016:	3b04      	subs	r3, #4
 8005018:	429e      	cmp	r6, r3
 800501a:	461a      	mov	r2, r3
 800501c:	d330      	bcc.n	8005080 <quorem+0xfc>
 800501e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005022:	4640      	mov	r0, r8
 8005024:	f001 f99c 	bl	8006360 <__mcmp>
 8005028:	2800      	cmp	r0, #0
 800502a:	db25      	blt.n	8005078 <quorem+0xf4>
 800502c:	3501      	adds	r5, #1
 800502e:	4630      	mov	r0, r6
 8005030:	f04f 0c00 	mov.w	ip, #0
 8005034:	f857 2b04 	ldr.w	r2, [r7], #4
 8005038:	f8d0 e000 	ldr.w	lr, [r0]
 800503c:	b293      	uxth	r3, r2
 800503e:	ebac 0303 	sub.w	r3, ip, r3
 8005042:	0c12      	lsrs	r2, r2, #16
 8005044:	fa13 f38e 	uxtah	r3, r3, lr
 8005048:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800504c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005050:	b29b      	uxth	r3, r3
 8005052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005056:	45b9      	cmp	r9, r7
 8005058:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800505c:	f840 3b04 	str.w	r3, [r0], #4
 8005060:	d2e8      	bcs.n	8005034 <quorem+0xb0>
 8005062:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005066:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800506a:	b92a      	cbnz	r2, 8005078 <quorem+0xf4>
 800506c:	3b04      	subs	r3, #4
 800506e:	429e      	cmp	r6, r3
 8005070:	461a      	mov	r2, r3
 8005072:	d30b      	bcc.n	800508c <quorem+0x108>
 8005074:	f8c8 4010 	str.w	r4, [r8, #16]
 8005078:	4628      	mov	r0, r5
 800507a:	b003      	add	sp, #12
 800507c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	3b04      	subs	r3, #4
 8005084:	2a00      	cmp	r2, #0
 8005086:	d1ca      	bne.n	800501e <quorem+0x9a>
 8005088:	3c01      	subs	r4, #1
 800508a:	e7c5      	b.n	8005018 <quorem+0x94>
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	3b04      	subs	r3, #4
 8005090:	2a00      	cmp	r2, #0
 8005092:	d1ef      	bne.n	8005074 <quorem+0xf0>
 8005094:	3c01      	subs	r4, #1
 8005096:	e7ea      	b.n	800506e <quorem+0xea>
 8005098:	2000      	movs	r0, #0
 800509a:	e7ee      	b.n	800507a <quorem+0xf6>
 800509c:	0000      	movs	r0, r0
	...

080050a0 <_dtoa_r>:
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	ec57 6b10 	vmov	r6, r7, d0
 80050a8:	b095      	sub	sp, #84	; 0x54
 80050aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050ac:	9108      	str	r1, [sp, #32]
 80050ae:	4604      	mov	r4, r0
 80050b0:	920a      	str	r2, [sp, #40]	; 0x28
 80050b2:	9311      	str	r3, [sp, #68]	; 0x44
 80050b4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80050b8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80050bc:	b93d      	cbnz	r5, 80050ce <_dtoa_r+0x2e>
 80050be:	2010      	movs	r0, #16
 80050c0:	f000 ff26 	bl	8005f10 <malloc>
 80050c4:	6260      	str	r0, [r4, #36]	; 0x24
 80050c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80050ca:	6005      	str	r5, [r0, #0]
 80050cc:	60c5      	str	r5, [r0, #12]
 80050ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050d0:	6819      	ldr	r1, [r3, #0]
 80050d2:	b151      	cbz	r1, 80050ea <_dtoa_r+0x4a>
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	604a      	str	r2, [r1, #4]
 80050d8:	2301      	movs	r3, #1
 80050da:	4093      	lsls	r3, r2
 80050dc:	608b      	str	r3, [r1, #8]
 80050de:	4620      	mov	r0, r4
 80050e0:	f000 ff5d 	bl	8005f9e <_Bfree>
 80050e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	1e3b      	subs	r3, r7, #0
 80050ec:	bfb9      	ittee	lt
 80050ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80050f2:	9303      	strlt	r3, [sp, #12]
 80050f4:	2300      	movge	r3, #0
 80050f6:	f8c8 3000 	strge.w	r3, [r8]
 80050fa:	9d03      	ldr	r5, [sp, #12]
 80050fc:	4bac      	ldr	r3, [pc, #688]	; (80053b0 <_dtoa_r+0x310>)
 80050fe:	bfbc      	itt	lt
 8005100:	2201      	movlt	r2, #1
 8005102:	f8c8 2000 	strlt.w	r2, [r8]
 8005106:	43ab      	bics	r3, r5
 8005108:	d11b      	bne.n	8005142 <_dtoa_r+0xa2>
 800510a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800510c:	f242 730f 	movw	r3, #9999	; 0x270f
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	9b02      	ldr	r3, [sp, #8]
 8005114:	b923      	cbnz	r3, 8005120 <_dtoa_r+0x80>
 8005116:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800511a:	2d00      	cmp	r5, #0
 800511c:	f000 84dd 	beq.w	8005ada <_dtoa_r+0xa3a>
 8005120:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005122:	b953      	cbnz	r3, 800513a <_dtoa_r+0x9a>
 8005124:	4ba3      	ldr	r3, [pc, #652]	; (80053b4 <_dtoa_r+0x314>)
 8005126:	e020      	b.n	800516a <_dtoa_r+0xca>
 8005128:	4ba3      	ldr	r3, [pc, #652]	; (80053b8 <_dtoa_r+0x318>)
 800512a:	9304      	str	r3, [sp, #16]
 800512c:	3308      	adds	r3, #8
 800512e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	9804      	ldr	r0, [sp, #16]
 8005134:	b015      	add	sp, #84	; 0x54
 8005136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513a:	4b9e      	ldr	r3, [pc, #632]	; (80053b4 <_dtoa_r+0x314>)
 800513c:	9304      	str	r3, [sp, #16]
 800513e:	3303      	adds	r3, #3
 8005140:	e7f5      	b.n	800512e <_dtoa_r+0x8e>
 8005142:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005146:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800514a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005152:	d10c      	bne.n	800516e <_dtoa_r+0xce>
 8005154:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005156:	2301      	movs	r3, #1
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 84b9 	beq.w	8005ad4 <_dtoa_r+0xa34>
 8005162:	4b96      	ldr	r3, [pc, #600]	; (80053bc <_dtoa_r+0x31c>)
 8005164:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	3b01      	subs	r3, #1
 800516a:	9304      	str	r3, [sp, #16]
 800516c:	e7e1      	b.n	8005132 <_dtoa_r+0x92>
 800516e:	a913      	add	r1, sp, #76	; 0x4c
 8005170:	aa12      	add	r2, sp, #72	; 0x48
 8005172:	ed9d 0b04 	vldr	d0, [sp, #16]
 8005176:	4620      	mov	r0, r4
 8005178:	f001 f969 	bl	800644e <__d2b>
 800517c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8005180:	9001      	str	r0, [sp, #4]
 8005182:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005184:	2e00      	cmp	r6, #0
 8005186:	d046      	beq.n	8005216 <_dtoa_r+0x176>
 8005188:	9805      	ldr	r0, [sp, #20]
 800518a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800518e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005192:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8005196:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800519a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800519e:	2700      	movs	r7, #0
 80051a0:	ee07 aa90 	vmov	s15, sl
 80051a4:	ec43 2b16 	vmov	d6, r2, r3
 80051a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80051ac:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8005398 <_dtoa_r+0x2f8>
 80051b0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80051b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80051b8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80053a0 <_dtoa_r+0x300>
 80051bc:	eea7 6b04 	vfma.f64	d6, d7, d4
 80051c0:	eeb0 7b46 	vmov.f64	d7, d6
 80051c4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80053a8 <_dtoa_r+0x308>
 80051c8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80051cc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80051d0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80051d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d8:	ee16 ba90 	vmov	fp, s13
 80051dc:	d508      	bpl.n	80051f0 <_dtoa_r+0x150>
 80051de:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80051e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80051e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ea:	bf18      	it	ne
 80051ec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80051f0:	f1bb 0f16 	cmp.w	fp, #22
 80051f4:	d834      	bhi.n	8005260 <_dtoa_r+0x1c0>
 80051f6:	4b72      	ldr	r3, [pc, #456]	; (80053c0 <_dtoa_r+0x320>)
 80051f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80051fc:	ed93 7b00 	vldr	d7, [r3]
 8005200:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005204:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520c:	dd01      	ble.n	8005212 <_dtoa_r+0x172>
 800520e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005212:	2300      	movs	r3, #0
 8005214:	e025      	b.n	8005262 <_dtoa_r+0x1c2>
 8005216:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005218:	eb01 0a03 	add.w	sl, r1, r3
 800521c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8005220:	2b20      	cmp	r3, #32
 8005222:	dd17      	ble.n	8005254 <_dtoa_r+0x1b4>
 8005224:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005228:	9a02      	ldr	r2, [sp, #8]
 800522a:	409d      	lsls	r5, r3
 800522c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
 8005234:	432b      	orrs	r3, r5
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800523e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005242:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005246:	9805      	ldr	r0, [sp, #20]
 8005248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800524c:	2701      	movs	r7, #1
 800524e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8005252:	e7a5      	b.n	80051a0 <_dtoa_r+0x100>
 8005254:	9a02      	ldr	r2, [sp, #8]
 8005256:	f1c3 0320 	rsb	r3, r3, #32
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	e7ea      	b.n	8005236 <_dtoa_r+0x196>
 8005260:	2301      	movs	r3, #1
 8005262:	eba1 0a0a 	sub.w	sl, r1, sl
 8005266:	9310      	str	r3, [sp, #64]	; 0x40
 8005268:	f1ba 0301 	subs.w	r3, sl, #1
 800526c:	9307      	str	r3, [sp, #28]
 800526e:	bf43      	ittte	mi
 8005270:	2300      	movmi	r3, #0
 8005272:	f1ca 0a01 	rsbmi	sl, sl, #1
 8005276:	9307      	strmi	r3, [sp, #28]
 8005278:	f04f 0a00 	movpl.w	sl, #0
 800527c:	f1bb 0f00 	cmp.w	fp, #0
 8005280:	db19      	blt.n	80052b6 <_dtoa_r+0x216>
 8005282:	9b07      	ldr	r3, [sp, #28]
 8005284:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005288:	445b      	add	r3, fp
 800528a:	9307      	str	r3, [sp, #28]
 800528c:	f04f 0800 	mov.w	r8, #0
 8005290:	9b08      	ldr	r3, [sp, #32]
 8005292:	2b09      	cmp	r3, #9
 8005294:	d866      	bhi.n	8005364 <_dtoa_r+0x2c4>
 8005296:	2b05      	cmp	r3, #5
 8005298:	bfc4      	itt	gt
 800529a:	3b04      	subgt	r3, #4
 800529c:	9308      	strgt	r3, [sp, #32]
 800529e:	9b08      	ldr	r3, [sp, #32]
 80052a0:	f1a3 0302 	sub.w	r3, r3, #2
 80052a4:	bfcc      	ite	gt
 80052a6:	2500      	movgt	r5, #0
 80052a8:	2501      	movle	r5, #1
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d866      	bhi.n	800537c <_dtoa_r+0x2dc>
 80052ae:	e8df f003 	tbb	[pc, r3]
 80052b2:	5755      	.short	0x5755
 80052b4:	4909      	.short	0x4909
 80052b6:	2300      	movs	r3, #0
 80052b8:	ebaa 0a0b 	sub.w	sl, sl, fp
 80052bc:	f1cb 0800 	rsb	r8, fp, #0
 80052c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80052c2:	e7e5      	b.n	8005290 <_dtoa_r+0x1f0>
 80052c4:	2301      	movs	r3, #1
 80052c6:	9309      	str	r3, [sp, #36]	; 0x24
 80052c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	dd59      	ble.n	8005382 <_dtoa_r+0x2e2>
 80052ce:	9306      	str	r3, [sp, #24]
 80052d0:	4699      	mov	r9, r3
 80052d2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80052d4:	2200      	movs	r2, #0
 80052d6:	6072      	str	r2, [r6, #4]
 80052d8:	2204      	movs	r2, #4
 80052da:	f102 0014 	add.w	r0, r2, #20
 80052de:	4298      	cmp	r0, r3
 80052e0:	6871      	ldr	r1, [r6, #4]
 80052e2:	d953      	bls.n	800538c <_dtoa_r+0x2ec>
 80052e4:	4620      	mov	r0, r4
 80052e6:	f000 fe26 	bl	8005f36 <_Balloc>
 80052ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ec:	6030      	str	r0, [r6, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	f1b9 0f0e 	cmp.w	r9, #14
 80052f6:	f200 80c2 	bhi.w	800547e <_dtoa_r+0x3de>
 80052fa:	2d00      	cmp	r5, #0
 80052fc:	f000 80bf 	beq.w	800547e <_dtoa_r+0x3de>
 8005300:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005304:	f1bb 0f00 	cmp.w	fp, #0
 8005308:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800530c:	f340 80e6 	ble.w	80054dc <_dtoa_r+0x43c>
 8005310:	4a2b      	ldr	r2, [pc, #172]	; (80053c0 <_dtoa_r+0x320>)
 8005312:	f00b 030f 	and.w	r3, fp, #15
 8005316:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800531a:	ed93 7b00 	vldr	d7, [r3]
 800531e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8005322:	06da      	lsls	r2, r3, #27
 8005324:	f140 80d8 	bpl.w	80054d8 <_dtoa_r+0x438>
 8005328:	4a26      	ldr	r2, [pc, #152]	; (80053c4 <_dtoa_r+0x324>)
 800532a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800532e:	ed92 6b08 	vldr	d6, [r2, #32]
 8005332:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8005336:	ed8d 6b02 	vstr	d6, [sp, #8]
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	2203      	movs	r2, #3
 8005340:	4920      	ldr	r1, [pc, #128]	; (80053c4 <_dtoa_r+0x324>)
 8005342:	e04a      	b.n	80053da <_dtoa_r+0x33a>
 8005344:	2301      	movs	r3, #1
 8005346:	9309      	str	r3, [sp, #36]	; 0x24
 8005348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800534a:	445b      	add	r3, fp
 800534c:	f103 0901 	add.w	r9, r3, #1
 8005350:	9306      	str	r3, [sp, #24]
 8005352:	464b      	mov	r3, r9
 8005354:	2b01      	cmp	r3, #1
 8005356:	bfb8      	it	lt
 8005358:	2301      	movlt	r3, #1
 800535a:	e7ba      	b.n	80052d2 <_dtoa_r+0x232>
 800535c:	2300      	movs	r3, #0
 800535e:	e7b2      	b.n	80052c6 <_dtoa_r+0x226>
 8005360:	2300      	movs	r3, #0
 8005362:	e7f0      	b.n	8005346 <_dtoa_r+0x2a6>
 8005364:	2501      	movs	r5, #1
 8005366:	2300      	movs	r3, #0
 8005368:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800536c:	f04f 33ff 	mov.w	r3, #4294967295
 8005370:	9306      	str	r3, [sp, #24]
 8005372:	4699      	mov	r9, r3
 8005374:	2200      	movs	r2, #0
 8005376:	2312      	movs	r3, #18
 8005378:	920a      	str	r2, [sp, #40]	; 0x28
 800537a:	e7aa      	b.n	80052d2 <_dtoa_r+0x232>
 800537c:	2301      	movs	r3, #1
 800537e:	9309      	str	r3, [sp, #36]	; 0x24
 8005380:	e7f4      	b.n	800536c <_dtoa_r+0x2cc>
 8005382:	2301      	movs	r3, #1
 8005384:	9306      	str	r3, [sp, #24]
 8005386:	4699      	mov	r9, r3
 8005388:	461a      	mov	r2, r3
 800538a:	e7f5      	b.n	8005378 <_dtoa_r+0x2d8>
 800538c:	3101      	adds	r1, #1
 800538e:	6071      	str	r1, [r6, #4]
 8005390:	0052      	lsls	r2, r2, #1
 8005392:	e7a2      	b.n	80052da <_dtoa_r+0x23a>
 8005394:	f3af 8000 	nop.w
 8005398:	636f4361 	.word	0x636f4361
 800539c:	3fd287a7 	.word	0x3fd287a7
 80053a0:	8b60c8b3 	.word	0x8b60c8b3
 80053a4:	3fc68a28 	.word	0x3fc68a28
 80053a8:	509f79fb 	.word	0x509f79fb
 80053ac:	3fd34413 	.word	0x3fd34413
 80053b0:	7ff00000 	.word	0x7ff00000
 80053b4:	08006d4d 	.word	0x08006d4d
 80053b8:	08006d44 	.word	0x08006d44
 80053bc:	08006d21 	.word	0x08006d21
 80053c0:	08006de0 	.word	0x08006de0
 80053c4:	08006db8 	.word	0x08006db8
 80053c8:	07de      	lsls	r6, r3, #31
 80053ca:	d504      	bpl.n	80053d6 <_dtoa_r+0x336>
 80053cc:	ed91 6b00 	vldr	d6, [r1]
 80053d0:	3201      	adds	r2, #1
 80053d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053d6:	105b      	asrs	r3, r3, #1
 80053d8:	3108      	adds	r1, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f4      	bne.n	80053c8 <_dtoa_r+0x328>
 80053de:	ed9d 6b02 	vldr	d6, [sp, #8]
 80053e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80053e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80053ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80a7 	beq.w	8005540 <_dtoa_r+0x4a0>
 80053f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80053f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80053fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005402:	f140 809d 	bpl.w	8005540 <_dtoa_r+0x4a0>
 8005406:	f1b9 0f00 	cmp.w	r9, #0
 800540a:	f000 8099 	beq.w	8005540 <_dtoa_r+0x4a0>
 800540e:	9b06      	ldr	r3, [sp, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	dd30      	ble.n	8005476 <_dtoa_r+0x3d6>
 8005414:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005418:	ee27 7b06 	vmul.f64	d7, d7, d6
 800541c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005420:	9d06      	ldr	r5, [sp, #24]
 8005422:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005426:	3201      	adds	r2, #1
 8005428:	ed9d 6b02 	vldr	d6, [sp, #8]
 800542c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005430:	ee07 2a90 	vmov	s15, r2
 8005434:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005438:	eea7 5b06 	vfma.f64	d5, d7, d6
 800543c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8005440:	9a03      	ldr	r2, [sp, #12]
 8005442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005446:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800544a:	2d00      	cmp	r5, #0
 800544c:	d17b      	bne.n	8005546 <_dtoa_r+0x4a6>
 800544e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005452:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005456:	ec41 0b17 	vmov	d7, r0, r1
 800545a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800545e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005462:	f300 8253 	bgt.w	800590c <_dtoa_r+0x86c>
 8005466:	eeb1 7b47 	vneg.f64	d7, d7
 800546a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800546e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005472:	f100 8249 	bmi.w	8005908 <_dtoa_r+0x868>
 8005476:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800547a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800547e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005480:	2b00      	cmp	r3, #0
 8005482:	f2c0 8119 	blt.w	80056b8 <_dtoa_r+0x618>
 8005486:	f1bb 0f0e 	cmp.w	fp, #14
 800548a:	f300 8115 	bgt.w	80056b8 <_dtoa_r+0x618>
 800548e:	4bc3      	ldr	r3, [pc, #780]	; (800579c <_dtoa_r+0x6fc>)
 8005490:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005494:	ed93 6b00 	vldr	d6, [r3]
 8005498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	f280 80ba 	bge.w	8005614 <_dtoa_r+0x574>
 80054a0:	f1b9 0f00 	cmp.w	r9, #0
 80054a4:	f300 80b6 	bgt.w	8005614 <_dtoa_r+0x574>
 80054a8:	f040 822d 	bne.w	8005906 <_dtoa_r+0x866>
 80054ac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80054b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80054b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80054b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c0:	464d      	mov	r5, r9
 80054c2:	464f      	mov	r7, r9
 80054c4:	f280 8204 	bge.w	80058d0 <_dtoa_r+0x830>
 80054c8:	9b04      	ldr	r3, [sp, #16]
 80054ca:	9a04      	ldr	r2, [sp, #16]
 80054cc:	1c5e      	adds	r6, r3, #1
 80054ce:	2331      	movs	r3, #49	; 0x31
 80054d0:	7013      	strb	r3, [r2, #0]
 80054d2:	f10b 0b01 	add.w	fp, fp, #1
 80054d6:	e1ff      	b.n	80058d8 <_dtoa_r+0x838>
 80054d8:	2202      	movs	r2, #2
 80054da:	e731      	b.n	8005340 <_dtoa_r+0x2a0>
 80054dc:	d02e      	beq.n	800553c <_dtoa_r+0x49c>
 80054de:	f1cb 0300 	rsb	r3, fp, #0
 80054e2:	4aae      	ldr	r2, [pc, #696]	; (800579c <_dtoa_r+0x6fc>)
 80054e4:	f003 010f 	and.w	r1, r3, #15
 80054e8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80054ec:	ed92 7b00 	vldr	d7, [r2]
 80054f0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80054f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80054f8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80054fc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8005500:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005504:	49a6      	ldr	r1, [pc, #664]	; (80057a0 <_dtoa_r+0x700>)
 8005506:	111b      	asrs	r3, r3, #4
 8005508:	2000      	movs	r0, #0
 800550a:	2202      	movs	r2, #2
 800550c:	b93b      	cbnz	r3, 800551e <_dtoa_r+0x47e>
 800550e:	2800      	cmp	r0, #0
 8005510:	f43f af6b 	beq.w	80053ea <_dtoa_r+0x34a>
 8005514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800551c:	e765      	b.n	80053ea <_dtoa_r+0x34a>
 800551e:	07dd      	lsls	r5, r3, #31
 8005520:	d509      	bpl.n	8005536 <_dtoa_r+0x496>
 8005522:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8005526:	ed91 7b00 	vldr	d7, [r1]
 800552a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800552e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005532:	3201      	adds	r2, #1
 8005534:	2001      	movs	r0, #1
 8005536:	105b      	asrs	r3, r3, #1
 8005538:	3108      	adds	r1, #8
 800553a:	e7e7      	b.n	800550c <_dtoa_r+0x46c>
 800553c:	2202      	movs	r2, #2
 800553e:	e754      	b.n	80053ea <_dtoa_r+0x34a>
 8005540:	465b      	mov	r3, fp
 8005542:	464d      	mov	r5, r9
 8005544:	e770      	b.n	8005428 <_dtoa_r+0x388>
 8005546:	4a95      	ldr	r2, [pc, #596]	; (800579c <_dtoa_r+0x6fc>)
 8005548:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800554c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005552:	ec41 0b17 	vmov	d7, r0, r1
 8005556:	b35a      	cbz	r2, 80055b0 <_dtoa_r+0x510>
 8005558:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800555c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005560:	9e04      	ldr	r6, [sp, #16]
 8005562:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005566:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800556a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800556e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005572:	ee14 2a90 	vmov	r2, s9
 8005576:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800557a:	3230      	adds	r2, #48	; 0x30
 800557c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005580:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005588:	f806 2b01 	strb.w	r2, [r6], #1
 800558c:	d43b      	bmi.n	8005606 <_dtoa_r+0x566>
 800558e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005592:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559a:	d472      	bmi.n	8005682 <_dtoa_r+0x5e2>
 800559c:	9a04      	ldr	r2, [sp, #16]
 800559e:	1ab2      	subs	r2, r6, r2
 80055a0:	4295      	cmp	r5, r2
 80055a2:	f77f af68 	ble.w	8005476 <_dtoa_r+0x3d6>
 80055a6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80055aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80055ae:	e7de      	b.n	800556e <_dtoa_r+0x4ce>
 80055b0:	9a04      	ldr	r2, [sp, #16]
 80055b2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80055b6:	1956      	adds	r6, r2, r5
 80055b8:	4611      	mov	r1, r2
 80055ba:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80055be:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80055c2:	ee14 2a90 	vmov	r2, s9
 80055c6:	3230      	adds	r2, #48	; 0x30
 80055c8:	f801 2b01 	strb.w	r2, [r1], #1
 80055cc:	42b1      	cmp	r1, r6
 80055ce:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80055d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80055d6:	d11a      	bne.n	800560e <_dtoa_r+0x56e>
 80055d8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80055dc:	ee37 4b05 	vadd.f64	d4, d7, d5
 80055e0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80055e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e8:	dc4b      	bgt.n	8005682 <_dtoa_r+0x5e2>
 80055ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80055ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80055f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f6:	f57f af3e 	bpl.w	8005476 <_dtoa_r+0x3d6>
 80055fa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80055fe:	2a30      	cmp	r2, #48	; 0x30
 8005600:	f106 31ff 	add.w	r1, r6, #4294967295
 8005604:	d001      	beq.n	800560a <_dtoa_r+0x56a>
 8005606:	469b      	mov	fp, r3
 8005608:	e02a      	b.n	8005660 <_dtoa_r+0x5c0>
 800560a:	460e      	mov	r6, r1
 800560c:	e7f5      	b.n	80055fa <_dtoa_r+0x55a>
 800560e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005612:	e7d4      	b.n	80055be <_dtoa_r+0x51e>
 8005614:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005618:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800561c:	9e04      	ldr	r6, [sp, #16]
 800561e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005622:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005626:	ee15 3a10 	vmov	r3, s10
 800562a:	3330      	adds	r3, #48	; 0x30
 800562c:	f806 3b01 	strb.w	r3, [r6], #1
 8005630:	9b04      	ldr	r3, [sp, #16]
 8005632:	1af3      	subs	r3, r6, r3
 8005634:	4599      	cmp	r9, r3
 8005636:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800563a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800563e:	d133      	bne.n	80056a8 <_dtoa_r+0x608>
 8005640:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005644:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564c:	dc18      	bgt.n	8005680 <_dtoa_r+0x5e0>
 800564e:	eeb4 7b46 	vcmp.f64	d7, d6
 8005652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005656:	d103      	bne.n	8005660 <_dtoa_r+0x5c0>
 8005658:	ee15 3a10 	vmov	r3, s10
 800565c:	07db      	lsls	r3, r3, #31
 800565e:	d40f      	bmi.n	8005680 <_dtoa_r+0x5e0>
 8005660:	9901      	ldr	r1, [sp, #4]
 8005662:	4620      	mov	r0, r4
 8005664:	f000 fc9b 	bl	8005f9e <_Bfree>
 8005668:	2300      	movs	r3, #0
 800566a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800566c:	7033      	strb	r3, [r6, #0]
 800566e:	f10b 0301 	add.w	r3, fp, #1
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005676:	2b00      	cmp	r3, #0
 8005678:	f43f ad5b 	beq.w	8005132 <_dtoa_r+0x92>
 800567c:	601e      	str	r6, [r3, #0]
 800567e:	e558      	b.n	8005132 <_dtoa_r+0x92>
 8005680:	465b      	mov	r3, fp
 8005682:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005686:	2939      	cmp	r1, #57	; 0x39
 8005688:	f106 32ff 	add.w	r2, r6, #4294967295
 800568c:	d106      	bne.n	800569c <_dtoa_r+0x5fc>
 800568e:	9904      	ldr	r1, [sp, #16]
 8005690:	4291      	cmp	r1, r2
 8005692:	d107      	bne.n	80056a4 <_dtoa_r+0x604>
 8005694:	2230      	movs	r2, #48	; 0x30
 8005696:	700a      	strb	r2, [r1, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	460a      	mov	r2, r1
 800569c:	7811      	ldrb	r1, [r2, #0]
 800569e:	3101      	adds	r1, #1
 80056a0:	7011      	strb	r1, [r2, #0]
 80056a2:	e7b0      	b.n	8005606 <_dtoa_r+0x566>
 80056a4:	4616      	mov	r6, r2
 80056a6:	e7ec      	b.n	8005682 <_dtoa_r+0x5e2>
 80056a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80056ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80056b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b4:	d1b3      	bne.n	800561e <_dtoa_r+0x57e>
 80056b6:	e7d3      	b.n	8005660 <_dtoa_r+0x5c0>
 80056b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ba:	2a00      	cmp	r2, #0
 80056bc:	f000 808d 	beq.w	80057da <_dtoa_r+0x73a>
 80056c0:	9a08      	ldr	r2, [sp, #32]
 80056c2:	2a01      	cmp	r2, #1
 80056c4:	dc72      	bgt.n	80057ac <_dtoa_r+0x70c>
 80056c6:	2f00      	cmp	r7, #0
 80056c8:	d06c      	beq.n	80057a4 <_dtoa_r+0x704>
 80056ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056ce:	4645      	mov	r5, r8
 80056d0:	4656      	mov	r6, sl
 80056d2:	9a07      	ldr	r2, [sp, #28]
 80056d4:	2101      	movs	r1, #1
 80056d6:	441a      	add	r2, r3
 80056d8:	4620      	mov	r0, r4
 80056da:	449a      	add	sl, r3
 80056dc:	9207      	str	r2, [sp, #28]
 80056de:	f000 fcfe 	bl	80060de <__i2b>
 80056e2:	4607      	mov	r7, r0
 80056e4:	2e00      	cmp	r6, #0
 80056e6:	dd0b      	ble.n	8005700 <_dtoa_r+0x660>
 80056e8:	9b07      	ldr	r3, [sp, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	dd08      	ble.n	8005700 <_dtoa_r+0x660>
 80056ee:	42b3      	cmp	r3, r6
 80056f0:	9a07      	ldr	r2, [sp, #28]
 80056f2:	bfa8      	it	ge
 80056f4:	4633      	movge	r3, r6
 80056f6:	ebaa 0a03 	sub.w	sl, sl, r3
 80056fa:	1af6      	subs	r6, r6, r3
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	9307      	str	r3, [sp, #28]
 8005700:	f1b8 0f00 	cmp.w	r8, #0
 8005704:	d01d      	beq.n	8005742 <_dtoa_r+0x6a2>
 8005706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d06a      	beq.n	80057e2 <_dtoa_r+0x742>
 800570c:	b18d      	cbz	r5, 8005732 <_dtoa_r+0x692>
 800570e:	4639      	mov	r1, r7
 8005710:	462a      	mov	r2, r5
 8005712:	4620      	mov	r0, r4
 8005714:	f000 fd82 	bl	800621c <__pow5mult>
 8005718:	9a01      	ldr	r2, [sp, #4]
 800571a:	4601      	mov	r1, r0
 800571c:	4607      	mov	r7, r0
 800571e:	4620      	mov	r0, r4
 8005720:	f000 fce6 	bl	80060f0 <__multiply>
 8005724:	9901      	ldr	r1, [sp, #4]
 8005726:	900c      	str	r0, [sp, #48]	; 0x30
 8005728:	4620      	mov	r0, r4
 800572a:	f000 fc38 	bl	8005f9e <_Bfree>
 800572e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	ebb8 0205 	subs.w	r2, r8, r5
 8005736:	d004      	beq.n	8005742 <_dtoa_r+0x6a2>
 8005738:	9901      	ldr	r1, [sp, #4]
 800573a:	4620      	mov	r0, r4
 800573c:	f000 fd6e 	bl	800621c <__pow5mult>
 8005740:	9001      	str	r0, [sp, #4]
 8005742:	2101      	movs	r1, #1
 8005744:	4620      	mov	r0, r4
 8005746:	f000 fcca 	bl	80060de <__i2b>
 800574a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800574c:	4605      	mov	r5, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 81ca 	beq.w	8005ae8 <_dtoa_r+0xa48>
 8005754:	461a      	mov	r2, r3
 8005756:	4601      	mov	r1, r0
 8005758:	4620      	mov	r0, r4
 800575a:	f000 fd5f 	bl	800621c <__pow5mult>
 800575e:	9b08      	ldr	r3, [sp, #32]
 8005760:	2b01      	cmp	r3, #1
 8005762:	4605      	mov	r5, r0
 8005764:	dc44      	bgt.n	80057f0 <_dtoa_r+0x750>
 8005766:	9b02      	ldr	r3, [sp, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d13c      	bne.n	80057e6 <_dtoa_r+0x746>
 800576c:	9b03      	ldr	r3, [sp, #12]
 800576e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005772:	2b00      	cmp	r3, #0
 8005774:	d137      	bne.n	80057e6 <_dtoa_r+0x746>
 8005776:	9b03      	ldr	r3, [sp, #12]
 8005778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800577c:	0d1b      	lsrs	r3, r3, #20
 800577e:	051b      	lsls	r3, r3, #20
 8005780:	2b00      	cmp	r3, #0
 8005782:	d033      	beq.n	80057ec <_dtoa_r+0x74c>
 8005784:	9b07      	ldr	r3, [sp, #28]
 8005786:	3301      	adds	r3, #1
 8005788:	f10a 0a01 	add.w	sl, sl, #1
 800578c:	9307      	str	r3, [sp, #28]
 800578e:	f04f 0801 	mov.w	r8, #1
 8005792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005794:	bb73      	cbnz	r3, 80057f4 <_dtoa_r+0x754>
 8005796:	2001      	movs	r0, #1
 8005798:	e034      	b.n	8005804 <_dtoa_r+0x764>
 800579a:	bf00      	nop
 800579c:	08006de0 	.word	0x08006de0
 80057a0:	08006db8 	.word	0x08006db8
 80057a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057aa:	e790      	b.n	80056ce <_dtoa_r+0x62e>
 80057ac:	f109 35ff 	add.w	r5, r9, #4294967295
 80057b0:	45a8      	cmp	r8, r5
 80057b2:	bfbf      	itttt	lt
 80057b4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80057b6:	eba5 0808 	sublt.w	r8, r5, r8
 80057ba:	4443      	addlt	r3, r8
 80057bc:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80057be:	bfb6      	itet	lt
 80057c0:	46a8      	movlt	r8, r5
 80057c2:	eba8 0505 	subge.w	r5, r8, r5
 80057c6:	2500      	movlt	r5, #0
 80057c8:	f1b9 0f00 	cmp.w	r9, #0
 80057cc:	bfb9      	ittee	lt
 80057ce:	ebaa 0609 	sublt.w	r6, sl, r9
 80057d2:	2300      	movlt	r3, #0
 80057d4:	4656      	movge	r6, sl
 80057d6:	464b      	movge	r3, r9
 80057d8:	e77b      	b.n	80056d2 <_dtoa_r+0x632>
 80057da:	4645      	mov	r5, r8
 80057dc:	4656      	mov	r6, sl
 80057de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80057e0:	e780      	b.n	80056e4 <_dtoa_r+0x644>
 80057e2:	4642      	mov	r2, r8
 80057e4:	e7a8      	b.n	8005738 <_dtoa_r+0x698>
 80057e6:	f04f 0800 	mov.w	r8, #0
 80057ea:	e7d2      	b.n	8005792 <_dtoa_r+0x6f2>
 80057ec:	4698      	mov	r8, r3
 80057ee:	e7d0      	b.n	8005792 <_dtoa_r+0x6f2>
 80057f0:	f04f 0800 	mov.w	r8, #0
 80057f4:	692b      	ldr	r3, [r5, #16]
 80057f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80057fa:	6918      	ldr	r0, [r3, #16]
 80057fc:	f000 fc21 	bl	8006042 <__hi0bits>
 8005800:	f1c0 0020 	rsb	r0, r0, #32
 8005804:	9b07      	ldr	r3, [sp, #28]
 8005806:	4418      	add	r0, r3
 8005808:	f010 001f 	ands.w	r0, r0, #31
 800580c:	d047      	beq.n	800589e <_dtoa_r+0x7fe>
 800580e:	f1c0 0320 	rsb	r3, r0, #32
 8005812:	2b04      	cmp	r3, #4
 8005814:	dd3b      	ble.n	800588e <_dtoa_r+0x7ee>
 8005816:	9b07      	ldr	r3, [sp, #28]
 8005818:	f1c0 001c 	rsb	r0, r0, #28
 800581c:	4482      	add	sl, r0
 800581e:	4406      	add	r6, r0
 8005820:	4403      	add	r3, r0
 8005822:	9307      	str	r3, [sp, #28]
 8005824:	f1ba 0f00 	cmp.w	sl, #0
 8005828:	dd05      	ble.n	8005836 <_dtoa_r+0x796>
 800582a:	4652      	mov	r2, sl
 800582c:	9901      	ldr	r1, [sp, #4]
 800582e:	4620      	mov	r0, r4
 8005830:	f000 fd42 	bl	80062b8 <__lshift>
 8005834:	9001      	str	r0, [sp, #4]
 8005836:	9b07      	ldr	r3, [sp, #28]
 8005838:	2b00      	cmp	r3, #0
 800583a:	dd05      	ble.n	8005848 <_dtoa_r+0x7a8>
 800583c:	4629      	mov	r1, r5
 800583e:	461a      	mov	r2, r3
 8005840:	4620      	mov	r0, r4
 8005842:	f000 fd39 	bl	80062b8 <__lshift>
 8005846:	4605      	mov	r5, r0
 8005848:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800584a:	b353      	cbz	r3, 80058a2 <_dtoa_r+0x802>
 800584c:	4629      	mov	r1, r5
 800584e:	9801      	ldr	r0, [sp, #4]
 8005850:	f000 fd86 	bl	8006360 <__mcmp>
 8005854:	2800      	cmp	r0, #0
 8005856:	da24      	bge.n	80058a2 <_dtoa_r+0x802>
 8005858:	2300      	movs	r3, #0
 800585a:	220a      	movs	r2, #10
 800585c:	9901      	ldr	r1, [sp, #4]
 800585e:	4620      	mov	r0, r4
 8005860:	f000 fbb4 	bl	8005fcc <__multadd>
 8005864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005866:	9001      	str	r0, [sp, #4]
 8005868:	f10b 3bff 	add.w	fp, fp, #4294967295
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8142 	beq.w	8005af6 <_dtoa_r+0xa56>
 8005872:	2300      	movs	r3, #0
 8005874:	4639      	mov	r1, r7
 8005876:	220a      	movs	r2, #10
 8005878:	4620      	mov	r0, r4
 800587a:	f000 fba7 	bl	8005fcc <__multadd>
 800587e:	9b06      	ldr	r3, [sp, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	4607      	mov	r7, r0
 8005884:	dc4b      	bgt.n	800591e <_dtoa_r+0x87e>
 8005886:	9b08      	ldr	r3, [sp, #32]
 8005888:	2b02      	cmp	r3, #2
 800588a:	dd48      	ble.n	800591e <_dtoa_r+0x87e>
 800588c:	e011      	b.n	80058b2 <_dtoa_r+0x812>
 800588e:	d0c9      	beq.n	8005824 <_dtoa_r+0x784>
 8005890:	9a07      	ldr	r2, [sp, #28]
 8005892:	331c      	adds	r3, #28
 8005894:	441a      	add	r2, r3
 8005896:	449a      	add	sl, r3
 8005898:	441e      	add	r6, r3
 800589a:	4613      	mov	r3, r2
 800589c:	e7c1      	b.n	8005822 <_dtoa_r+0x782>
 800589e:	4603      	mov	r3, r0
 80058a0:	e7f6      	b.n	8005890 <_dtoa_r+0x7f0>
 80058a2:	f1b9 0f00 	cmp.w	r9, #0
 80058a6:	dc34      	bgt.n	8005912 <_dtoa_r+0x872>
 80058a8:	9b08      	ldr	r3, [sp, #32]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	dd31      	ble.n	8005912 <_dtoa_r+0x872>
 80058ae:	f8cd 9018 	str.w	r9, [sp, #24]
 80058b2:	9b06      	ldr	r3, [sp, #24]
 80058b4:	b963      	cbnz	r3, 80058d0 <_dtoa_r+0x830>
 80058b6:	4629      	mov	r1, r5
 80058b8:	2205      	movs	r2, #5
 80058ba:	4620      	mov	r0, r4
 80058bc:	f000 fb86 	bl	8005fcc <__multadd>
 80058c0:	4601      	mov	r1, r0
 80058c2:	4605      	mov	r5, r0
 80058c4:	9801      	ldr	r0, [sp, #4]
 80058c6:	f000 fd4b 	bl	8006360 <__mcmp>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	f73f adfc 	bgt.w	80054c8 <_dtoa_r+0x428>
 80058d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d2:	9e04      	ldr	r6, [sp, #16]
 80058d4:	ea6f 0b03 	mvn.w	fp, r3
 80058d8:	f04f 0900 	mov.w	r9, #0
 80058dc:	4629      	mov	r1, r5
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 fb5d 	bl	8005f9e <_Bfree>
 80058e4:	2f00      	cmp	r7, #0
 80058e6:	f43f aebb 	beq.w	8005660 <_dtoa_r+0x5c0>
 80058ea:	f1b9 0f00 	cmp.w	r9, #0
 80058ee:	d005      	beq.n	80058fc <_dtoa_r+0x85c>
 80058f0:	45b9      	cmp	r9, r7
 80058f2:	d003      	beq.n	80058fc <_dtoa_r+0x85c>
 80058f4:	4649      	mov	r1, r9
 80058f6:	4620      	mov	r0, r4
 80058f8:	f000 fb51 	bl	8005f9e <_Bfree>
 80058fc:	4639      	mov	r1, r7
 80058fe:	4620      	mov	r0, r4
 8005900:	f000 fb4d 	bl	8005f9e <_Bfree>
 8005904:	e6ac      	b.n	8005660 <_dtoa_r+0x5c0>
 8005906:	2500      	movs	r5, #0
 8005908:	462f      	mov	r7, r5
 800590a:	e7e1      	b.n	80058d0 <_dtoa_r+0x830>
 800590c:	469b      	mov	fp, r3
 800590e:	462f      	mov	r7, r5
 8005910:	e5da      	b.n	80054c8 <_dtoa_r+0x428>
 8005912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005914:	f8cd 9018 	str.w	r9, [sp, #24]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80f3 	beq.w	8005b04 <_dtoa_r+0xa64>
 800591e:	2e00      	cmp	r6, #0
 8005920:	dd05      	ble.n	800592e <_dtoa_r+0x88e>
 8005922:	4639      	mov	r1, r7
 8005924:	4632      	mov	r2, r6
 8005926:	4620      	mov	r0, r4
 8005928:	f000 fcc6 	bl	80062b8 <__lshift>
 800592c:	4607      	mov	r7, r0
 800592e:	f1b8 0f00 	cmp.w	r8, #0
 8005932:	d04c      	beq.n	80059ce <_dtoa_r+0x92e>
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4620      	mov	r0, r4
 8005938:	f000 fafd 	bl	8005f36 <_Balloc>
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	3202      	adds	r2, #2
 8005940:	4606      	mov	r6, r0
 8005942:	0092      	lsls	r2, r2, #2
 8005944:	f107 010c 	add.w	r1, r7, #12
 8005948:	300c      	adds	r0, #12
 800594a:	f000 fae9 	bl	8005f20 <memcpy>
 800594e:	2201      	movs	r2, #1
 8005950:	4631      	mov	r1, r6
 8005952:	4620      	mov	r0, r4
 8005954:	f000 fcb0 	bl	80062b8 <__lshift>
 8005958:	9b02      	ldr	r3, [sp, #8]
 800595a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	46b9      	mov	r9, r7
 8005964:	9307      	str	r3, [sp, #28]
 8005966:	4607      	mov	r7, r0
 8005968:	4629      	mov	r1, r5
 800596a:	9801      	ldr	r0, [sp, #4]
 800596c:	f7ff fb0a 	bl	8004f84 <quorem>
 8005970:	4649      	mov	r1, r9
 8005972:	4606      	mov	r6, r0
 8005974:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005978:	9801      	ldr	r0, [sp, #4]
 800597a:	f000 fcf1 	bl	8006360 <__mcmp>
 800597e:	463a      	mov	r2, r7
 8005980:	9002      	str	r0, [sp, #8]
 8005982:	4629      	mov	r1, r5
 8005984:	4620      	mov	r0, r4
 8005986:	f000 fd05 	bl	8006394 <__mdiff>
 800598a:	68c3      	ldr	r3, [r0, #12]
 800598c:	4602      	mov	r2, r0
 800598e:	bb03      	cbnz	r3, 80059d2 <_dtoa_r+0x932>
 8005990:	4601      	mov	r1, r0
 8005992:	9009      	str	r0, [sp, #36]	; 0x24
 8005994:	9801      	ldr	r0, [sp, #4]
 8005996:	f000 fce3 	bl	8006360 <__mcmp>
 800599a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800599c:	4603      	mov	r3, r0
 800599e:	4611      	mov	r1, r2
 80059a0:	4620      	mov	r0, r4
 80059a2:	9309      	str	r3, [sp, #36]	; 0x24
 80059a4:	f000 fafb 	bl	8005f9e <_Bfree>
 80059a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059aa:	b9a3      	cbnz	r3, 80059d6 <_dtoa_r+0x936>
 80059ac:	9a08      	ldr	r2, [sp, #32]
 80059ae:	b992      	cbnz	r2, 80059d6 <_dtoa_r+0x936>
 80059b0:	9a07      	ldr	r2, [sp, #28]
 80059b2:	b982      	cbnz	r2, 80059d6 <_dtoa_r+0x936>
 80059b4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80059b8:	d029      	beq.n	8005a0e <_dtoa_r+0x96e>
 80059ba:	9b02      	ldr	r3, [sp, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dd01      	ble.n	80059c4 <_dtoa_r+0x924>
 80059c0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 80059c4:	f10a 0601 	add.w	r6, sl, #1
 80059c8:	f88a 8000 	strb.w	r8, [sl]
 80059cc:	e786      	b.n	80058dc <_dtoa_r+0x83c>
 80059ce:	4638      	mov	r0, r7
 80059d0:	e7c2      	b.n	8005958 <_dtoa_r+0x8b8>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e7e3      	b.n	800599e <_dtoa_r+0x8fe>
 80059d6:	9a02      	ldr	r2, [sp, #8]
 80059d8:	2a00      	cmp	r2, #0
 80059da:	db04      	blt.n	80059e6 <_dtoa_r+0x946>
 80059dc:	d124      	bne.n	8005a28 <_dtoa_r+0x988>
 80059de:	9a08      	ldr	r2, [sp, #32]
 80059e0:	bb12      	cbnz	r2, 8005a28 <_dtoa_r+0x988>
 80059e2:	9a07      	ldr	r2, [sp, #28]
 80059e4:	bb02      	cbnz	r2, 8005a28 <_dtoa_r+0x988>
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	ddec      	ble.n	80059c4 <_dtoa_r+0x924>
 80059ea:	2201      	movs	r2, #1
 80059ec:	9901      	ldr	r1, [sp, #4]
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 fc62 	bl	80062b8 <__lshift>
 80059f4:	4629      	mov	r1, r5
 80059f6:	9001      	str	r0, [sp, #4]
 80059f8:	f000 fcb2 	bl	8006360 <__mcmp>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	dc03      	bgt.n	8005a08 <_dtoa_r+0x968>
 8005a00:	d1e0      	bne.n	80059c4 <_dtoa_r+0x924>
 8005a02:	f018 0f01 	tst.w	r8, #1
 8005a06:	d0dd      	beq.n	80059c4 <_dtoa_r+0x924>
 8005a08:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005a0c:	d1d8      	bne.n	80059c0 <_dtoa_r+0x920>
 8005a0e:	2339      	movs	r3, #57	; 0x39
 8005a10:	f10a 0601 	add.w	r6, sl, #1
 8005a14:	f88a 3000 	strb.w	r3, [sl]
 8005a18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a1c:	2b39      	cmp	r3, #57	; 0x39
 8005a1e:	f106 32ff 	add.w	r2, r6, #4294967295
 8005a22:	d04c      	beq.n	8005abe <_dtoa_r+0xa1e>
 8005a24:	3301      	adds	r3, #1
 8005a26:	e051      	b.n	8005acc <_dtoa_r+0xa2c>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f10a 0601 	add.w	r6, sl, #1
 8005a2e:	dd05      	ble.n	8005a3c <_dtoa_r+0x99c>
 8005a30:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005a34:	d0eb      	beq.n	8005a0e <_dtoa_r+0x96e>
 8005a36:	f108 0801 	add.w	r8, r8, #1
 8005a3a:	e7c5      	b.n	80059c8 <_dtoa_r+0x928>
 8005a3c:	9b04      	ldr	r3, [sp, #16]
 8005a3e:	9a06      	ldr	r2, [sp, #24]
 8005a40:	f806 8c01 	strb.w	r8, [r6, #-1]
 8005a44:	1af3      	subs	r3, r6, r3
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d021      	beq.n	8005a8e <_dtoa_r+0x9ee>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	220a      	movs	r2, #10
 8005a4e:	9901      	ldr	r1, [sp, #4]
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 fabb 	bl	8005fcc <__multadd>
 8005a56:	45b9      	cmp	r9, r7
 8005a58:	9001      	str	r0, [sp, #4]
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	f04f 020a 	mov.w	r2, #10
 8005a62:	4649      	mov	r1, r9
 8005a64:	4620      	mov	r0, r4
 8005a66:	d105      	bne.n	8005a74 <_dtoa_r+0x9d4>
 8005a68:	f000 fab0 	bl	8005fcc <__multadd>
 8005a6c:	4681      	mov	r9, r0
 8005a6e:	4607      	mov	r7, r0
 8005a70:	46b2      	mov	sl, r6
 8005a72:	e779      	b.n	8005968 <_dtoa_r+0x8c8>
 8005a74:	f000 faaa 	bl	8005fcc <__multadd>
 8005a78:	4639      	mov	r1, r7
 8005a7a:	4681      	mov	r9, r0
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	220a      	movs	r2, #10
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 faa3 	bl	8005fcc <__multadd>
 8005a86:	4607      	mov	r7, r0
 8005a88:	e7f2      	b.n	8005a70 <_dtoa_r+0x9d0>
 8005a8a:	f04f 0900 	mov.w	r9, #0
 8005a8e:	2201      	movs	r2, #1
 8005a90:	9901      	ldr	r1, [sp, #4]
 8005a92:	4620      	mov	r0, r4
 8005a94:	f000 fc10 	bl	80062b8 <__lshift>
 8005a98:	4629      	mov	r1, r5
 8005a9a:	9001      	str	r0, [sp, #4]
 8005a9c:	f000 fc60 	bl	8006360 <__mcmp>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	dcb9      	bgt.n	8005a18 <_dtoa_r+0x978>
 8005aa4:	d102      	bne.n	8005aac <_dtoa_r+0xa0c>
 8005aa6:	f018 0f01 	tst.w	r8, #1
 8005aaa:	d1b5      	bne.n	8005a18 <_dtoa_r+0x978>
 8005aac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ab0:	2b30      	cmp	r3, #48	; 0x30
 8005ab2:	f106 32ff 	add.w	r2, r6, #4294967295
 8005ab6:	f47f af11 	bne.w	80058dc <_dtoa_r+0x83c>
 8005aba:	4616      	mov	r6, r2
 8005abc:	e7f6      	b.n	8005aac <_dtoa_r+0xa0c>
 8005abe:	9b04      	ldr	r3, [sp, #16]
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d105      	bne.n	8005ad0 <_dtoa_r+0xa30>
 8005ac4:	9a04      	ldr	r2, [sp, #16]
 8005ac6:	f10b 0b01 	add.w	fp, fp, #1
 8005aca:	2331      	movs	r3, #49	; 0x31
 8005acc:	7013      	strb	r3, [r2, #0]
 8005ace:	e705      	b.n	80058dc <_dtoa_r+0x83c>
 8005ad0:	4616      	mov	r6, r2
 8005ad2:	e7a1      	b.n	8005a18 <_dtoa_r+0x978>
 8005ad4:	4b16      	ldr	r3, [pc, #88]	; (8005b30 <_dtoa_r+0xa90>)
 8005ad6:	f7ff bb48 	b.w	800516a <_dtoa_r+0xca>
 8005ada:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f47f ab23 	bne.w	8005128 <_dtoa_r+0x88>
 8005ae2:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <_dtoa_r+0xa94>)
 8005ae4:	f7ff bb41 	b.w	800516a <_dtoa_r+0xca>
 8005ae8:	9b08      	ldr	r3, [sp, #32]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	f77f ae3b 	ble.w	8005766 <_dtoa_r+0x6c6>
 8005af0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005af4:	e64f      	b.n	8005796 <_dtoa_r+0x6f6>
 8005af6:	9b06      	ldr	r3, [sp, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	dc03      	bgt.n	8005b04 <_dtoa_r+0xa64>
 8005afc:	9b08      	ldr	r3, [sp, #32]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	f73f aed7 	bgt.w	80058b2 <_dtoa_r+0x812>
 8005b04:	9e04      	ldr	r6, [sp, #16]
 8005b06:	9801      	ldr	r0, [sp, #4]
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7ff fa3b 	bl	8004f84 <quorem>
 8005b0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b12:	f806 8b01 	strb.w	r8, [r6], #1
 8005b16:	9b04      	ldr	r3, [sp, #16]
 8005b18:	9a06      	ldr	r2, [sp, #24]
 8005b1a:	1af3      	subs	r3, r6, r3
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	ddb4      	ble.n	8005a8a <_dtoa_r+0x9ea>
 8005b20:	2300      	movs	r3, #0
 8005b22:	220a      	movs	r2, #10
 8005b24:	9901      	ldr	r1, [sp, #4]
 8005b26:	4620      	mov	r0, r4
 8005b28:	f000 fa50 	bl	8005fcc <__multadd>
 8005b2c:	9001      	str	r0, [sp, #4]
 8005b2e:	e7ea      	b.n	8005b06 <_dtoa_r+0xa66>
 8005b30:	08006d20 	.word	0x08006d20
 8005b34:	08006d44 	.word	0x08006d44

08005b38 <__sflush_r>:
 8005b38:	898a      	ldrh	r2, [r1, #12]
 8005b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b3e:	4605      	mov	r5, r0
 8005b40:	0710      	lsls	r0, r2, #28
 8005b42:	460c      	mov	r4, r1
 8005b44:	d458      	bmi.n	8005bf8 <__sflush_r+0xc0>
 8005b46:	684b      	ldr	r3, [r1, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	dc05      	bgt.n	8005b58 <__sflush_r+0x20>
 8005b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	dc02      	bgt.n	8005b58 <__sflush_r+0x20>
 8005b52:	2000      	movs	r0, #0
 8005b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	d0f9      	beq.n	8005b52 <__sflush_r+0x1a>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b64:	682f      	ldr	r7, [r5, #0]
 8005b66:	6a21      	ldr	r1, [r4, #32]
 8005b68:	602b      	str	r3, [r5, #0]
 8005b6a:	d032      	beq.n	8005bd2 <__sflush_r+0x9a>
 8005b6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	075a      	lsls	r2, r3, #29
 8005b72:	d505      	bpl.n	8005b80 <__sflush_r+0x48>
 8005b74:	6863      	ldr	r3, [r4, #4]
 8005b76:	1ac0      	subs	r0, r0, r3
 8005b78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b7a:	b10b      	cbz	r3, 8005b80 <__sflush_r+0x48>
 8005b7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b7e:	1ac0      	subs	r0, r0, r3
 8005b80:	2300      	movs	r3, #0
 8005b82:	4602      	mov	r2, r0
 8005b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b86:	6a21      	ldr	r1, [r4, #32]
 8005b88:	4628      	mov	r0, r5
 8005b8a:	47b0      	blx	r6
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	89a3      	ldrh	r3, [r4, #12]
 8005b90:	d106      	bne.n	8005ba0 <__sflush_r+0x68>
 8005b92:	6829      	ldr	r1, [r5, #0]
 8005b94:	291d      	cmp	r1, #29
 8005b96:	d848      	bhi.n	8005c2a <__sflush_r+0xf2>
 8005b98:	4a29      	ldr	r2, [pc, #164]	; (8005c40 <__sflush_r+0x108>)
 8005b9a:	40ca      	lsrs	r2, r1
 8005b9c:	07d6      	lsls	r6, r2, #31
 8005b9e:	d544      	bpl.n	8005c2a <__sflush_r+0xf2>
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	6062      	str	r2, [r4, #4]
 8005ba4:	04d9      	lsls	r1, r3, #19
 8005ba6:	6922      	ldr	r2, [r4, #16]
 8005ba8:	6022      	str	r2, [r4, #0]
 8005baa:	d504      	bpl.n	8005bb6 <__sflush_r+0x7e>
 8005bac:	1c42      	adds	r2, r0, #1
 8005bae:	d101      	bne.n	8005bb4 <__sflush_r+0x7c>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	b903      	cbnz	r3, 8005bb6 <__sflush_r+0x7e>
 8005bb4:	6560      	str	r0, [r4, #84]	; 0x54
 8005bb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bb8:	602f      	str	r7, [r5, #0]
 8005bba:	2900      	cmp	r1, #0
 8005bbc:	d0c9      	beq.n	8005b52 <__sflush_r+0x1a>
 8005bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bc2:	4299      	cmp	r1, r3
 8005bc4:	d002      	beq.n	8005bcc <__sflush_r+0x94>
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 fc9e 	bl	8006508 <_free_r>
 8005bcc:	2000      	movs	r0, #0
 8005bce:	6360      	str	r0, [r4, #52]	; 0x34
 8005bd0:	e7c0      	b.n	8005b54 <__sflush_r+0x1c>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	47b0      	blx	r6
 8005bd8:	1c41      	adds	r1, r0, #1
 8005bda:	d1c8      	bne.n	8005b6e <__sflush_r+0x36>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0c5      	beq.n	8005b6e <__sflush_r+0x36>
 8005be2:	2b1d      	cmp	r3, #29
 8005be4:	d001      	beq.n	8005bea <__sflush_r+0xb2>
 8005be6:	2b16      	cmp	r3, #22
 8005be8:	d101      	bne.n	8005bee <__sflush_r+0xb6>
 8005bea:	602f      	str	r7, [r5, #0]
 8005bec:	e7b1      	b.n	8005b52 <__sflush_r+0x1a>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf4:	81a3      	strh	r3, [r4, #12]
 8005bf6:	e7ad      	b.n	8005b54 <__sflush_r+0x1c>
 8005bf8:	690f      	ldr	r7, [r1, #16]
 8005bfa:	2f00      	cmp	r7, #0
 8005bfc:	d0a9      	beq.n	8005b52 <__sflush_r+0x1a>
 8005bfe:	0793      	lsls	r3, r2, #30
 8005c00:	680e      	ldr	r6, [r1, #0]
 8005c02:	bf08      	it	eq
 8005c04:	694b      	ldreq	r3, [r1, #20]
 8005c06:	600f      	str	r7, [r1, #0]
 8005c08:	bf18      	it	ne
 8005c0a:	2300      	movne	r3, #0
 8005c0c:	eba6 0807 	sub.w	r8, r6, r7
 8005c10:	608b      	str	r3, [r1, #8]
 8005c12:	f1b8 0f00 	cmp.w	r8, #0
 8005c16:	dd9c      	ble.n	8005b52 <__sflush_r+0x1a>
 8005c18:	4643      	mov	r3, r8
 8005c1a:	463a      	mov	r2, r7
 8005c1c:	6a21      	ldr	r1, [r4, #32]
 8005c1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b0      	blx	r6
 8005c24:	2800      	cmp	r0, #0
 8005c26:	dc06      	bgt.n	8005c36 <__sflush_r+0xfe>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c2e:	81a3      	strh	r3, [r4, #12]
 8005c30:	f04f 30ff 	mov.w	r0, #4294967295
 8005c34:	e78e      	b.n	8005b54 <__sflush_r+0x1c>
 8005c36:	4407      	add	r7, r0
 8005c38:	eba8 0800 	sub.w	r8, r8, r0
 8005c3c:	e7e9      	b.n	8005c12 <__sflush_r+0xda>
 8005c3e:	bf00      	nop
 8005c40:	20400001 	.word	0x20400001

08005c44 <_fflush_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	690b      	ldr	r3, [r1, #16]
 8005c48:	4605      	mov	r5, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	b1db      	cbz	r3, 8005c86 <_fflush_r+0x42>
 8005c4e:	b118      	cbz	r0, 8005c58 <_fflush_r+0x14>
 8005c50:	6983      	ldr	r3, [r0, #24]
 8005c52:	b90b      	cbnz	r3, 8005c58 <_fflush_r+0x14>
 8005c54:	f000 f860 	bl	8005d18 <__sinit>
 8005c58:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <_fflush_r+0x48>)
 8005c5a:	429c      	cmp	r4, r3
 8005c5c:	d109      	bne.n	8005c72 <_fflush_r+0x2e>
 8005c5e:	686c      	ldr	r4, [r5, #4]
 8005c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c64:	b17b      	cbz	r3, 8005c86 <_fflush_r+0x42>
 8005c66:	4621      	mov	r1, r4
 8005c68:	4628      	mov	r0, r5
 8005c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c6e:	f7ff bf63 	b.w	8005b38 <__sflush_r>
 8005c72:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <_fflush_r+0x4c>)
 8005c74:	429c      	cmp	r4, r3
 8005c76:	d101      	bne.n	8005c7c <_fflush_r+0x38>
 8005c78:	68ac      	ldr	r4, [r5, #8]
 8005c7a:	e7f1      	b.n	8005c60 <_fflush_r+0x1c>
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <_fflush_r+0x50>)
 8005c7e:	429c      	cmp	r4, r3
 8005c80:	bf08      	it	eq
 8005c82:	68ec      	ldreq	r4, [r5, #12]
 8005c84:	e7ec      	b.n	8005c60 <_fflush_r+0x1c>
 8005c86:	2000      	movs	r0, #0
 8005c88:	bd38      	pop	{r3, r4, r5, pc}
 8005c8a:	bf00      	nop
 8005c8c:	08006d74 	.word	0x08006d74
 8005c90:	08006d94 	.word	0x08006d94
 8005c94:	08006d54 	.word	0x08006d54

08005c98 <std>:
 8005c98:	2300      	movs	r3, #0
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005ca2:	6083      	str	r3, [r0, #8]
 8005ca4:	8181      	strh	r1, [r0, #12]
 8005ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ca8:	81c2      	strh	r2, [r0, #14]
 8005caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cae:	6183      	str	r3, [r0, #24]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	2208      	movs	r2, #8
 8005cb4:	305c      	adds	r0, #92	; 0x5c
 8005cb6:	f7fe fc5b 	bl	8004570 <memset>
 8005cba:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <std+0x38>)
 8005cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8005cbe:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <std+0x3c>)
 8005cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cc2:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <std+0x40>)
 8005cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cc6:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <std+0x44>)
 8005cc8:	6224      	str	r4, [r4, #32]
 8005cca:	6323      	str	r3, [r4, #48]	; 0x30
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	bf00      	nop
 8005cd0:	080068f9 	.word	0x080068f9
 8005cd4:	0800691b 	.word	0x0800691b
 8005cd8:	08006953 	.word	0x08006953
 8005cdc:	08006977 	.word	0x08006977

08005ce0 <_cleanup_r>:
 8005ce0:	4901      	ldr	r1, [pc, #4]	; (8005ce8 <_cleanup_r+0x8>)
 8005ce2:	f000 b885 	b.w	8005df0 <_fwalk_reent>
 8005ce6:	bf00      	nop
 8005ce8:	08005c45 	.word	0x08005c45

08005cec <__sfmoreglue>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	1e4a      	subs	r2, r1, #1
 8005cf0:	2568      	movs	r5, #104	; 0x68
 8005cf2:	4355      	muls	r5, r2
 8005cf4:	460e      	mov	r6, r1
 8005cf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005cfa:	f000 fc53 	bl	80065a4 <_malloc_r>
 8005cfe:	4604      	mov	r4, r0
 8005d00:	b140      	cbz	r0, 8005d14 <__sfmoreglue+0x28>
 8005d02:	2100      	movs	r1, #0
 8005d04:	e9c0 1600 	strd	r1, r6, [r0]
 8005d08:	300c      	adds	r0, #12
 8005d0a:	60a0      	str	r0, [r4, #8]
 8005d0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d10:	f7fe fc2e 	bl	8004570 <memset>
 8005d14:	4620      	mov	r0, r4
 8005d16:	bd70      	pop	{r4, r5, r6, pc}

08005d18 <__sinit>:
 8005d18:	6983      	ldr	r3, [r0, #24]
 8005d1a:	b510      	push	{r4, lr}
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	bb33      	cbnz	r3, 8005d6e <__sinit+0x56>
 8005d20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005d24:	6503      	str	r3, [r0, #80]	; 0x50
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <__sinit+0x58>)
 8005d28:	4a12      	ldr	r2, [pc, #72]	; (8005d74 <__sinit+0x5c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6282      	str	r2, [r0, #40]	; 0x28
 8005d2e:	4298      	cmp	r0, r3
 8005d30:	bf04      	itt	eq
 8005d32:	2301      	moveq	r3, #1
 8005d34:	6183      	streq	r3, [r0, #24]
 8005d36:	f000 f81f 	bl	8005d78 <__sfp>
 8005d3a:	6060      	str	r0, [r4, #4]
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f000 f81b 	bl	8005d78 <__sfp>
 8005d42:	60a0      	str	r0, [r4, #8]
 8005d44:	4620      	mov	r0, r4
 8005d46:	f000 f817 	bl	8005d78 <__sfp>
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	60e0      	str	r0, [r4, #12]
 8005d4e:	2104      	movs	r1, #4
 8005d50:	6860      	ldr	r0, [r4, #4]
 8005d52:	f7ff ffa1 	bl	8005c98 <std>
 8005d56:	2201      	movs	r2, #1
 8005d58:	2109      	movs	r1, #9
 8005d5a:	68a0      	ldr	r0, [r4, #8]
 8005d5c:	f7ff ff9c 	bl	8005c98 <std>
 8005d60:	2202      	movs	r2, #2
 8005d62:	2112      	movs	r1, #18
 8005d64:	68e0      	ldr	r0, [r4, #12]
 8005d66:	f7ff ff97 	bl	8005c98 <std>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	61a3      	str	r3, [r4, #24]
 8005d6e:	bd10      	pop	{r4, pc}
 8005d70:	08006d0c 	.word	0x08006d0c
 8005d74:	08005ce1 	.word	0x08005ce1

08005d78 <__sfp>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <__sfp+0x70>)
 8005d7c:	681e      	ldr	r6, [r3, #0]
 8005d7e:	69b3      	ldr	r3, [r6, #24]
 8005d80:	4607      	mov	r7, r0
 8005d82:	b913      	cbnz	r3, 8005d8a <__sfp+0x12>
 8005d84:	4630      	mov	r0, r6
 8005d86:	f7ff ffc7 	bl	8005d18 <__sinit>
 8005d8a:	3648      	adds	r6, #72	; 0x48
 8005d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	d503      	bpl.n	8005d9c <__sfp+0x24>
 8005d94:	6833      	ldr	r3, [r6, #0]
 8005d96:	b133      	cbz	r3, 8005da6 <__sfp+0x2e>
 8005d98:	6836      	ldr	r6, [r6, #0]
 8005d9a:	e7f7      	b.n	8005d8c <__sfp+0x14>
 8005d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005da0:	b16d      	cbz	r5, 8005dbe <__sfp+0x46>
 8005da2:	3468      	adds	r4, #104	; 0x68
 8005da4:	e7f4      	b.n	8005d90 <__sfp+0x18>
 8005da6:	2104      	movs	r1, #4
 8005da8:	4638      	mov	r0, r7
 8005daa:	f7ff ff9f 	bl	8005cec <__sfmoreglue>
 8005dae:	6030      	str	r0, [r6, #0]
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d1f1      	bne.n	8005d98 <__sfp+0x20>
 8005db4:	230c      	movs	r3, #12
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	4604      	mov	r4, r0
 8005dba:	4620      	mov	r0, r4
 8005dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dbe:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <__sfp+0x74>)
 8005dc0:	6665      	str	r5, [r4, #100]	; 0x64
 8005dc2:	e9c4 5500 	strd	r5, r5, [r4]
 8005dc6:	60a5      	str	r5, [r4, #8]
 8005dc8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005dcc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005dd8:	f7fe fbca 	bl	8004570 <memset>
 8005ddc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005de0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005de4:	e7e9      	b.n	8005dba <__sfp+0x42>
 8005de6:	bf00      	nop
 8005de8:	08006d0c 	.word	0x08006d0c
 8005dec:	ffff0001 	.word	0xffff0001

08005df0 <_fwalk_reent>:
 8005df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df4:	4680      	mov	r8, r0
 8005df6:	4689      	mov	r9, r1
 8005df8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005dfc:	2600      	movs	r6, #0
 8005dfe:	b914      	cbnz	r4, 8005e06 <_fwalk_reent+0x16>
 8005e00:	4630      	mov	r0, r6
 8005e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005e0a:	3f01      	subs	r7, #1
 8005e0c:	d501      	bpl.n	8005e12 <_fwalk_reent+0x22>
 8005e0e:	6824      	ldr	r4, [r4, #0]
 8005e10:	e7f5      	b.n	8005dfe <_fwalk_reent+0xe>
 8005e12:	89ab      	ldrh	r3, [r5, #12]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d907      	bls.n	8005e28 <_fwalk_reent+0x38>
 8005e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	d003      	beq.n	8005e28 <_fwalk_reent+0x38>
 8005e20:	4629      	mov	r1, r5
 8005e22:	4640      	mov	r0, r8
 8005e24:	47c8      	blx	r9
 8005e26:	4306      	orrs	r6, r0
 8005e28:	3568      	adds	r5, #104	; 0x68
 8005e2a:	e7ee      	b.n	8005e0a <_fwalk_reent+0x1a>

08005e2c <_localeconv_r>:
 8005e2c:	4b04      	ldr	r3, [pc, #16]	; (8005e40 <_localeconv_r+0x14>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6a18      	ldr	r0, [r3, #32]
 8005e32:	4b04      	ldr	r3, [pc, #16]	; (8005e44 <_localeconv_r+0x18>)
 8005e34:	2800      	cmp	r0, #0
 8005e36:	bf08      	it	eq
 8005e38:	4618      	moveq	r0, r3
 8005e3a:	30f0      	adds	r0, #240	; 0xf0
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	20000144 	.word	0x20000144
 8005e44:	200001a8 	.word	0x200001a8

08005e48 <__swhatbuf_r>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	460e      	mov	r6, r1
 8005e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e50:	2900      	cmp	r1, #0
 8005e52:	b096      	sub	sp, #88	; 0x58
 8005e54:	4614      	mov	r4, r2
 8005e56:	461d      	mov	r5, r3
 8005e58:	da07      	bge.n	8005e6a <__swhatbuf_r+0x22>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	89b3      	ldrh	r3, [r6, #12]
 8005e60:	061a      	lsls	r2, r3, #24
 8005e62:	d410      	bmi.n	8005e86 <__swhatbuf_r+0x3e>
 8005e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e68:	e00e      	b.n	8005e88 <__swhatbuf_r+0x40>
 8005e6a:	466a      	mov	r2, sp
 8005e6c:	f000 fe6a 	bl	8006b44 <_fstat_r>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	dbf2      	blt.n	8005e5a <__swhatbuf_r+0x12>
 8005e74:	9a01      	ldr	r2, [sp, #4]
 8005e76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e7e:	425a      	negs	r2, r3
 8005e80:	415a      	adcs	r2, r3
 8005e82:	602a      	str	r2, [r5, #0]
 8005e84:	e7ee      	b.n	8005e64 <__swhatbuf_r+0x1c>
 8005e86:	2340      	movs	r3, #64	; 0x40
 8005e88:	2000      	movs	r0, #0
 8005e8a:	6023      	str	r3, [r4, #0]
 8005e8c:	b016      	add	sp, #88	; 0x58
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}

08005e90 <__smakebuf_r>:
 8005e90:	898b      	ldrh	r3, [r1, #12]
 8005e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e94:	079d      	lsls	r5, r3, #30
 8005e96:	4606      	mov	r6, r0
 8005e98:	460c      	mov	r4, r1
 8005e9a:	d507      	bpl.n	8005eac <__smakebuf_r+0x1c>
 8005e9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ea0:	6023      	str	r3, [r4, #0]
 8005ea2:	6123      	str	r3, [r4, #16]
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	6163      	str	r3, [r4, #20]
 8005ea8:	b002      	add	sp, #8
 8005eaa:	bd70      	pop	{r4, r5, r6, pc}
 8005eac:	ab01      	add	r3, sp, #4
 8005eae:	466a      	mov	r2, sp
 8005eb0:	f7ff ffca 	bl	8005e48 <__swhatbuf_r>
 8005eb4:	9900      	ldr	r1, [sp, #0]
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f000 fb73 	bl	80065a4 <_malloc_r>
 8005ebe:	b948      	cbnz	r0, 8005ed4 <__smakebuf_r+0x44>
 8005ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec4:	059a      	lsls	r2, r3, #22
 8005ec6:	d4ef      	bmi.n	8005ea8 <__smakebuf_r+0x18>
 8005ec8:	f023 0303 	bic.w	r3, r3, #3
 8005ecc:	f043 0302 	orr.w	r3, r3, #2
 8005ed0:	81a3      	strh	r3, [r4, #12]
 8005ed2:	e7e3      	b.n	8005e9c <__smakebuf_r+0xc>
 8005ed4:	4b0d      	ldr	r3, [pc, #52]	; (8005f0c <__smakebuf_r+0x7c>)
 8005ed6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	6020      	str	r0, [r4, #0]
 8005edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee0:	81a3      	strh	r3, [r4, #12]
 8005ee2:	9b00      	ldr	r3, [sp, #0]
 8005ee4:	6163      	str	r3, [r4, #20]
 8005ee6:	9b01      	ldr	r3, [sp, #4]
 8005ee8:	6120      	str	r0, [r4, #16]
 8005eea:	b15b      	cbz	r3, 8005f04 <__smakebuf_r+0x74>
 8005eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f000 fe39 	bl	8006b68 <_isatty_r>
 8005ef6:	b128      	cbz	r0, 8005f04 <__smakebuf_r+0x74>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	f023 0303 	bic.w	r3, r3, #3
 8005efe:	f043 0301 	orr.w	r3, r3, #1
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	431d      	orrs	r5, r3
 8005f08:	81a5      	strh	r5, [r4, #12]
 8005f0a:	e7cd      	b.n	8005ea8 <__smakebuf_r+0x18>
 8005f0c:	08005ce1 	.word	0x08005ce1

08005f10 <malloc>:
 8005f10:	4b02      	ldr	r3, [pc, #8]	; (8005f1c <malloc+0xc>)
 8005f12:	4601      	mov	r1, r0
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	f000 bb45 	b.w	80065a4 <_malloc_r>
 8005f1a:	bf00      	nop
 8005f1c:	20000144 	.word	0x20000144

08005f20 <memcpy>:
 8005f20:	b510      	push	{r4, lr}
 8005f22:	1e43      	subs	r3, r0, #1
 8005f24:	440a      	add	r2, r1
 8005f26:	4291      	cmp	r1, r2
 8005f28:	d100      	bne.n	8005f2c <memcpy+0xc>
 8005f2a:	bd10      	pop	{r4, pc}
 8005f2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f34:	e7f7      	b.n	8005f26 <memcpy+0x6>

08005f36 <_Balloc>:
 8005f36:	b570      	push	{r4, r5, r6, lr}
 8005f38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	460e      	mov	r6, r1
 8005f3e:	b93d      	cbnz	r5, 8005f50 <_Balloc+0x1a>
 8005f40:	2010      	movs	r0, #16
 8005f42:	f7ff ffe5 	bl	8005f10 <malloc>
 8005f46:	6260      	str	r0, [r4, #36]	; 0x24
 8005f48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f4c:	6005      	str	r5, [r0, #0]
 8005f4e:	60c5      	str	r5, [r0, #12]
 8005f50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f52:	68eb      	ldr	r3, [r5, #12]
 8005f54:	b183      	cbz	r3, 8005f78 <_Balloc+0x42>
 8005f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f5e:	b9b8      	cbnz	r0, 8005f90 <_Balloc+0x5a>
 8005f60:	2101      	movs	r1, #1
 8005f62:	fa01 f506 	lsl.w	r5, r1, r6
 8005f66:	1d6a      	adds	r2, r5, #5
 8005f68:	0092      	lsls	r2, r2, #2
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f000 fabe 	bl	80064ec <_calloc_r>
 8005f70:	b160      	cbz	r0, 8005f8c <_Balloc+0x56>
 8005f72:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f76:	e00e      	b.n	8005f96 <_Balloc+0x60>
 8005f78:	2221      	movs	r2, #33	; 0x21
 8005f7a:	2104      	movs	r1, #4
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 fab5 	bl	80064ec <_calloc_r>
 8005f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f84:	60e8      	str	r0, [r5, #12]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1e4      	bne.n	8005f56 <_Balloc+0x20>
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	6802      	ldr	r2, [r0, #0]
 8005f92:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f96:	2300      	movs	r3, #0
 8005f98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f9c:	e7f7      	b.n	8005f8e <_Balloc+0x58>

08005f9e <_Bfree>:
 8005f9e:	b570      	push	{r4, r5, r6, lr}
 8005fa0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	460d      	mov	r5, r1
 8005fa6:	b93c      	cbnz	r4, 8005fb8 <_Bfree+0x1a>
 8005fa8:	2010      	movs	r0, #16
 8005faa:	f7ff ffb1 	bl	8005f10 <malloc>
 8005fae:	6270      	str	r0, [r6, #36]	; 0x24
 8005fb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fb4:	6004      	str	r4, [r0, #0]
 8005fb6:	60c4      	str	r4, [r0, #12]
 8005fb8:	b13d      	cbz	r5, 8005fca <_Bfree+0x2c>
 8005fba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005fbc:	686a      	ldr	r2, [r5, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fc4:	6029      	str	r1, [r5, #0]
 8005fc6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005fca:	bd70      	pop	{r4, r5, r6, pc}

08005fcc <__multadd>:
 8005fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd0:	690d      	ldr	r5, [r1, #16]
 8005fd2:	461f      	mov	r7, r3
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	f101 0c14 	add.w	ip, r1, #20
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8dc 0000 	ldr.w	r0, [ip]
 8005fe2:	b281      	uxth	r1, r0
 8005fe4:	fb02 7101 	mla	r1, r2, r1, r7
 8005fe8:	0c0f      	lsrs	r7, r1, #16
 8005fea:	0c00      	lsrs	r0, r0, #16
 8005fec:	fb02 7000 	mla	r0, r2, r0, r7
 8005ff0:	b289      	uxth	r1, r1
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005ff8:	429d      	cmp	r5, r3
 8005ffa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005ffe:	f84c 1b04 	str.w	r1, [ip], #4
 8006002:	dcec      	bgt.n	8005fde <__multadd+0x12>
 8006004:	b1d7      	cbz	r7, 800603c <__multadd+0x70>
 8006006:	68a3      	ldr	r3, [r4, #8]
 8006008:	42ab      	cmp	r3, r5
 800600a:	dc12      	bgt.n	8006032 <__multadd+0x66>
 800600c:	6861      	ldr	r1, [r4, #4]
 800600e:	4630      	mov	r0, r6
 8006010:	3101      	adds	r1, #1
 8006012:	f7ff ff90 	bl	8005f36 <_Balloc>
 8006016:	6922      	ldr	r2, [r4, #16]
 8006018:	3202      	adds	r2, #2
 800601a:	f104 010c 	add.w	r1, r4, #12
 800601e:	4680      	mov	r8, r0
 8006020:	0092      	lsls	r2, r2, #2
 8006022:	300c      	adds	r0, #12
 8006024:	f7ff ff7c 	bl	8005f20 <memcpy>
 8006028:	4621      	mov	r1, r4
 800602a:	4630      	mov	r0, r6
 800602c:	f7ff ffb7 	bl	8005f9e <_Bfree>
 8006030:	4644      	mov	r4, r8
 8006032:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006036:	3501      	adds	r5, #1
 8006038:	615f      	str	r7, [r3, #20]
 800603a:	6125      	str	r5, [r4, #16]
 800603c:	4620      	mov	r0, r4
 800603e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006042 <__hi0bits>:
 8006042:	0c02      	lsrs	r2, r0, #16
 8006044:	0412      	lsls	r2, r2, #16
 8006046:	4603      	mov	r3, r0
 8006048:	b9b2      	cbnz	r2, 8006078 <__hi0bits+0x36>
 800604a:	0403      	lsls	r3, r0, #16
 800604c:	2010      	movs	r0, #16
 800604e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006052:	bf04      	itt	eq
 8006054:	021b      	lsleq	r3, r3, #8
 8006056:	3008      	addeq	r0, #8
 8006058:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800605c:	bf04      	itt	eq
 800605e:	011b      	lsleq	r3, r3, #4
 8006060:	3004      	addeq	r0, #4
 8006062:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006066:	bf04      	itt	eq
 8006068:	009b      	lsleq	r3, r3, #2
 800606a:	3002      	addeq	r0, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	db06      	blt.n	800607e <__hi0bits+0x3c>
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	d503      	bpl.n	800607c <__hi0bits+0x3a>
 8006074:	3001      	adds	r0, #1
 8006076:	4770      	bx	lr
 8006078:	2000      	movs	r0, #0
 800607a:	e7e8      	b.n	800604e <__hi0bits+0xc>
 800607c:	2020      	movs	r0, #32
 800607e:	4770      	bx	lr

08006080 <__lo0bits>:
 8006080:	6803      	ldr	r3, [r0, #0]
 8006082:	f013 0207 	ands.w	r2, r3, #7
 8006086:	4601      	mov	r1, r0
 8006088:	d00b      	beq.n	80060a2 <__lo0bits+0x22>
 800608a:	07da      	lsls	r2, r3, #31
 800608c:	d423      	bmi.n	80060d6 <__lo0bits+0x56>
 800608e:	0798      	lsls	r0, r3, #30
 8006090:	bf49      	itett	mi
 8006092:	085b      	lsrmi	r3, r3, #1
 8006094:	089b      	lsrpl	r3, r3, #2
 8006096:	2001      	movmi	r0, #1
 8006098:	600b      	strmi	r3, [r1, #0]
 800609a:	bf5c      	itt	pl
 800609c:	600b      	strpl	r3, [r1, #0]
 800609e:	2002      	movpl	r0, #2
 80060a0:	4770      	bx	lr
 80060a2:	b298      	uxth	r0, r3
 80060a4:	b9a8      	cbnz	r0, 80060d2 <__lo0bits+0x52>
 80060a6:	0c1b      	lsrs	r3, r3, #16
 80060a8:	2010      	movs	r0, #16
 80060aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80060ae:	bf04      	itt	eq
 80060b0:	0a1b      	lsreq	r3, r3, #8
 80060b2:	3008      	addeq	r0, #8
 80060b4:	071a      	lsls	r2, r3, #28
 80060b6:	bf04      	itt	eq
 80060b8:	091b      	lsreq	r3, r3, #4
 80060ba:	3004      	addeq	r0, #4
 80060bc:	079a      	lsls	r2, r3, #30
 80060be:	bf04      	itt	eq
 80060c0:	089b      	lsreq	r3, r3, #2
 80060c2:	3002      	addeq	r0, #2
 80060c4:	07da      	lsls	r2, r3, #31
 80060c6:	d402      	bmi.n	80060ce <__lo0bits+0x4e>
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	d006      	beq.n	80060da <__lo0bits+0x5a>
 80060cc:	3001      	adds	r0, #1
 80060ce:	600b      	str	r3, [r1, #0]
 80060d0:	4770      	bx	lr
 80060d2:	4610      	mov	r0, r2
 80060d4:	e7e9      	b.n	80060aa <__lo0bits+0x2a>
 80060d6:	2000      	movs	r0, #0
 80060d8:	4770      	bx	lr
 80060da:	2020      	movs	r0, #32
 80060dc:	4770      	bx	lr

080060de <__i2b>:
 80060de:	b510      	push	{r4, lr}
 80060e0:	460c      	mov	r4, r1
 80060e2:	2101      	movs	r1, #1
 80060e4:	f7ff ff27 	bl	8005f36 <_Balloc>
 80060e8:	2201      	movs	r2, #1
 80060ea:	6144      	str	r4, [r0, #20]
 80060ec:	6102      	str	r2, [r0, #16]
 80060ee:	bd10      	pop	{r4, pc}

080060f0 <__multiply>:
 80060f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	4614      	mov	r4, r2
 80060f6:	690a      	ldr	r2, [r1, #16]
 80060f8:	6923      	ldr	r3, [r4, #16]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	bfb8      	it	lt
 80060fe:	460b      	movlt	r3, r1
 8006100:	4688      	mov	r8, r1
 8006102:	bfbc      	itt	lt
 8006104:	46a0      	movlt	r8, r4
 8006106:	461c      	movlt	r4, r3
 8006108:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800610c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006110:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006114:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006118:	eb07 0609 	add.w	r6, r7, r9
 800611c:	42b3      	cmp	r3, r6
 800611e:	bfb8      	it	lt
 8006120:	3101      	addlt	r1, #1
 8006122:	f7ff ff08 	bl	8005f36 <_Balloc>
 8006126:	f100 0514 	add.w	r5, r0, #20
 800612a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800612e:	462b      	mov	r3, r5
 8006130:	2200      	movs	r2, #0
 8006132:	4573      	cmp	r3, lr
 8006134:	d316      	bcc.n	8006164 <__multiply+0x74>
 8006136:	f104 0214 	add.w	r2, r4, #20
 800613a:	f108 0114 	add.w	r1, r8, #20
 800613e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006142:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	9b00      	ldr	r3, [sp, #0]
 800614a:	9201      	str	r2, [sp, #4]
 800614c:	4293      	cmp	r3, r2
 800614e:	d80c      	bhi.n	800616a <__multiply+0x7a>
 8006150:	2e00      	cmp	r6, #0
 8006152:	dd03      	ble.n	800615c <__multiply+0x6c>
 8006154:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006158:	2b00      	cmp	r3, #0
 800615a:	d05d      	beq.n	8006218 <__multiply+0x128>
 800615c:	6106      	str	r6, [r0, #16]
 800615e:	b003      	add	sp, #12
 8006160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006164:	f843 2b04 	str.w	r2, [r3], #4
 8006168:	e7e3      	b.n	8006132 <__multiply+0x42>
 800616a:	f8b2 b000 	ldrh.w	fp, [r2]
 800616e:	f1bb 0f00 	cmp.w	fp, #0
 8006172:	d023      	beq.n	80061bc <__multiply+0xcc>
 8006174:	4689      	mov	r9, r1
 8006176:	46ac      	mov	ip, r5
 8006178:	f04f 0800 	mov.w	r8, #0
 800617c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006180:	f8dc a000 	ldr.w	sl, [ip]
 8006184:	b2a3      	uxth	r3, r4
 8006186:	fa1f fa8a 	uxth.w	sl, sl
 800618a:	fb0b a303 	mla	r3, fp, r3, sl
 800618e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006192:	f8dc 4000 	ldr.w	r4, [ip]
 8006196:	4443      	add	r3, r8
 8006198:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800619c:	fb0b 840a 	mla	r4, fp, sl, r8
 80061a0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80061a4:	46e2      	mov	sl, ip
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061ac:	454f      	cmp	r7, r9
 80061ae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80061b2:	f84a 3b04 	str.w	r3, [sl], #4
 80061b6:	d82b      	bhi.n	8006210 <__multiply+0x120>
 80061b8:	f8cc 8004 	str.w	r8, [ip, #4]
 80061bc:	9b01      	ldr	r3, [sp, #4]
 80061be:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80061c2:	3204      	adds	r2, #4
 80061c4:	f1ba 0f00 	cmp.w	sl, #0
 80061c8:	d020      	beq.n	800620c <__multiply+0x11c>
 80061ca:	682b      	ldr	r3, [r5, #0]
 80061cc:	4689      	mov	r9, r1
 80061ce:	46a8      	mov	r8, r5
 80061d0:	f04f 0b00 	mov.w	fp, #0
 80061d4:	f8b9 c000 	ldrh.w	ip, [r9]
 80061d8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80061dc:	fb0a 440c 	mla	r4, sl, ip, r4
 80061e0:	445c      	add	r4, fp
 80061e2:	46c4      	mov	ip, r8
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061ea:	f84c 3b04 	str.w	r3, [ip], #4
 80061ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80061f2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80061f6:	0c1b      	lsrs	r3, r3, #16
 80061f8:	fb0a b303 	mla	r3, sl, r3, fp
 80061fc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006200:	454f      	cmp	r7, r9
 8006202:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006206:	d805      	bhi.n	8006214 <__multiply+0x124>
 8006208:	f8c8 3004 	str.w	r3, [r8, #4]
 800620c:	3504      	adds	r5, #4
 800620e:	e79b      	b.n	8006148 <__multiply+0x58>
 8006210:	46d4      	mov	ip, sl
 8006212:	e7b3      	b.n	800617c <__multiply+0x8c>
 8006214:	46e0      	mov	r8, ip
 8006216:	e7dd      	b.n	80061d4 <__multiply+0xe4>
 8006218:	3e01      	subs	r6, #1
 800621a:	e799      	b.n	8006150 <__multiply+0x60>

0800621c <__pow5mult>:
 800621c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006220:	4615      	mov	r5, r2
 8006222:	f012 0203 	ands.w	r2, r2, #3
 8006226:	4606      	mov	r6, r0
 8006228:	460f      	mov	r7, r1
 800622a:	d007      	beq.n	800623c <__pow5mult+0x20>
 800622c:	3a01      	subs	r2, #1
 800622e:	4c21      	ldr	r4, [pc, #132]	; (80062b4 <__pow5mult+0x98>)
 8006230:	2300      	movs	r3, #0
 8006232:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006236:	f7ff fec9 	bl	8005fcc <__multadd>
 800623a:	4607      	mov	r7, r0
 800623c:	10ad      	asrs	r5, r5, #2
 800623e:	d035      	beq.n	80062ac <__pow5mult+0x90>
 8006240:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006242:	b93c      	cbnz	r4, 8006254 <__pow5mult+0x38>
 8006244:	2010      	movs	r0, #16
 8006246:	f7ff fe63 	bl	8005f10 <malloc>
 800624a:	6270      	str	r0, [r6, #36]	; 0x24
 800624c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006250:	6004      	str	r4, [r0, #0]
 8006252:	60c4      	str	r4, [r0, #12]
 8006254:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800625c:	b94c      	cbnz	r4, 8006272 <__pow5mult+0x56>
 800625e:	f240 2171 	movw	r1, #625	; 0x271
 8006262:	4630      	mov	r0, r6
 8006264:	f7ff ff3b 	bl	80060de <__i2b>
 8006268:	2300      	movs	r3, #0
 800626a:	f8c8 0008 	str.w	r0, [r8, #8]
 800626e:	4604      	mov	r4, r0
 8006270:	6003      	str	r3, [r0, #0]
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	07eb      	lsls	r3, r5, #31
 8006278:	d50a      	bpl.n	8006290 <__pow5mult+0x74>
 800627a:	4639      	mov	r1, r7
 800627c:	4622      	mov	r2, r4
 800627e:	4630      	mov	r0, r6
 8006280:	f7ff ff36 	bl	80060f0 <__multiply>
 8006284:	4639      	mov	r1, r7
 8006286:	4681      	mov	r9, r0
 8006288:	4630      	mov	r0, r6
 800628a:	f7ff fe88 	bl	8005f9e <_Bfree>
 800628e:	464f      	mov	r7, r9
 8006290:	106d      	asrs	r5, r5, #1
 8006292:	d00b      	beq.n	80062ac <__pow5mult+0x90>
 8006294:	6820      	ldr	r0, [r4, #0]
 8006296:	b938      	cbnz	r0, 80062a8 <__pow5mult+0x8c>
 8006298:	4622      	mov	r2, r4
 800629a:	4621      	mov	r1, r4
 800629c:	4630      	mov	r0, r6
 800629e:	f7ff ff27 	bl	80060f0 <__multiply>
 80062a2:	6020      	str	r0, [r4, #0]
 80062a4:	f8c0 8000 	str.w	r8, [r0]
 80062a8:	4604      	mov	r4, r0
 80062aa:	e7e4      	b.n	8006276 <__pow5mult+0x5a>
 80062ac:	4638      	mov	r0, r7
 80062ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b2:	bf00      	nop
 80062b4:	08006ea8 	.word	0x08006ea8

080062b8 <__lshift>:
 80062b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062bc:	460c      	mov	r4, r1
 80062be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	6849      	ldr	r1, [r1, #4]
 80062c6:	eb0a 0903 	add.w	r9, sl, r3
 80062ca:	68a3      	ldr	r3, [r4, #8]
 80062cc:	4607      	mov	r7, r0
 80062ce:	4616      	mov	r6, r2
 80062d0:	f109 0501 	add.w	r5, r9, #1
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	db32      	blt.n	800633e <__lshift+0x86>
 80062d8:	4638      	mov	r0, r7
 80062da:	f7ff fe2c 	bl	8005f36 <_Balloc>
 80062de:	2300      	movs	r3, #0
 80062e0:	4680      	mov	r8, r0
 80062e2:	f100 0114 	add.w	r1, r0, #20
 80062e6:	461a      	mov	r2, r3
 80062e8:	4553      	cmp	r3, sl
 80062ea:	db2b      	blt.n	8006344 <__lshift+0x8c>
 80062ec:	6920      	ldr	r0, [r4, #16]
 80062ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062f2:	f104 0314 	add.w	r3, r4, #20
 80062f6:	f016 021f 	ands.w	r2, r6, #31
 80062fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006302:	d025      	beq.n	8006350 <__lshift+0x98>
 8006304:	f1c2 0e20 	rsb	lr, r2, #32
 8006308:	2000      	movs	r0, #0
 800630a:	681e      	ldr	r6, [r3, #0]
 800630c:	468a      	mov	sl, r1
 800630e:	4096      	lsls	r6, r2
 8006310:	4330      	orrs	r0, r6
 8006312:	f84a 0b04 	str.w	r0, [sl], #4
 8006316:	f853 0b04 	ldr.w	r0, [r3], #4
 800631a:	459c      	cmp	ip, r3
 800631c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006320:	d814      	bhi.n	800634c <__lshift+0x94>
 8006322:	6048      	str	r0, [r1, #4]
 8006324:	b108      	cbz	r0, 800632a <__lshift+0x72>
 8006326:	f109 0502 	add.w	r5, r9, #2
 800632a:	3d01      	subs	r5, #1
 800632c:	4638      	mov	r0, r7
 800632e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006332:	4621      	mov	r1, r4
 8006334:	f7ff fe33 	bl	8005f9e <_Bfree>
 8006338:	4640      	mov	r0, r8
 800633a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633e:	3101      	adds	r1, #1
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	e7c7      	b.n	80062d4 <__lshift+0x1c>
 8006344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006348:	3301      	adds	r3, #1
 800634a:	e7cd      	b.n	80062e8 <__lshift+0x30>
 800634c:	4651      	mov	r1, sl
 800634e:	e7dc      	b.n	800630a <__lshift+0x52>
 8006350:	3904      	subs	r1, #4
 8006352:	f853 2b04 	ldr.w	r2, [r3], #4
 8006356:	f841 2f04 	str.w	r2, [r1, #4]!
 800635a:	459c      	cmp	ip, r3
 800635c:	d8f9      	bhi.n	8006352 <__lshift+0x9a>
 800635e:	e7e4      	b.n	800632a <__lshift+0x72>

08006360 <__mcmp>:
 8006360:	6903      	ldr	r3, [r0, #16]
 8006362:	690a      	ldr	r2, [r1, #16]
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	b530      	push	{r4, r5, lr}
 8006368:	d10c      	bne.n	8006384 <__mcmp+0x24>
 800636a:	0092      	lsls	r2, r2, #2
 800636c:	3014      	adds	r0, #20
 800636e:	3114      	adds	r1, #20
 8006370:	1884      	adds	r4, r0, r2
 8006372:	4411      	add	r1, r2
 8006374:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006378:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800637c:	4295      	cmp	r5, r2
 800637e:	d003      	beq.n	8006388 <__mcmp+0x28>
 8006380:	d305      	bcc.n	800638e <__mcmp+0x2e>
 8006382:	2301      	movs	r3, #1
 8006384:	4618      	mov	r0, r3
 8006386:	bd30      	pop	{r4, r5, pc}
 8006388:	42a0      	cmp	r0, r4
 800638a:	d3f3      	bcc.n	8006374 <__mcmp+0x14>
 800638c:	e7fa      	b.n	8006384 <__mcmp+0x24>
 800638e:	f04f 33ff 	mov.w	r3, #4294967295
 8006392:	e7f7      	b.n	8006384 <__mcmp+0x24>

08006394 <__mdiff>:
 8006394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006398:	460d      	mov	r5, r1
 800639a:	4607      	mov	r7, r0
 800639c:	4611      	mov	r1, r2
 800639e:	4628      	mov	r0, r5
 80063a0:	4614      	mov	r4, r2
 80063a2:	f7ff ffdd 	bl	8006360 <__mcmp>
 80063a6:	1e06      	subs	r6, r0, #0
 80063a8:	d108      	bne.n	80063bc <__mdiff+0x28>
 80063aa:	4631      	mov	r1, r6
 80063ac:	4638      	mov	r0, r7
 80063ae:	f7ff fdc2 	bl	8005f36 <_Balloc>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80063b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063bc:	bfa4      	itt	ge
 80063be:	4623      	movge	r3, r4
 80063c0:	462c      	movge	r4, r5
 80063c2:	4638      	mov	r0, r7
 80063c4:	6861      	ldr	r1, [r4, #4]
 80063c6:	bfa6      	itte	ge
 80063c8:	461d      	movge	r5, r3
 80063ca:	2600      	movge	r6, #0
 80063cc:	2601      	movlt	r6, #1
 80063ce:	f7ff fdb2 	bl	8005f36 <_Balloc>
 80063d2:	692b      	ldr	r3, [r5, #16]
 80063d4:	60c6      	str	r6, [r0, #12]
 80063d6:	6926      	ldr	r6, [r4, #16]
 80063d8:	f105 0914 	add.w	r9, r5, #20
 80063dc:	f104 0214 	add.w	r2, r4, #20
 80063e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80063e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80063e8:	f100 0514 	add.w	r5, r0, #20
 80063ec:	f04f 0e00 	mov.w	lr, #0
 80063f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80063f4:	f859 4b04 	ldr.w	r4, [r9], #4
 80063f8:	fa1e f18a 	uxtah	r1, lr, sl
 80063fc:	b2a3      	uxth	r3, r4
 80063fe:	1ac9      	subs	r1, r1, r3
 8006400:	0c23      	lsrs	r3, r4, #16
 8006402:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006406:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800640a:	b289      	uxth	r1, r1
 800640c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006410:	45c8      	cmp	r8, r9
 8006412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006416:	4694      	mov	ip, r2
 8006418:	f845 3b04 	str.w	r3, [r5], #4
 800641c:	d8e8      	bhi.n	80063f0 <__mdiff+0x5c>
 800641e:	45bc      	cmp	ip, r7
 8006420:	d304      	bcc.n	800642c <__mdiff+0x98>
 8006422:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006426:	b183      	cbz	r3, 800644a <__mdiff+0xb6>
 8006428:	6106      	str	r6, [r0, #16]
 800642a:	e7c5      	b.n	80063b8 <__mdiff+0x24>
 800642c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006430:	fa1e f381 	uxtah	r3, lr, r1
 8006434:	141a      	asrs	r2, r3, #16
 8006436:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800643a:	b29b      	uxth	r3, r3
 800643c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006440:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006444:	f845 3b04 	str.w	r3, [r5], #4
 8006448:	e7e9      	b.n	800641e <__mdiff+0x8a>
 800644a:	3e01      	subs	r6, #1
 800644c:	e7e9      	b.n	8006422 <__mdiff+0x8e>

0800644e <__d2b>:
 800644e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006452:	460e      	mov	r6, r1
 8006454:	2101      	movs	r1, #1
 8006456:	ec59 8b10 	vmov	r8, r9, d0
 800645a:	4615      	mov	r5, r2
 800645c:	f7ff fd6b 	bl	8005f36 <_Balloc>
 8006460:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006464:	4607      	mov	r7, r0
 8006466:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800646a:	bb34      	cbnz	r4, 80064ba <__d2b+0x6c>
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	f1b8 0300 	subs.w	r3, r8, #0
 8006472:	d027      	beq.n	80064c4 <__d2b+0x76>
 8006474:	a802      	add	r0, sp, #8
 8006476:	f840 3d08 	str.w	r3, [r0, #-8]!
 800647a:	f7ff fe01 	bl	8006080 <__lo0bits>
 800647e:	9900      	ldr	r1, [sp, #0]
 8006480:	b1f0      	cbz	r0, 80064c0 <__d2b+0x72>
 8006482:	9a01      	ldr	r2, [sp, #4]
 8006484:	f1c0 0320 	rsb	r3, r0, #32
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	430b      	orrs	r3, r1
 800648e:	40c2      	lsrs	r2, r0
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	9201      	str	r2, [sp, #4]
 8006494:	9b01      	ldr	r3, [sp, #4]
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	bf14      	ite	ne
 800649c:	2102      	movne	r1, #2
 800649e:	2101      	moveq	r1, #1
 80064a0:	6139      	str	r1, [r7, #16]
 80064a2:	b1c4      	cbz	r4, 80064d6 <__d2b+0x88>
 80064a4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80064a8:	4404      	add	r4, r0
 80064aa:	6034      	str	r4, [r6, #0]
 80064ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80064b0:	6028      	str	r0, [r5, #0]
 80064b2:	4638      	mov	r0, r7
 80064b4:	b003      	add	sp, #12
 80064b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064be:	e7d5      	b.n	800646c <__d2b+0x1e>
 80064c0:	6179      	str	r1, [r7, #20]
 80064c2:	e7e7      	b.n	8006494 <__d2b+0x46>
 80064c4:	a801      	add	r0, sp, #4
 80064c6:	f7ff fddb 	bl	8006080 <__lo0bits>
 80064ca:	9b01      	ldr	r3, [sp, #4]
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	2101      	movs	r1, #1
 80064d0:	6139      	str	r1, [r7, #16]
 80064d2:	3020      	adds	r0, #32
 80064d4:	e7e5      	b.n	80064a2 <__d2b+0x54>
 80064d6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80064da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064de:	6030      	str	r0, [r6, #0]
 80064e0:	6918      	ldr	r0, [r3, #16]
 80064e2:	f7ff fdae 	bl	8006042 <__hi0bits>
 80064e6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064ea:	e7e1      	b.n	80064b0 <__d2b+0x62>

080064ec <_calloc_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	fb02 f401 	mul.w	r4, r2, r1
 80064f2:	4621      	mov	r1, r4
 80064f4:	f000 f856 	bl	80065a4 <_malloc_r>
 80064f8:	4605      	mov	r5, r0
 80064fa:	b118      	cbz	r0, 8006504 <_calloc_r+0x18>
 80064fc:	4622      	mov	r2, r4
 80064fe:	2100      	movs	r1, #0
 8006500:	f7fe f836 	bl	8004570 <memset>
 8006504:	4628      	mov	r0, r5
 8006506:	bd38      	pop	{r3, r4, r5, pc}

08006508 <_free_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4605      	mov	r5, r0
 800650c:	2900      	cmp	r1, #0
 800650e:	d045      	beq.n	800659c <_free_r+0x94>
 8006510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006514:	1f0c      	subs	r4, r1, #4
 8006516:	2b00      	cmp	r3, #0
 8006518:	bfb8      	it	lt
 800651a:	18e4      	addlt	r4, r4, r3
 800651c:	f000 fb58 	bl	8006bd0 <__malloc_lock>
 8006520:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <_free_r+0x98>)
 8006522:	6813      	ldr	r3, [r2, #0]
 8006524:	4610      	mov	r0, r2
 8006526:	b933      	cbnz	r3, 8006536 <_free_r+0x2e>
 8006528:	6063      	str	r3, [r4, #4]
 800652a:	6014      	str	r4, [r2, #0]
 800652c:	4628      	mov	r0, r5
 800652e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006532:	f000 bb4e 	b.w	8006bd2 <__malloc_unlock>
 8006536:	42a3      	cmp	r3, r4
 8006538:	d90c      	bls.n	8006554 <_free_r+0x4c>
 800653a:	6821      	ldr	r1, [r4, #0]
 800653c:	1862      	adds	r2, r4, r1
 800653e:	4293      	cmp	r3, r2
 8006540:	bf04      	itt	eq
 8006542:	681a      	ldreq	r2, [r3, #0]
 8006544:	685b      	ldreq	r3, [r3, #4]
 8006546:	6063      	str	r3, [r4, #4]
 8006548:	bf04      	itt	eq
 800654a:	1852      	addeq	r2, r2, r1
 800654c:	6022      	streq	r2, [r4, #0]
 800654e:	6004      	str	r4, [r0, #0]
 8006550:	e7ec      	b.n	800652c <_free_r+0x24>
 8006552:	4613      	mov	r3, r2
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	b10a      	cbz	r2, 800655c <_free_r+0x54>
 8006558:	42a2      	cmp	r2, r4
 800655a:	d9fa      	bls.n	8006552 <_free_r+0x4a>
 800655c:	6819      	ldr	r1, [r3, #0]
 800655e:	1858      	adds	r0, r3, r1
 8006560:	42a0      	cmp	r0, r4
 8006562:	d10b      	bne.n	800657c <_free_r+0x74>
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	4401      	add	r1, r0
 8006568:	1858      	adds	r0, r3, r1
 800656a:	4282      	cmp	r2, r0
 800656c:	6019      	str	r1, [r3, #0]
 800656e:	d1dd      	bne.n	800652c <_free_r+0x24>
 8006570:	6810      	ldr	r0, [r2, #0]
 8006572:	6852      	ldr	r2, [r2, #4]
 8006574:	605a      	str	r2, [r3, #4]
 8006576:	4401      	add	r1, r0
 8006578:	6019      	str	r1, [r3, #0]
 800657a:	e7d7      	b.n	800652c <_free_r+0x24>
 800657c:	d902      	bls.n	8006584 <_free_r+0x7c>
 800657e:	230c      	movs	r3, #12
 8006580:	602b      	str	r3, [r5, #0]
 8006582:	e7d3      	b.n	800652c <_free_r+0x24>
 8006584:	6820      	ldr	r0, [r4, #0]
 8006586:	1821      	adds	r1, r4, r0
 8006588:	428a      	cmp	r2, r1
 800658a:	bf04      	itt	eq
 800658c:	6811      	ldreq	r1, [r2, #0]
 800658e:	6852      	ldreq	r2, [r2, #4]
 8006590:	6062      	str	r2, [r4, #4]
 8006592:	bf04      	itt	eq
 8006594:	1809      	addeq	r1, r1, r0
 8006596:	6021      	streq	r1, [r4, #0]
 8006598:	605c      	str	r4, [r3, #4]
 800659a:	e7c7      	b.n	800652c <_free_r+0x24>
 800659c:	bd38      	pop	{r3, r4, r5, pc}
 800659e:	bf00      	nop
 80065a0:	20000334 	.word	0x20000334

080065a4 <_malloc_r>:
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	1ccd      	adds	r5, r1, #3
 80065a8:	f025 0503 	bic.w	r5, r5, #3
 80065ac:	3508      	adds	r5, #8
 80065ae:	2d0c      	cmp	r5, #12
 80065b0:	bf38      	it	cc
 80065b2:	250c      	movcc	r5, #12
 80065b4:	2d00      	cmp	r5, #0
 80065b6:	4606      	mov	r6, r0
 80065b8:	db01      	blt.n	80065be <_malloc_r+0x1a>
 80065ba:	42a9      	cmp	r1, r5
 80065bc:	d903      	bls.n	80065c6 <_malloc_r+0x22>
 80065be:	230c      	movs	r3, #12
 80065c0:	6033      	str	r3, [r6, #0]
 80065c2:	2000      	movs	r0, #0
 80065c4:	bd70      	pop	{r4, r5, r6, pc}
 80065c6:	f000 fb03 	bl	8006bd0 <__malloc_lock>
 80065ca:	4a21      	ldr	r2, [pc, #132]	; (8006650 <_malloc_r+0xac>)
 80065cc:	6814      	ldr	r4, [r2, #0]
 80065ce:	4621      	mov	r1, r4
 80065d0:	b991      	cbnz	r1, 80065f8 <_malloc_r+0x54>
 80065d2:	4c20      	ldr	r4, [pc, #128]	; (8006654 <_malloc_r+0xb0>)
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	b91b      	cbnz	r3, 80065e0 <_malloc_r+0x3c>
 80065d8:	4630      	mov	r0, r6
 80065da:	f000 f97d 	bl	80068d8 <_sbrk_r>
 80065de:	6020      	str	r0, [r4, #0]
 80065e0:	4629      	mov	r1, r5
 80065e2:	4630      	mov	r0, r6
 80065e4:	f000 f978 	bl	80068d8 <_sbrk_r>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d124      	bne.n	8006636 <_malloc_r+0x92>
 80065ec:	230c      	movs	r3, #12
 80065ee:	6033      	str	r3, [r6, #0]
 80065f0:	4630      	mov	r0, r6
 80065f2:	f000 faee 	bl	8006bd2 <__malloc_unlock>
 80065f6:	e7e4      	b.n	80065c2 <_malloc_r+0x1e>
 80065f8:	680b      	ldr	r3, [r1, #0]
 80065fa:	1b5b      	subs	r3, r3, r5
 80065fc:	d418      	bmi.n	8006630 <_malloc_r+0x8c>
 80065fe:	2b0b      	cmp	r3, #11
 8006600:	d90f      	bls.n	8006622 <_malloc_r+0x7e>
 8006602:	600b      	str	r3, [r1, #0]
 8006604:	50cd      	str	r5, [r1, r3]
 8006606:	18cc      	adds	r4, r1, r3
 8006608:	4630      	mov	r0, r6
 800660a:	f000 fae2 	bl	8006bd2 <__malloc_unlock>
 800660e:	f104 000b 	add.w	r0, r4, #11
 8006612:	1d23      	adds	r3, r4, #4
 8006614:	f020 0007 	bic.w	r0, r0, #7
 8006618:	1ac3      	subs	r3, r0, r3
 800661a:	d0d3      	beq.n	80065c4 <_malloc_r+0x20>
 800661c:	425a      	negs	r2, r3
 800661e:	50e2      	str	r2, [r4, r3]
 8006620:	e7d0      	b.n	80065c4 <_malloc_r+0x20>
 8006622:	428c      	cmp	r4, r1
 8006624:	684b      	ldr	r3, [r1, #4]
 8006626:	bf16      	itet	ne
 8006628:	6063      	strne	r3, [r4, #4]
 800662a:	6013      	streq	r3, [r2, #0]
 800662c:	460c      	movne	r4, r1
 800662e:	e7eb      	b.n	8006608 <_malloc_r+0x64>
 8006630:	460c      	mov	r4, r1
 8006632:	6849      	ldr	r1, [r1, #4]
 8006634:	e7cc      	b.n	80065d0 <_malloc_r+0x2c>
 8006636:	1cc4      	adds	r4, r0, #3
 8006638:	f024 0403 	bic.w	r4, r4, #3
 800663c:	42a0      	cmp	r0, r4
 800663e:	d005      	beq.n	800664c <_malloc_r+0xa8>
 8006640:	1a21      	subs	r1, r4, r0
 8006642:	4630      	mov	r0, r6
 8006644:	f000 f948 	bl	80068d8 <_sbrk_r>
 8006648:	3001      	adds	r0, #1
 800664a:	d0cf      	beq.n	80065ec <_malloc_r+0x48>
 800664c:	6025      	str	r5, [r4, #0]
 800664e:	e7db      	b.n	8006608 <_malloc_r+0x64>
 8006650:	20000334 	.word	0x20000334
 8006654:	20000338 	.word	0x20000338

08006658 <__sfputc_r>:
 8006658:	6893      	ldr	r3, [r2, #8]
 800665a:	3b01      	subs	r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	b410      	push	{r4}
 8006660:	6093      	str	r3, [r2, #8]
 8006662:	da08      	bge.n	8006676 <__sfputc_r+0x1e>
 8006664:	6994      	ldr	r4, [r2, #24]
 8006666:	42a3      	cmp	r3, r4
 8006668:	db01      	blt.n	800666e <__sfputc_r+0x16>
 800666a:	290a      	cmp	r1, #10
 800666c:	d103      	bne.n	8006676 <__sfputc_r+0x1e>
 800666e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006672:	f000 b985 	b.w	8006980 <__swbuf_r>
 8006676:	6813      	ldr	r3, [r2, #0]
 8006678:	1c58      	adds	r0, r3, #1
 800667a:	6010      	str	r0, [r2, #0]
 800667c:	7019      	strb	r1, [r3, #0]
 800667e:	4608      	mov	r0, r1
 8006680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006684:	4770      	bx	lr

08006686 <__sfputs_r>:
 8006686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006688:	4606      	mov	r6, r0
 800668a:	460f      	mov	r7, r1
 800668c:	4614      	mov	r4, r2
 800668e:	18d5      	adds	r5, r2, r3
 8006690:	42ac      	cmp	r4, r5
 8006692:	d101      	bne.n	8006698 <__sfputs_r+0x12>
 8006694:	2000      	movs	r0, #0
 8006696:	e007      	b.n	80066a8 <__sfputs_r+0x22>
 8006698:	463a      	mov	r2, r7
 800669a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800669e:	4630      	mov	r0, r6
 80066a0:	f7ff ffda 	bl	8006658 <__sfputc_r>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d1f3      	bne.n	8006690 <__sfputs_r+0xa>
 80066a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066ac <_vfiprintf_r>:
 80066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	460c      	mov	r4, r1
 80066b2:	b09d      	sub	sp, #116	; 0x74
 80066b4:	4617      	mov	r7, r2
 80066b6:	461d      	mov	r5, r3
 80066b8:	4606      	mov	r6, r0
 80066ba:	b118      	cbz	r0, 80066c4 <_vfiprintf_r+0x18>
 80066bc:	6983      	ldr	r3, [r0, #24]
 80066be:	b90b      	cbnz	r3, 80066c4 <_vfiprintf_r+0x18>
 80066c0:	f7ff fb2a 	bl	8005d18 <__sinit>
 80066c4:	4b7c      	ldr	r3, [pc, #496]	; (80068b8 <_vfiprintf_r+0x20c>)
 80066c6:	429c      	cmp	r4, r3
 80066c8:	d158      	bne.n	800677c <_vfiprintf_r+0xd0>
 80066ca:	6874      	ldr	r4, [r6, #4]
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	0718      	lsls	r0, r3, #28
 80066d0:	d55e      	bpl.n	8006790 <_vfiprintf_r+0xe4>
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d05b      	beq.n	8006790 <_vfiprintf_r+0xe4>
 80066d8:	2300      	movs	r3, #0
 80066da:	9309      	str	r3, [sp, #36]	; 0x24
 80066dc:	2320      	movs	r3, #32
 80066de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066e2:	2330      	movs	r3, #48	; 0x30
 80066e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066e8:	9503      	str	r5, [sp, #12]
 80066ea:	f04f 0b01 	mov.w	fp, #1
 80066ee:	46b8      	mov	r8, r7
 80066f0:	4645      	mov	r5, r8
 80066f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066f6:	b10b      	cbz	r3, 80066fc <_vfiprintf_r+0x50>
 80066f8:	2b25      	cmp	r3, #37	; 0x25
 80066fa:	d154      	bne.n	80067a6 <_vfiprintf_r+0xfa>
 80066fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8006700:	d00b      	beq.n	800671a <_vfiprintf_r+0x6e>
 8006702:	4653      	mov	r3, sl
 8006704:	463a      	mov	r2, r7
 8006706:	4621      	mov	r1, r4
 8006708:	4630      	mov	r0, r6
 800670a:	f7ff ffbc 	bl	8006686 <__sfputs_r>
 800670e:	3001      	adds	r0, #1
 8006710:	f000 80c2 	beq.w	8006898 <_vfiprintf_r+0x1ec>
 8006714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006716:	4453      	add	r3, sl
 8006718:	9309      	str	r3, [sp, #36]	; 0x24
 800671a:	f898 3000 	ldrb.w	r3, [r8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 80ba 	beq.w	8006898 <_vfiprintf_r+0x1ec>
 8006724:	2300      	movs	r3, #0
 8006726:	f04f 32ff 	mov.w	r2, #4294967295
 800672a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800672e:	9304      	str	r3, [sp, #16]
 8006730:	9307      	str	r3, [sp, #28]
 8006732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006736:	931a      	str	r3, [sp, #104]	; 0x68
 8006738:	46a8      	mov	r8, r5
 800673a:	2205      	movs	r2, #5
 800673c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006740:	485e      	ldr	r0, [pc, #376]	; (80068bc <_vfiprintf_r+0x210>)
 8006742:	f7f9 fd85 	bl	8000250 <memchr>
 8006746:	9b04      	ldr	r3, [sp, #16]
 8006748:	bb78      	cbnz	r0, 80067aa <_vfiprintf_r+0xfe>
 800674a:	06d9      	lsls	r1, r3, #27
 800674c:	bf44      	itt	mi
 800674e:	2220      	movmi	r2, #32
 8006750:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006754:	071a      	lsls	r2, r3, #28
 8006756:	bf44      	itt	mi
 8006758:	222b      	movmi	r2, #43	; 0x2b
 800675a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800675e:	782a      	ldrb	r2, [r5, #0]
 8006760:	2a2a      	cmp	r2, #42	; 0x2a
 8006762:	d02a      	beq.n	80067ba <_vfiprintf_r+0x10e>
 8006764:	9a07      	ldr	r2, [sp, #28]
 8006766:	46a8      	mov	r8, r5
 8006768:	2000      	movs	r0, #0
 800676a:	250a      	movs	r5, #10
 800676c:	4641      	mov	r1, r8
 800676e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006772:	3b30      	subs	r3, #48	; 0x30
 8006774:	2b09      	cmp	r3, #9
 8006776:	d969      	bls.n	800684c <_vfiprintf_r+0x1a0>
 8006778:	b360      	cbz	r0, 80067d4 <_vfiprintf_r+0x128>
 800677a:	e024      	b.n	80067c6 <_vfiprintf_r+0x11a>
 800677c:	4b50      	ldr	r3, [pc, #320]	; (80068c0 <_vfiprintf_r+0x214>)
 800677e:	429c      	cmp	r4, r3
 8006780:	d101      	bne.n	8006786 <_vfiprintf_r+0xda>
 8006782:	68b4      	ldr	r4, [r6, #8]
 8006784:	e7a2      	b.n	80066cc <_vfiprintf_r+0x20>
 8006786:	4b4f      	ldr	r3, [pc, #316]	; (80068c4 <_vfiprintf_r+0x218>)
 8006788:	429c      	cmp	r4, r3
 800678a:	bf08      	it	eq
 800678c:	68f4      	ldreq	r4, [r6, #12]
 800678e:	e79d      	b.n	80066cc <_vfiprintf_r+0x20>
 8006790:	4621      	mov	r1, r4
 8006792:	4630      	mov	r0, r6
 8006794:	f000 f958 	bl	8006a48 <__swsetup_r>
 8006798:	2800      	cmp	r0, #0
 800679a:	d09d      	beq.n	80066d8 <_vfiprintf_r+0x2c>
 800679c:	f04f 30ff 	mov.w	r0, #4294967295
 80067a0:	b01d      	add	sp, #116	; 0x74
 80067a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a6:	46a8      	mov	r8, r5
 80067a8:	e7a2      	b.n	80066f0 <_vfiprintf_r+0x44>
 80067aa:	4a44      	ldr	r2, [pc, #272]	; (80068bc <_vfiprintf_r+0x210>)
 80067ac:	1a80      	subs	r0, r0, r2
 80067ae:	fa0b f000 	lsl.w	r0, fp, r0
 80067b2:	4318      	orrs	r0, r3
 80067b4:	9004      	str	r0, [sp, #16]
 80067b6:	4645      	mov	r5, r8
 80067b8:	e7be      	b.n	8006738 <_vfiprintf_r+0x8c>
 80067ba:	9a03      	ldr	r2, [sp, #12]
 80067bc:	1d11      	adds	r1, r2, #4
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	9103      	str	r1, [sp, #12]
 80067c2:	2a00      	cmp	r2, #0
 80067c4:	db01      	blt.n	80067ca <_vfiprintf_r+0x11e>
 80067c6:	9207      	str	r2, [sp, #28]
 80067c8:	e004      	b.n	80067d4 <_vfiprintf_r+0x128>
 80067ca:	4252      	negs	r2, r2
 80067cc:	f043 0302 	orr.w	r3, r3, #2
 80067d0:	9207      	str	r2, [sp, #28]
 80067d2:	9304      	str	r3, [sp, #16]
 80067d4:	f898 3000 	ldrb.w	r3, [r8]
 80067d8:	2b2e      	cmp	r3, #46	; 0x2e
 80067da:	d10e      	bne.n	80067fa <_vfiprintf_r+0x14e>
 80067dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80067e0:	2b2a      	cmp	r3, #42	; 0x2a
 80067e2:	d138      	bne.n	8006856 <_vfiprintf_r+0x1aa>
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	1d1a      	adds	r2, r3, #4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	9203      	str	r2, [sp, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bfb8      	it	lt
 80067f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80067f4:	f108 0802 	add.w	r8, r8, #2
 80067f8:	9305      	str	r3, [sp, #20]
 80067fa:	4d33      	ldr	r5, [pc, #204]	; (80068c8 <_vfiprintf_r+0x21c>)
 80067fc:	f898 1000 	ldrb.w	r1, [r8]
 8006800:	2203      	movs	r2, #3
 8006802:	4628      	mov	r0, r5
 8006804:	f7f9 fd24 	bl	8000250 <memchr>
 8006808:	b140      	cbz	r0, 800681c <_vfiprintf_r+0x170>
 800680a:	2340      	movs	r3, #64	; 0x40
 800680c:	1b40      	subs	r0, r0, r5
 800680e:	fa03 f000 	lsl.w	r0, r3, r0
 8006812:	9b04      	ldr	r3, [sp, #16]
 8006814:	4303      	orrs	r3, r0
 8006816:	f108 0801 	add.w	r8, r8, #1
 800681a:	9304      	str	r3, [sp, #16]
 800681c:	f898 1000 	ldrb.w	r1, [r8]
 8006820:	482a      	ldr	r0, [pc, #168]	; (80068cc <_vfiprintf_r+0x220>)
 8006822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006826:	2206      	movs	r2, #6
 8006828:	f108 0701 	add.w	r7, r8, #1
 800682c:	f7f9 fd10 	bl	8000250 <memchr>
 8006830:	2800      	cmp	r0, #0
 8006832:	d037      	beq.n	80068a4 <_vfiprintf_r+0x1f8>
 8006834:	4b26      	ldr	r3, [pc, #152]	; (80068d0 <_vfiprintf_r+0x224>)
 8006836:	bb1b      	cbnz	r3, 8006880 <_vfiprintf_r+0x1d4>
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	3307      	adds	r3, #7
 800683c:	f023 0307 	bic.w	r3, r3, #7
 8006840:	3308      	adds	r3, #8
 8006842:	9303      	str	r3, [sp, #12]
 8006844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006846:	444b      	add	r3, r9
 8006848:	9309      	str	r3, [sp, #36]	; 0x24
 800684a:	e750      	b.n	80066ee <_vfiprintf_r+0x42>
 800684c:	fb05 3202 	mla	r2, r5, r2, r3
 8006850:	2001      	movs	r0, #1
 8006852:	4688      	mov	r8, r1
 8006854:	e78a      	b.n	800676c <_vfiprintf_r+0xc0>
 8006856:	2300      	movs	r3, #0
 8006858:	f108 0801 	add.w	r8, r8, #1
 800685c:	9305      	str	r3, [sp, #20]
 800685e:	4619      	mov	r1, r3
 8006860:	250a      	movs	r5, #10
 8006862:	4640      	mov	r0, r8
 8006864:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006868:	3a30      	subs	r2, #48	; 0x30
 800686a:	2a09      	cmp	r2, #9
 800686c:	d903      	bls.n	8006876 <_vfiprintf_r+0x1ca>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0c3      	beq.n	80067fa <_vfiprintf_r+0x14e>
 8006872:	9105      	str	r1, [sp, #20]
 8006874:	e7c1      	b.n	80067fa <_vfiprintf_r+0x14e>
 8006876:	fb05 2101 	mla	r1, r5, r1, r2
 800687a:	2301      	movs	r3, #1
 800687c:	4680      	mov	r8, r0
 800687e:	e7f0      	b.n	8006862 <_vfiprintf_r+0x1b6>
 8006880:	ab03      	add	r3, sp, #12
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	4622      	mov	r2, r4
 8006886:	4b13      	ldr	r3, [pc, #76]	; (80068d4 <_vfiprintf_r+0x228>)
 8006888:	a904      	add	r1, sp, #16
 800688a:	4630      	mov	r0, r6
 800688c:	f7fd ff00 	bl	8004690 <_printf_float>
 8006890:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006894:	4681      	mov	r9, r0
 8006896:	d1d5      	bne.n	8006844 <_vfiprintf_r+0x198>
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	065b      	lsls	r3, r3, #25
 800689c:	f53f af7e 	bmi.w	800679c <_vfiprintf_r+0xf0>
 80068a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068a2:	e77d      	b.n	80067a0 <_vfiprintf_r+0xf4>
 80068a4:	ab03      	add	r3, sp, #12
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	4622      	mov	r2, r4
 80068aa:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <_vfiprintf_r+0x228>)
 80068ac:	a904      	add	r1, sp, #16
 80068ae:	4630      	mov	r0, r6
 80068b0:	f7fe f990 	bl	8004bd4 <_printf_i>
 80068b4:	e7ec      	b.n	8006890 <_vfiprintf_r+0x1e4>
 80068b6:	bf00      	nop
 80068b8:	08006d74 	.word	0x08006d74
 80068bc:	08006eb4 	.word	0x08006eb4
 80068c0:	08006d94 	.word	0x08006d94
 80068c4:	08006d54 	.word	0x08006d54
 80068c8:	08006eba 	.word	0x08006eba
 80068cc:	08006ebe 	.word	0x08006ebe
 80068d0:	08004691 	.word	0x08004691
 80068d4:	08006687 	.word	0x08006687

080068d8 <_sbrk_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4c06      	ldr	r4, [pc, #24]	; (80068f4 <_sbrk_r+0x1c>)
 80068dc:	2300      	movs	r3, #0
 80068de:	4605      	mov	r5, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	6023      	str	r3, [r4, #0]
 80068e4:	f7fa fbbc 	bl	8001060 <_sbrk>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d102      	bne.n	80068f2 <_sbrk_r+0x1a>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	b103      	cbz	r3, 80068f2 <_sbrk_r+0x1a>
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	2000044c 	.word	0x2000044c

080068f8 <__sread>:
 80068f8:	b510      	push	{r4, lr}
 80068fa:	460c      	mov	r4, r1
 80068fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006900:	f000 f968 	bl	8006bd4 <_read_r>
 8006904:	2800      	cmp	r0, #0
 8006906:	bfab      	itete	ge
 8006908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800690a:	89a3      	ldrhlt	r3, [r4, #12]
 800690c:	181b      	addge	r3, r3, r0
 800690e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006912:	bfac      	ite	ge
 8006914:	6563      	strge	r3, [r4, #84]	; 0x54
 8006916:	81a3      	strhlt	r3, [r4, #12]
 8006918:	bd10      	pop	{r4, pc}

0800691a <__swrite>:
 800691a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800691e:	461f      	mov	r7, r3
 8006920:	898b      	ldrh	r3, [r1, #12]
 8006922:	05db      	lsls	r3, r3, #23
 8006924:	4605      	mov	r5, r0
 8006926:	460c      	mov	r4, r1
 8006928:	4616      	mov	r6, r2
 800692a:	d505      	bpl.n	8006938 <__swrite+0x1e>
 800692c:	2302      	movs	r3, #2
 800692e:	2200      	movs	r2, #0
 8006930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006934:	f000 f928 	bl	8006b88 <_lseek_r>
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800693e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006942:	81a3      	strh	r3, [r4, #12]
 8006944:	4632      	mov	r2, r6
 8006946:	463b      	mov	r3, r7
 8006948:	4628      	mov	r0, r5
 800694a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800694e:	f000 b869 	b.w	8006a24 <_write_r>

08006952 <__sseek>:
 8006952:	b510      	push	{r4, lr}
 8006954:	460c      	mov	r4, r1
 8006956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800695a:	f000 f915 	bl	8006b88 <_lseek_r>
 800695e:	1c43      	adds	r3, r0, #1
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	bf15      	itete	ne
 8006964:	6560      	strne	r0, [r4, #84]	; 0x54
 8006966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800696a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800696e:	81a3      	strheq	r3, [r4, #12]
 8006970:	bf18      	it	ne
 8006972:	81a3      	strhne	r3, [r4, #12]
 8006974:	bd10      	pop	{r4, pc}

08006976 <__sclose>:
 8006976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697a:	f000 b8d3 	b.w	8006b24 <_close_r>
	...

08006980 <__swbuf_r>:
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006982:	460e      	mov	r6, r1
 8006984:	4614      	mov	r4, r2
 8006986:	4605      	mov	r5, r0
 8006988:	b118      	cbz	r0, 8006992 <__swbuf_r+0x12>
 800698a:	6983      	ldr	r3, [r0, #24]
 800698c:	b90b      	cbnz	r3, 8006992 <__swbuf_r+0x12>
 800698e:	f7ff f9c3 	bl	8005d18 <__sinit>
 8006992:	4b21      	ldr	r3, [pc, #132]	; (8006a18 <__swbuf_r+0x98>)
 8006994:	429c      	cmp	r4, r3
 8006996:	d12a      	bne.n	80069ee <__swbuf_r+0x6e>
 8006998:	686c      	ldr	r4, [r5, #4]
 800699a:	69a3      	ldr	r3, [r4, #24]
 800699c:	60a3      	str	r3, [r4, #8]
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	071a      	lsls	r2, r3, #28
 80069a2:	d52e      	bpl.n	8006a02 <__swbuf_r+0x82>
 80069a4:	6923      	ldr	r3, [r4, #16]
 80069a6:	b363      	cbz	r3, 8006a02 <__swbuf_r+0x82>
 80069a8:	6923      	ldr	r3, [r4, #16]
 80069aa:	6820      	ldr	r0, [r4, #0]
 80069ac:	1ac0      	subs	r0, r0, r3
 80069ae:	6963      	ldr	r3, [r4, #20]
 80069b0:	b2f6      	uxtb	r6, r6
 80069b2:	4283      	cmp	r3, r0
 80069b4:	4637      	mov	r7, r6
 80069b6:	dc04      	bgt.n	80069c2 <__swbuf_r+0x42>
 80069b8:	4621      	mov	r1, r4
 80069ba:	4628      	mov	r0, r5
 80069bc:	f7ff f942 	bl	8005c44 <_fflush_r>
 80069c0:	bb28      	cbnz	r0, 8006a0e <__swbuf_r+0x8e>
 80069c2:	68a3      	ldr	r3, [r4, #8]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	60a3      	str	r3, [r4, #8]
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	6022      	str	r2, [r4, #0]
 80069ce:	701e      	strb	r6, [r3, #0]
 80069d0:	6963      	ldr	r3, [r4, #20]
 80069d2:	3001      	adds	r0, #1
 80069d4:	4283      	cmp	r3, r0
 80069d6:	d004      	beq.n	80069e2 <__swbuf_r+0x62>
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	07db      	lsls	r3, r3, #31
 80069dc:	d519      	bpl.n	8006a12 <__swbuf_r+0x92>
 80069de:	2e0a      	cmp	r6, #10
 80069e0:	d117      	bne.n	8006a12 <__swbuf_r+0x92>
 80069e2:	4621      	mov	r1, r4
 80069e4:	4628      	mov	r0, r5
 80069e6:	f7ff f92d 	bl	8005c44 <_fflush_r>
 80069ea:	b190      	cbz	r0, 8006a12 <__swbuf_r+0x92>
 80069ec:	e00f      	b.n	8006a0e <__swbuf_r+0x8e>
 80069ee:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <__swbuf_r+0x9c>)
 80069f0:	429c      	cmp	r4, r3
 80069f2:	d101      	bne.n	80069f8 <__swbuf_r+0x78>
 80069f4:	68ac      	ldr	r4, [r5, #8]
 80069f6:	e7d0      	b.n	800699a <__swbuf_r+0x1a>
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <__swbuf_r+0xa0>)
 80069fa:	429c      	cmp	r4, r3
 80069fc:	bf08      	it	eq
 80069fe:	68ec      	ldreq	r4, [r5, #12]
 8006a00:	e7cb      	b.n	800699a <__swbuf_r+0x1a>
 8006a02:	4621      	mov	r1, r4
 8006a04:	4628      	mov	r0, r5
 8006a06:	f000 f81f 	bl	8006a48 <__swsetup_r>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d0cc      	beq.n	80069a8 <__swbuf_r+0x28>
 8006a0e:	f04f 37ff 	mov.w	r7, #4294967295
 8006a12:	4638      	mov	r0, r7
 8006a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a16:	bf00      	nop
 8006a18:	08006d74 	.word	0x08006d74
 8006a1c:	08006d94 	.word	0x08006d94
 8006a20:	08006d54 	.word	0x08006d54

08006a24 <_write_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4c07      	ldr	r4, [pc, #28]	; (8006a44 <_write_r+0x20>)
 8006a28:	4605      	mov	r5, r0
 8006a2a:	4608      	mov	r0, r1
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	2200      	movs	r2, #0
 8006a30:	6022      	str	r2, [r4, #0]
 8006a32:	461a      	mov	r2, r3
 8006a34:	f7fa f8d8 	bl	8000be8 <_write>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_write_r+0x1e>
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_write_r+0x1e>
 8006a40:	602b      	str	r3, [r5, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	2000044c 	.word	0x2000044c

08006a48 <__swsetup_r>:
 8006a48:	4b32      	ldr	r3, [pc, #200]	; (8006b14 <__swsetup_r+0xcc>)
 8006a4a:	b570      	push	{r4, r5, r6, lr}
 8006a4c:	681d      	ldr	r5, [r3, #0]
 8006a4e:	4606      	mov	r6, r0
 8006a50:	460c      	mov	r4, r1
 8006a52:	b125      	cbz	r5, 8006a5e <__swsetup_r+0x16>
 8006a54:	69ab      	ldr	r3, [r5, #24]
 8006a56:	b913      	cbnz	r3, 8006a5e <__swsetup_r+0x16>
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f7ff f95d 	bl	8005d18 <__sinit>
 8006a5e:	4b2e      	ldr	r3, [pc, #184]	; (8006b18 <__swsetup_r+0xd0>)
 8006a60:	429c      	cmp	r4, r3
 8006a62:	d10f      	bne.n	8006a84 <__swsetup_r+0x3c>
 8006a64:	686c      	ldr	r4, [r5, #4]
 8006a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	0715      	lsls	r5, r2, #28
 8006a6e:	d42c      	bmi.n	8006aca <__swsetup_r+0x82>
 8006a70:	06d0      	lsls	r0, r2, #27
 8006a72:	d411      	bmi.n	8006a98 <__swsetup_r+0x50>
 8006a74:	2209      	movs	r2, #9
 8006a76:	6032      	str	r2, [r6, #0]
 8006a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a82:	e03e      	b.n	8006b02 <__swsetup_r+0xba>
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <__swsetup_r+0xd4>)
 8006a86:	429c      	cmp	r4, r3
 8006a88:	d101      	bne.n	8006a8e <__swsetup_r+0x46>
 8006a8a:	68ac      	ldr	r4, [r5, #8]
 8006a8c:	e7eb      	b.n	8006a66 <__swsetup_r+0x1e>
 8006a8e:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <__swsetup_r+0xd8>)
 8006a90:	429c      	cmp	r4, r3
 8006a92:	bf08      	it	eq
 8006a94:	68ec      	ldreq	r4, [r5, #12]
 8006a96:	e7e6      	b.n	8006a66 <__swsetup_r+0x1e>
 8006a98:	0751      	lsls	r1, r2, #29
 8006a9a:	d512      	bpl.n	8006ac2 <__swsetup_r+0x7a>
 8006a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a9e:	b141      	cbz	r1, 8006ab2 <__swsetup_r+0x6a>
 8006aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aa4:	4299      	cmp	r1, r3
 8006aa6:	d002      	beq.n	8006aae <__swsetup_r+0x66>
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f7ff fd2d 	bl	8006508 <_free_r>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	2300      	movs	r3, #0
 8006abc:	6063      	str	r3, [r4, #4]
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	f043 0308 	orr.w	r3, r3, #8
 8006ac8:	81a3      	strh	r3, [r4, #12]
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	b94b      	cbnz	r3, 8006ae2 <__swsetup_r+0x9a>
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad8:	d003      	beq.n	8006ae2 <__swsetup_r+0x9a>
 8006ada:	4621      	mov	r1, r4
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7ff f9d7 	bl	8005e90 <__smakebuf_r>
 8006ae2:	89a2      	ldrh	r2, [r4, #12]
 8006ae4:	f012 0301 	ands.w	r3, r2, #1
 8006ae8:	d00c      	beq.n	8006b04 <__swsetup_r+0xbc>
 8006aea:	2300      	movs	r3, #0
 8006aec:	60a3      	str	r3, [r4, #8]
 8006aee:	6963      	ldr	r3, [r4, #20]
 8006af0:	425b      	negs	r3, r3
 8006af2:	61a3      	str	r3, [r4, #24]
 8006af4:	6923      	ldr	r3, [r4, #16]
 8006af6:	b953      	cbnz	r3, 8006b0e <__swsetup_r+0xc6>
 8006af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006afc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006b00:	d1ba      	bne.n	8006a78 <__swsetup_r+0x30>
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	0792      	lsls	r2, r2, #30
 8006b06:	bf58      	it	pl
 8006b08:	6963      	ldrpl	r3, [r4, #20]
 8006b0a:	60a3      	str	r3, [r4, #8]
 8006b0c:	e7f2      	b.n	8006af4 <__swsetup_r+0xac>
 8006b0e:	2000      	movs	r0, #0
 8006b10:	e7f7      	b.n	8006b02 <__swsetup_r+0xba>
 8006b12:	bf00      	nop
 8006b14:	20000144 	.word	0x20000144
 8006b18:	08006d74 	.word	0x08006d74
 8006b1c:	08006d94 	.word	0x08006d94
 8006b20:	08006d54 	.word	0x08006d54

08006b24 <_close_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4c06      	ldr	r4, [pc, #24]	; (8006b40 <_close_r+0x1c>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	6023      	str	r3, [r4, #0]
 8006b30:	f7fa f886 	bl	8000c40 <_close>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_close_r+0x1a>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_close_r+0x1a>
 8006b3c:	602b      	str	r3, [r5, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	2000044c 	.word	0x2000044c

08006b44 <_fstat_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4c07      	ldr	r4, [pc, #28]	; (8006b64 <_fstat_r+0x20>)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	4611      	mov	r1, r2
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	f7fa f8c5 	bl	8000ce0 <_fstat>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	d102      	bne.n	8006b60 <_fstat_r+0x1c>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	b103      	cbz	r3, 8006b60 <_fstat_r+0x1c>
 8006b5e:	602b      	str	r3, [r5, #0]
 8006b60:	bd38      	pop	{r3, r4, r5, pc}
 8006b62:	bf00      	nop
 8006b64:	2000044c 	.word	0x2000044c

08006b68 <_isatty_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4c06      	ldr	r4, [pc, #24]	; (8006b84 <_isatty_r+0x1c>)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4605      	mov	r5, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	6023      	str	r3, [r4, #0]
 8006b74:	f7fa f822 	bl	8000bbc <_isatty>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_isatty_r+0x1a>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_isatty_r+0x1a>
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	2000044c 	.word	0x2000044c

08006b88 <_lseek_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4c07      	ldr	r4, [pc, #28]	; (8006ba8 <_lseek_r+0x20>)
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	4608      	mov	r0, r1
 8006b90:	4611      	mov	r1, r2
 8006b92:	2200      	movs	r2, #0
 8006b94:	6022      	str	r2, [r4, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	f7fa f869 	bl	8000c6e <_lseek>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d102      	bne.n	8006ba6 <_lseek_r+0x1e>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	b103      	cbz	r3, 8006ba6 <_lseek_r+0x1e>
 8006ba4:	602b      	str	r3, [r5, #0]
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	2000044c 	.word	0x2000044c

08006bac <__ascii_mbtowc>:
 8006bac:	b082      	sub	sp, #8
 8006bae:	b901      	cbnz	r1, 8006bb2 <__ascii_mbtowc+0x6>
 8006bb0:	a901      	add	r1, sp, #4
 8006bb2:	b142      	cbz	r2, 8006bc6 <__ascii_mbtowc+0x1a>
 8006bb4:	b14b      	cbz	r3, 8006bca <__ascii_mbtowc+0x1e>
 8006bb6:	7813      	ldrb	r3, [r2, #0]
 8006bb8:	600b      	str	r3, [r1, #0]
 8006bba:	7812      	ldrb	r2, [r2, #0]
 8006bbc:	1c10      	adds	r0, r2, #0
 8006bbe:	bf18      	it	ne
 8006bc0:	2001      	movne	r0, #1
 8006bc2:	b002      	add	sp, #8
 8006bc4:	4770      	bx	lr
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	e7fb      	b.n	8006bc2 <__ascii_mbtowc+0x16>
 8006bca:	f06f 0001 	mvn.w	r0, #1
 8006bce:	e7f8      	b.n	8006bc2 <__ascii_mbtowc+0x16>

08006bd0 <__malloc_lock>:
 8006bd0:	4770      	bx	lr

08006bd2 <__malloc_unlock>:
 8006bd2:	4770      	bx	lr

08006bd4 <_read_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4c07      	ldr	r4, [pc, #28]	; (8006bf4 <_read_r+0x20>)
 8006bd8:	4605      	mov	r5, r0
 8006bda:	4608      	mov	r0, r1
 8006bdc:	4611      	mov	r1, r2
 8006bde:	2200      	movs	r2, #0
 8006be0:	6022      	str	r2, [r4, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	f7fa f854 	bl	8000c90 <_read>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d102      	bne.n	8006bf2 <_read_r+0x1e>
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	b103      	cbz	r3, 8006bf2 <_read_r+0x1e>
 8006bf0:	602b      	str	r3, [r5, #0]
 8006bf2:	bd38      	pop	{r3, r4, r5, pc}
 8006bf4:	2000044c 	.word	0x2000044c

08006bf8 <__ascii_wctomb>:
 8006bf8:	b149      	cbz	r1, 8006c0e <__ascii_wctomb+0x16>
 8006bfa:	2aff      	cmp	r2, #255	; 0xff
 8006bfc:	bf85      	ittet	hi
 8006bfe:	238a      	movhi	r3, #138	; 0x8a
 8006c00:	6003      	strhi	r3, [r0, #0]
 8006c02:	700a      	strbls	r2, [r1, #0]
 8006c04:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c08:	bf98      	it	ls
 8006c0a:	2001      	movls	r0, #1
 8006c0c:	4770      	bx	lr
 8006c0e:	4608      	mov	r0, r1
 8006c10:	4770      	bx	lr
	...

08006c14 <_init>:
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c16:	bf00      	nop
 8006c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1a:	bc08      	pop	{r3}
 8006c1c:	469e      	mov	lr, r3
 8006c1e:	4770      	bx	lr

08006c20 <_fini>:
 8006c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c22:	bf00      	nop
 8006c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c26:	bc08      	pop	{r3}
 8006c28:	469e      	mov	lr, r3
 8006c2a:	4770      	bx	lr
